// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ipfs_lite.proto

#include <StdInc.h>
#include "ipfs_lite.pb.h"
#include "ipfs_lite.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ipfs_lite {

static const char* IpfsLite_method_names[] = {
  "/ipfs_lite.IpfsLite/AddFile",
  "/ipfs_lite.IpfsLite/GetFile",
  "/ipfs_lite.IpfsLite/HasBlock",
  "/ipfs_lite.IpfsLite/AddNode",
  "/ipfs_lite.IpfsLite/AddNodes",
  "/ipfs_lite.IpfsLite/GetNode",
  "/ipfs_lite.IpfsLite/GetNodes",
  "/ipfs_lite.IpfsLite/RemoveNode",
  "/ipfs_lite.IpfsLite/RemoveNodes",
  "/ipfs_lite.IpfsLite/ResolveLink",
  "/ipfs_lite.IpfsLite/Tree",
};

std::unique_ptr< IpfsLite::Stub> IpfsLite::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IpfsLite::Stub> stub(new IpfsLite::Stub(channel));
  return stub;
}

IpfsLite::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddFile_(IpfsLite_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetFile_(IpfsLite_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_HasBlock_(IpfsLite_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddNode_(IpfsLite_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddNodes_(IpfsLite_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNode_(IpfsLite_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodes_(IpfsLite_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RemoveNode_(IpfsLite_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveNodes_(IpfsLite_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResolveLink_(IpfsLite_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tree_(IpfsLite_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::ipfs_lite::AddFileRequest>* IpfsLite::Stub::AddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::ipfs_lite::AddFileRequest>::Create(channel_.get(), rpcmethod_AddFile_, context, response);
}

void IpfsLite::Stub::experimental_async::AddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::experimental::ClientWriteReactor< ::ipfs_lite::AddFileRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::ipfs_lite::AddFileRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_AddFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ipfs_lite::AddFileRequest>* IpfsLite::Stub::AsyncAddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::ipfs_lite::AddFileRequest>::Create(channel_.get(), cq, rpcmethod_AddFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ipfs_lite::AddFileRequest>* IpfsLite::Stub::PrepareAsyncAddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::ipfs_lite::AddFileRequest>::Create(channel_.get(), cq, rpcmethod_AddFile_, context, response, false, nullptr);
}

::grpc::ClientReader< ::ipfs_lite::GetFileResponse>* IpfsLite::Stub::GetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::ipfs_lite::GetFileResponse>::Create(channel_.get(), rpcmethod_GetFile_, context, request);
}

void IpfsLite::Stub::experimental_async::GetFile(::grpc::ClientContext* context, ::ipfs_lite::GetFileRequest* request, ::grpc::experimental::ClientReadReactor< ::ipfs_lite::GetFileResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::ipfs_lite::GetFileResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ipfs_lite::GetFileResponse>* IpfsLite::Stub::AsyncGetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ipfs_lite::GetFileResponse>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ipfs_lite::GetFileResponse>* IpfsLite::Stub::PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ipfs_lite::GetFileResponse>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, false, nullptr);
}

::grpc::Status IpfsLite::Stub::HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::ipfs_lite::HasBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HasBlock_, context, request, response);
}

void IpfsLite::Stub::experimental_async::HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest* request, ::ipfs_lite::HasBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasBlock_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::HasBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::HasBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasBlock_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest* request, ::ipfs_lite::HasBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasBlock_, context, request, response, reactor);
}

void IpfsLite::Stub::experimental_async::HasBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::HasBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::HasBlockResponse>* IpfsLite::Stub::AsyncHasBlockRaw(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::HasBlockResponse>::Create(channel_.get(), cq, rpcmethod_HasBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::HasBlockResponse>* IpfsLite::Stub::PrepareAsyncHasBlockRaw(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::HasBlockResponse>::Create(channel_.get(), cq, rpcmethod_HasBlock_, context, request, false);
}

::grpc::Status IpfsLite::Stub::AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::ipfs_lite::AddNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddNode_, context, request, response);
}

void IpfsLite::Stub::experimental_async::AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest* request, ::ipfs_lite::AddNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddNode_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::AddNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddNode_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest* request, ::ipfs_lite::AddNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddNode_, context, request, response, reactor);
}

void IpfsLite::Stub::experimental_async::AddNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodeResponse>* IpfsLite::Stub::AsyncAddNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::AddNodeResponse>::Create(channel_.get(), cq, rpcmethod_AddNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodeResponse>* IpfsLite::Stub::PrepareAsyncAddNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::AddNodeResponse>::Create(channel_.get(), cq, rpcmethod_AddNode_, context, request, false);
}

::grpc::Status IpfsLite::Stub::AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::ipfs_lite::AddNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddNodes_, context, request, response);
}

void IpfsLite::Stub::experimental_async::AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest* request, ::ipfs_lite::AddNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddNodes_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::AddNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddNodes_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest* request, ::ipfs_lite::AddNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddNodes_, context, request, response, reactor);
}

void IpfsLite::Stub::experimental_async::AddNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodesResponse>* IpfsLite::Stub::AsyncAddNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::AddNodesResponse>::Create(channel_.get(), cq, rpcmethod_AddNodes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodesResponse>* IpfsLite::Stub::PrepareAsyncAddNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::AddNodesResponse>::Create(channel_.get(), cq, rpcmethod_AddNodes_, context, request, false);
}

::grpc::Status IpfsLite::Stub::GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::ipfs_lite::GetNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNode_, context, request, response);
}

void IpfsLite::Stub::experimental_async::GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest* request, ::ipfs_lite::GetNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNode_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::GetNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::GetNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNode_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest* request, ::ipfs_lite::GetNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNode_, context, request, response, reactor);
}

void IpfsLite::Stub::experimental_async::GetNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::GetNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::GetNodeResponse>* IpfsLite::Stub::AsyncGetNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::GetNodeResponse>::Create(channel_.get(), cq, rpcmethod_GetNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::GetNodeResponse>* IpfsLite::Stub::PrepareAsyncGetNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::GetNodeResponse>::Create(channel_.get(), cq, rpcmethod_GetNode_, context, request, false);
}

::grpc::ClientReader< ::ipfs_lite::GetNodesResponse>* IpfsLite::Stub::GetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::ipfs_lite::GetNodesResponse>::Create(channel_.get(), rpcmethod_GetNodes_, context, request);
}

void IpfsLite::Stub::experimental_async::GetNodes(::grpc::ClientContext* context, ::ipfs_lite::GetNodesRequest* request, ::grpc::experimental::ClientReadReactor< ::ipfs_lite::GetNodesResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::ipfs_lite::GetNodesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ipfs_lite::GetNodesResponse>* IpfsLite::Stub::AsyncGetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ipfs_lite::GetNodesResponse>::Create(channel_.get(), cq, rpcmethod_GetNodes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ipfs_lite::GetNodesResponse>* IpfsLite::Stub::PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ipfs_lite::GetNodesResponse>::Create(channel_.get(), cq, rpcmethod_GetNodes_, context, request, false, nullptr);
}

::grpc::Status IpfsLite::Stub::RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::ipfs_lite::RemoveNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveNode_, context, request, response);
}

void IpfsLite::Stub::experimental_async::RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest* request, ::ipfs_lite::RemoveNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveNode_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::RemoveNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveNode_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest* request, ::ipfs_lite::RemoveNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveNode_, context, request, response, reactor);
}

void IpfsLite::Stub::experimental_async::RemoveNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodeResponse>* IpfsLite::Stub::AsyncRemoveNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::RemoveNodeResponse>::Create(channel_.get(), cq, rpcmethod_RemoveNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodeResponse>* IpfsLite::Stub::PrepareAsyncRemoveNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::RemoveNodeResponse>::Create(channel_.get(), cq, rpcmethod_RemoveNode_, context, request, false);
}

::grpc::Status IpfsLite::Stub::RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::ipfs_lite::RemoveNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveNodes_, context, request, response);
}

void IpfsLite::Stub::experimental_async::RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest* request, ::ipfs_lite::RemoveNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveNodes_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::RemoveNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveNodes_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest* request, ::ipfs_lite::RemoveNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveNodes_, context, request, response, reactor);
}

void IpfsLite::Stub::experimental_async::RemoveNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodesResponse>* IpfsLite::Stub::AsyncRemoveNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::RemoveNodesResponse>::Create(channel_.get(), cq, rpcmethod_RemoveNodes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodesResponse>* IpfsLite::Stub::PrepareAsyncRemoveNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::RemoveNodesResponse>::Create(channel_.get(), cq, rpcmethod_RemoveNodes_, context, request, false);
}

::grpc::Status IpfsLite::Stub::ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::ipfs_lite::ResolveLinkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResolveLink_, context, request, response);
}

void IpfsLite::Stub::experimental_async::ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest* request, ::ipfs_lite::ResolveLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResolveLink_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::ResolveLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::ResolveLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResolveLink_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest* request, ::ipfs_lite::ResolveLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResolveLink_, context, request, response, reactor);
}

void IpfsLite::Stub::experimental_async::ResolveLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::ResolveLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResolveLink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::ResolveLinkResponse>* IpfsLite::Stub::AsyncResolveLinkRaw(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::ResolveLinkResponse>::Create(channel_.get(), cq, rpcmethod_ResolveLink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::ResolveLinkResponse>* IpfsLite::Stub::PrepareAsyncResolveLinkRaw(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::ResolveLinkResponse>::Create(channel_.get(), cq, rpcmethod_ResolveLink_, context, request, false);
}

::grpc::Status IpfsLite::Stub::Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::ipfs_lite::TreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Tree_, context, request, response);
}

void IpfsLite::Stub::experimental_async::Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest* request, ::ipfs_lite::TreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tree_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::Tree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::TreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tree_, context, request, response, std::move(f));
}

void IpfsLite::Stub::experimental_async::Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest* request, ::ipfs_lite::TreeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tree_, context, request, response, reactor);
}

void IpfsLite::Stub::experimental_async::Tree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::TreeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::TreeResponse>* IpfsLite::Stub::AsyncTreeRaw(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::TreeResponse>::Create(channel_.get(), cq, rpcmethod_Tree_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ipfs_lite::TreeResponse>* IpfsLite::Stub::PrepareAsyncTreeRaw(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ipfs_lite::TreeResponse>::Create(channel_.get(), cq, rpcmethod_Tree_, context, request, false);
}

IpfsLite::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< IpfsLite::Service, ::ipfs_lite::AddFileRequest, ::ipfs_lite::AddFileResponse>(
          std::mem_fn(&IpfsLite::Service::AddFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IpfsLite::Service, ::ipfs_lite::GetFileRequest, ::ipfs_lite::GetFileResponse>(
          std::mem_fn(&IpfsLite::Service::GetFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpfsLite::Service, ::ipfs_lite::HasBlockRequest, ::ipfs_lite::HasBlockResponse>(
          std::mem_fn(&IpfsLite::Service::HasBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpfsLite::Service, ::ipfs_lite::AddNodeRequest, ::ipfs_lite::AddNodeResponse>(
          std::mem_fn(&IpfsLite::Service::AddNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpfsLite::Service, ::ipfs_lite::AddNodesRequest, ::ipfs_lite::AddNodesResponse>(
          std::mem_fn(&IpfsLite::Service::AddNodes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpfsLite::Service, ::ipfs_lite::GetNodeRequest, ::ipfs_lite::GetNodeResponse>(
          std::mem_fn(&IpfsLite::Service::GetNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IpfsLite::Service, ::ipfs_lite::GetNodesRequest, ::ipfs_lite::GetNodesResponse>(
          std::mem_fn(&IpfsLite::Service::GetNodes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpfsLite::Service, ::ipfs_lite::RemoveNodeRequest, ::ipfs_lite::RemoveNodeResponse>(
          std::mem_fn(&IpfsLite::Service::RemoveNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpfsLite::Service, ::ipfs_lite::RemoveNodesRequest, ::ipfs_lite::RemoveNodesResponse>(
          std::mem_fn(&IpfsLite::Service::RemoveNodes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpfsLite::Service, ::ipfs_lite::ResolveLinkRequest, ::ipfs_lite::ResolveLinkResponse>(
          std::mem_fn(&IpfsLite::Service::ResolveLink), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpfsLite_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpfsLite::Service, ::ipfs_lite::TreeRequest, ::ipfs_lite::TreeResponse>(
          std::mem_fn(&IpfsLite::Service::Tree), this)));
}

IpfsLite::Service::~Service() {
}

::grpc::Status IpfsLite::Service::AddFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::ipfs_lite::AddFileRequest>* reader, ::ipfs_lite::AddFileResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::GetFile(::grpc::ServerContext* context, const ::ipfs_lite::GetFileRequest* request, ::grpc::ServerWriter< ::ipfs_lite::GetFileResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::HasBlock(::grpc::ServerContext* context, const ::ipfs_lite::HasBlockRequest* request, ::ipfs_lite::HasBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::AddNode(::grpc::ServerContext* context, const ::ipfs_lite::AddNodeRequest* request, ::ipfs_lite::AddNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::AddNodes(::grpc::ServerContext* context, const ::ipfs_lite::AddNodesRequest* request, ::ipfs_lite::AddNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::GetNode(::grpc::ServerContext* context, const ::ipfs_lite::GetNodeRequest* request, ::ipfs_lite::GetNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::GetNodes(::grpc::ServerContext* context, const ::ipfs_lite::GetNodesRequest* request, ::grpc::ServerWriter< ::ipfs_lite::GetNodesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::RemoveNode(::grpc::ServerContext* context, const ::ipfs_lite::RemoveNodeRequest* request, ::ipfs_lite::RemoveNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::RemoveNodes(::grpc::ServerContext* context, const ::ipfs_lite::RemoveNodesRequest* request, ::ipfs_lite::RemoveNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::ResolveLink(::grpc::ServerContext* context, const ::ipfs_lite::ResolveLinkRequest* request, ::ipfs_lite::ResolveLinkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpfsLite::Service::Tree(::grpc::ServerContext* context, const ::ipfs_lite::TreeRequest* request, ::ipfs_lite::TreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ipfs_lite

