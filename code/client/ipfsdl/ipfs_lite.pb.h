// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipfs_lite.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ipfs_5flite_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ipfs_5flite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ipfs_5flite_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ipfs_5flite_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[41]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ipfs_5flite_2eproto;
namespace ipfs_lite {
class AddFileRequest;
class AddFileRequestDefaultTypeInternal;
extern AddFileRequestDefaultTypeInternal _AddFileRequest_default_instance_;
class AddFileResponse;
class AddFileResponseDefaultTypeInternal;
extern AddFileResponseDefaultTypeInternal _AddFileResponse_default_instance_;
class AddNodeRequest;
class AddNodeRequestDefaultTypeInternal;
extern AddNodeRequestDefaultTypeInternal _AddNodeRequest_default_instance_;
class AddNodeResponse;
class AddNodeResponseDefaultTypeInternal;
extern AddNodeResponseDefaultTypeInternal _AddNodeResponse_default_instance_;
class AddNodesRequest;
class AddNodesRequestDefaultTypeInternal;
extern AddNodesRequestDefaultTypeInternal _AddNodesRequest_default_instance_;
class AddNodesResponse;
class AddNodesResponseDefaultTypeInternal;
extern AddNodesResponseDefaultTypeInternal _AddNodesResponse_default_instance_;
class AddParams;
class AddParamsDefaultTypeInternal;
extern AddParamsDefaultTypeInternal _AddParams_default_instance_;
class AllKeysRequest;
class AllKeysRequestDefaultTypeInternal;
extern AllKeysRequestDefaultTypeInternal _AllKeysRequest_default_instance_;
class AllKeysResponse;
class AllKeysResponseDefaultTypeInternal;
extern AllKeysResponseDefaultTypeInternal _AllKeysResponse_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class DeleteBlockRequest;
class DeleteBlockRequestDefaultTypeInternal;
extern DeleteBlockRequestDefaultTypeInternal _DeleteBlockRequest_default_instance_;
class DeleteBlockResponse;
class DeleteBlockResponseDefaultTypeInternal;
extern DeleteBlockResponseDefaultTypeInternal _DeleteBlockResponse_default_instance_;
class GetBlockRequest;
class GetBlockRequestDefaultTypeInternal;
extern GetBlockRequestDefaultTypeInternal _GetBlockRequest_default_instance_;
class GetBlockResponse;
class GetBlockResponseDefaultTypeInternal;
extern GetBlockResponseDefaultTypeInternal _GetBlockResponse_default_instance_;
class GetBlockSizeRequest;
class GetBlockSizeRequestDefaultTypeInternal;
extern GetBlockSizeRequestDefaultTypeInternal _GetBlockSizeRequest_default_instance_;
class GetBlockSizeResponse;
class GetBlockSizeResponseDefaultTypeInternal;
extern GetBlockSizeResponseDefaultTypeInternal _GetBlockSizeResponse_default_instance_;
class GetFileRequest;
class GetFileRequestDefaultTypeInternal;
extern GetFileRequestDefaultTypeInternal _GetFileRequest_default_instance_;
class GetFileResponse;
class GetFileResponseDefaultTypeInternal;
extern GetFileResponseDefaultTypeInternal _GetFileResponse_default_instance_;
class GetNodeRequest;
class GetNodeRequestDefaultTypeInternal;
extern GetNodeRequestDefaultTypeInternal _GetNodeRequest_default_instance_;
class GetNodeResponse;
class GetNodeResponseDefaultTypeInternal;
extern GetNodeResponseDefaultTypeInternal _GetNodeResponse_default_instance_;
class GetNodesRequest;
class GetNodesRequestDefaultTypeInternal;
extern GetNodesRequestDefaultTypeInternal _GetNodesRequest_default_instance_;
class GetNodesResponse;
class GetNodesResponseDefaultTypeInternal;
extern GetNodesResponseDefaultTypeInternal _GetNodesResponse_default_instance_;
class HasBlockRequest;
class HasBlockRequestDefaultTypeInternal;
extern HasBlockRequestDefaultTypeInternal _HasBlockRequest_default_instance_;
class HasBlockResponse;
class HasBlockResponseDefaultTypeInternal;
extern HasBlockResponseDefaultTypeInternal _HasBlockResponse_default_instance_;
class HashOnReadRequest;
class HashOnReadRequestDefaultTypeInternal;
extern HashOnReadRequestDefaultTypeInternal _HashOnReadRequest_default_instance_;
class HashOnReadResponse;
class HashOnReadResponseDefaultTypeInternal;
extern HashOnReadResponseDefaultTypeInternal _HashOnReadResponse_default_instance_;
class Link;
class LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeStat;
class NodeStatDefaultTypeInternal;
extern NodeStatDefaultTypeInternal _NodeStat_default_instance_;
class PutBlockRequest;
class PutBlockRequestDefaultTypeInternal;
extern PutBlockRequestDefaultTypeInternal _PutBlockRequest_default_instance_;
class PutBlockResponse;
class PutBlockResponseDefaultTypeInternal;
extern PutBlockResponseDefaultTypeInternal _PutBlockResponse_default_instance_;
class PutBlocksRequest;
class PutBlocksRequestDefaultTypeInternal;
extern PutBlocksRequestDefaultTypeInternal _PutBlocksRequest_default_instance_;
class PutBlocksResponse;
class PutBlocksResponseDefaultTypeInternal;
extern PutBlocksResponseDefaultTypeInternal _PutBlocksResponse_default_instance_;
class RemoveNodeRequest;
class RemoveNodeRequestDefaultTypeInternal;
extern RemoveNodeRequestDefaultTypeInternal _RemoveNodeRequest_default_instance_;
class RemoveNodeResponse;
class RemoveNodeResponseDefaultTypeInternal;
extern RemoveNodeResponseDefaultTypeInternal _RemoveNodeResponse_default_instance_;
class RemoveNodesRequest;
class RemoveNodesRequestDefaultTypeInternal;
extern RemoveNodesRequestDefaultTypeInternal _RemoveNodesRequest_default_instance_;
class RemoveNodesResponse;
class RemoveNodesResponseDefaultTypeInternal;
extern RemoveNodesResponseDefaultTypeInternal _RemoveNodesResponse_default_instance_;
class ResolveLinkRequest;
class ResolveLinkRequestDefaultTypeInternal;
extern ResolveLinkRequestDefaultTypeInternal _ResolveLinkRequest_default_instance_;
class ResolveLinkResponse;
class ResolveLinkResponseDefaultTypeInternal;
extern ResolveLinkResponseDefaultTypeInternal _ResolveLinkResponse_default_instance_;
class TreeRequest;
class TreeRequestDefaultTypeInternal;
extern TreeRequestDefaultTypeInternal _TreeRequest_default_instance_;
class TreeResponse;
class TreeResponseDefaultTypeInternal;
extern TreeResponseDefaultTypeInternal _TreeResponse_default_instance_;
}  // namespace ipfs_lite
PROTOBUF_NAMESPACE_OPEN
template<> ::ipfs_lite::AddFileRequest* Arena::CreateMaybeMessage<::ipfs_lite::AddFileRequest>(Arena*);
template<> ::ipfs_lite::AddFileResponse* Arena::CreateMaybeMessage<::ipfs_lite::AddFileResponse>(Arena*);
template<> ::ipfs_lite::AddNodeRequest* Arena::CreateMaybeMessage<::ipfs_lite::AddNodeRequest>(Arena*);
template<> ::ipfs_lite::AddNodeResponse* Arena::CreateMaybeMessage<::ipfs_lite::AddNodeResponse>(Arena*);
template<> ::ipfs_lite::AddNodesRequest* Arena::CreateMaybeMessage<::ipfs_lite::AddNodesRequest>(Arena*);
template<> ::ipfs_lite::AddNodesResponse* Arena::CreateMaybeMessage<::ipfs_lite::AddNodesResponse>(Arena*);
template<> ::ipfs_lite::AddParams* Arena::CreateMaybeMessage<::ipfs_lite::AddParams>(Arena*);
template<> ::ipfs_lite::AllKeysRequest* Arena::CreateMaybeMessage<::ipfs_lite::AllKeysRequest>(Arena*);
template<> ::ipfs_lite::AllKeysResponse* Arena::CreateMaybeMessage<::ipfs_lite::AllKeysResponse>(Arena*);
template<> ::ipfs_lite::Block* Arena::CreateMaybeMessage<::ipfs_lite::Block>(Arena*);
template<> ::ipfs_lite::DeleteBlockRequest* Arena::CreateMaybeMessage<::ipfs_lite::DeleteBlockRequest>(Arena*);
template<> ::ipfs_lite::DeleteBlockResponse* Arena::CreateMaybeMessage<::ipfs_lite::DeleteBlockResponse>(Arena*);
template<> ::ipfs_lite::GetBlockRequest* Arena::CreateMaybeMessage<::ipfs_lite::GetBlockRequest>(Arena*);
template<> ::ipfs_lite::GetBlockResponse* Arena::CreateMaybeMessage<::ipfs_lite::GetBlockResponse>(Arena*);
template<> ::ipfs_lite::GetBlockSizeRequest* Arena::CreateMaybeMessage<::ipfs_lite::GetBlockSizeRequest>(Arena*);
template<> ::ipfs_lite::GetBlockSizeResponse* Arena::CreateMaybeMessage<::ipfs_lite::GetBlockSizeResponse>(Arena*);
template<> ::ipfs_lite::GetFileRequest* Arena::CreateMaybeMessage<::ipfs_lite::GetFileRequest>(Arena*);
template<> ::ipfs_lite::GetFileResponse* Arena::CreateMaybeMessage<::ipfs_lite::GetFileResponse>(Arena*);
template<> ::ipfs_lite::GetNodeRequest* Arena::CreateMaybeMessage<::ipfs_lite::GetNodeRequest>(Arena*);
template<> ::ipfs_lite::GetNodeResponse* Arena::CreateMaybeMessage<::ipfs_lite::GetNodeResponse>(Arena*);
template<> ::ipfs_lite::GetNodesRequest* Arena::CreateMaybeMessage<::ipfs_lite::GetNodesRequest>(Arena*);
template<> ::ipfs_lite::GetNodesResponse* Arena::CreateMaybeMessage<::ipfs_lite::GetNodesResponse>(Arena*);
template<> ::ipfs_lite::HasBlockRequest* Arena::CreateMaybeMessage<::ipfs_lite::HasBlockRequest>(Arena*);
template<> ::ipfs_lite::HasBlockResponse* Arena::CreateMaybeMessage<::ipfs_lite::HasBlockResponse>(Arena*);
template<> ::ipfs_lite::HashOnReadRequest* Arena::CreateMaybeMessage<::ipfs_lite::HashOnReadRequest>(Arena*);
template<> ::ipfs_lite::HashOnReadResponse* Arena::CreateMaybeMessage<::ipfs_lite::HashOnReadResponse>(Arena*);
template<> ::ipfs_lite::Link* Arena::CreateMaybeMessage<::ipfs_lite::Link>(Arena*);
template<> ::ipfs_lite::Node* Arena::CreateMaybeMessage<::ipfs_lite::Node>(Arena*);
template<> ::ipfs_lite::NodeStat* Arena::CreateMaybeMessage<::ipfs_lite::NodeStat>(Arena*);
template<> ::ipfs_lite::PutBlockRequest* Arena::CreateMaybeMessage<::ipfs_lite::PutBlockRequest>(Arena*);
template<> ::ipfs_lite::PutBlockResponse* Arena::CreateMaybeMessage<::ipfs_lite::PutBlockResponse>(Arena*);
template<> ::ipfs_lite::PutBlocksRequest* Arena::CreateMaybeMessage<::ipfs_lite::PutBlocksRequest>(Arena*);
template<> ::ipfs_lite::PutBlocksResponse* Arena::CreateMaybeMessage<::ipfs_lite::PutBlocksResponse>(Arena*);
template<> ::ipfs_lite::RemoveNodeRequest* Arena::CreateMaybeMessage<::ipfs_lite::RemoveNodeRequest>(Arena*);
template<> ::ipfs_lite::RemoveNodeResponse* Arena::CreateMaybeMessage<::ipfs_lite::RemoveNodeResponse>(Arena*);
template<> ::ipfs_lite::RemoveNodesRequest* Arena::CreateMaybeMessage<::ipfs_lite::RemoveNodesRequest>(Arena*);
template<> ::ipfs_lite::RemoveNodesResponse* Arena::CreateMaybeMessage<::ipfs_lite::RemoveNodesResponse>(Arena*);
template<> ::ipfs_lite::ResolveLinkRequest* Arena::CreateMaybeMessage<::ipfs_lite::ResolveLinkRequest>(Arena*);
template<> ::ipfs_lite::ResolveLinkResponse* Arena::CreateMaybeMessage<::ipfs_lite::ResolveLinkResponse>(Arena*);
template<> ::ipfs_lite::TreeRequest* Arena::CreateMaybeMessage<::ipfs_lite::TreeRequest>(Arena*);
template<> ::ipfs_lite::TreeResponse* Arena::CreateMaybeMessage<::ipfs_lite::TreeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ipfs_lite {

// ===================================================================

class AddParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AddParams) */ {
 public:
  AddParams();
  virtual ~AddParams();

  AddParams(const AddParams& from);
  AddParams(AddParams&& from) noexcept
    : AddParams() {
    *this = ::std::move(from);
  }

  inline AddParams& operator=(const AddParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddParams& operator=(AddParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddParams* internal_default_instance() {
    return reinterpret_cast<const AddParams*>(
               &_AddParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddParams& a, AddParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AddParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddParams* New() const final {
    return CreateMaybeMessage<AddParams>(nullptr);
  }

  AddParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddParams& from);
  void MergeFrom(const AddParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AddParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutFieldNumber = 1,
    kChunkerFieldNumber = 2,
    kHashFunFieldNumber = 7,
    kRawLeavesFieldNumber = 3,
    kHiddenFieldNumber = 4,
    kSharedFieldNumber = 5,
    kNoCopyFieldNumber = 6,
  };
  // string layout = 1;
  void clear_layout();
  const std::string& layout() const;
  void set_layout(const std::string& value);
  void set_layout(std::string&& value);
  void set_layout(const char* value);
  void set_layout(const char* value, size_t size);
  std::string* mutable_layout();
  std::string* release_layout();
  void set_allocated_layout(std::string* layout);
  private:
  const std::string& _internal_layout() const;
  void _internal_set_layout(const std::string& value);
  std::string* _internal_mutable_layout();
  public:

  // string chunker = 2;
  void clear_chunker();
  const std::string& chunker() const;
  void set_chunker(const std::string& value);
  void set_chunker(std::string&& value);
  void set_chunker(const char* value);
  void set_chunker(const char* value, size_t size);
  std::string* mutable_chunker();
  std::string* release_chunker();
  void set_allocated_chunker(std::string* chunker);
  private:
  const std::string& _internal_chunker() const;
  void _internal_set_chunker(const std::string& value);
  std::string* _internal_mutable_chunker();
  public:

  // string hashFun = 7;
  void clear_hashfun();
  const std::string& hashfun() const;
  void set_hashfun(const std::string& value);
  void set_hashfun(std::string&& value);
  void set_hashfun(const char* value);
  void set_hashfun(const char* value, size_t size);
  std::string* mutable_hashfun();
  std::string* release_hashfun();
  void set_allocated_hashfun(std::string* hashfun);
  private:
  const std::string& _internal_hashfun() const;
  void _internal_set_hashfun(const std::string& value);
  std::string* _internal_mutable_hashfun();
  public:

  // bool rawLeaves = 3;
  void clear_rawleaves();
  bool rawleaves() const;
  void set_rawleaves(bool value);
  private:
  bool _internal_rawleaves() const;
  void _internal_set_rawleaves(bool value);
  public:

  // bool hidden = 4;
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // bool shared = 5;
  void clear_shared();
  bool shared() const;
  void set_shared(bool value);
  private:
  bool _internal_shared() const;
  void _internal_set_shared(bool value);
  public:

  // bool noCopy = 6;
  void clear_nocopy();
  bool nocopy() const;
  void set_nocopy(bool value);
  private:
  bool _internal_nocopy() const;
  void _internal_set_nocopy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.AddParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashfun_;
  bool rawleaves_;
  bool hidden_;
  bool shared_;
  bool nocopy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class Block :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.Block";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawDataFieldNumber = 1,
    kCidFieldNumber = 2,
  };
  // bytes rawData = 1;
  void clear_rawdata();
  const std::string& rawdata() const;
  void set_rawdata(const std::string& value);
  void set_rawdata(std::string&& value);
  void set_rawdata(const char* value);
  void set_rawdata(const void* value, size_t size);
  std::string* mutable_rawdata();
  std::string* release_rawdata();
  void set_allocated_rawdata(std::string* rawdata);
  private:
  const std::string& _internal_rawdata() const;
  void _internal_set_rawdata(const std::string& value);
  std::string* _internal_mutable_rawdata();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.Block)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class Link :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Link& operator=(Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Link* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const final {
    return CreateMaybeMessage<Link>(nullptr);
  }

  Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.Link";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCidFieldNumber = 3,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cid = 3;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // int64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.Link)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class NodeStat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.NodeStat) */ {
 public:
  NodeStat();
  virtual ~NodeStat();

  NodeStat(const NodeStat& from);
  NodeStat(NodeStat&& from) noexcept
    : NodeStat() {
    *this = ::std::move(from);
  }

  inline NodeStat& operator=(const NodeStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStat& operator=(NodeStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeStat* internal_default_instance() {
    return reinterpret_cast<const NodeStat*>(
               &_NodeStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NodeStat& a, NodeStat& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeStat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeStat* New() const final {
    return CreateMaybeMessage<NodeStat>(nullptr);
  }

  NodeStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeStat& from);
  void MergeFrom(const NodeStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.NodeStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kNumLinksFieldNumber = 2,
    kBlockSizeFieldNumber = 3,
    kLinksSizeFieldNumber = 4,
    kDataSizeFieldNumber = 5,
    kCumulativeSizeFieldNumber = 6,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 numLinks = 2;
  void clear_numlinks();
  ::PROTOBUF_NAMESPACE_ID::int32 numlinks() const;
  void set_numlinks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numlinks() const;
  void _internal_set_numlinks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 blockSize = 3;
  void clear_blocksize();
  ::PROTOBUF_NAMESPACE_ID::int32 blocksize() const;
  void set_blocksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocksize() const;
  void _internal_set_blocksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 linksSize = 4;
  void clear_linkssize();
  ::PROTOBUF_NAMESPACE_ID::int32 linkssize() const;
  void set_linkssize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_linkssize() const;
  void _internal_set_linkssize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dataSize = 5;
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::int32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cumulativeSize = 6;
  void clear_cumulativesize();
  ::PROTOBUF_NAMESPACE_ID::int32 cumulativesize() const;
  void set_cumulativesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cumulativesize() const;
  void _internal_set_cumulativesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.NodeStat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 numlinks_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocksize_;
  ::PROTOBUF_NAMESPACE_ID::int32 linkssize_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::int32 cumulativesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 2,
    kBlockFieldNumber = 1,
    kStatFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // repeated .ipfs_lite.Link links = 2;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::ipfs_lite::Link* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Link >*
      mutable_links();
  private:
  const ::ipfs_lite::Link& _internal_links(int index) const;
  ::ipfs_lite::Link* _internal_add_links();
  public:
  const ::ipfs_lite::Link& links(int index) const;
  ::ipfs_lite::Link* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Link >&
      links() const;

  // .ipfs_lite.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::ipfs_lite::Block& block() const;
  ::ipfs_lite::Block* release_block();
  ::ipfs_lite::Block* mutable_block();
  void set_allocated_block(::ipfs_lite::Block* block);
  private:
  const ::ipfs_lite::Block& _internal_block() const;
  ::ipfs_lite::Block* _internal_mutable_block();
  public:

  // .ipfs_lite.NodeStat stat = 3;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::ipfs_lite::NodeStat& stat() const;
  ::ipfs_lite::NodeStat* release_stat();
  ::ipfs_lite::NodeStat* mutable_stat();
  void set_allocated_stat(::ipfs_lite::NodeStat* stat);
  private:
  const ::ipfs_lite::NodeStat& _internal_stat() const;
  ::ipfs_lite::NodeStat* _internal_mutable_stat();
  public:

  // int64 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Link > links_;
  ::ipfs_lite::Block* block_;
  ::ipfs_lite::NodeStat* stat_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class AddFileRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AddFileRequest) */ {
 public:
  AddFileRequest();
  virtual ~AddFileRequest();

  AddFileRequest(const AddFileRequest& from);
  AddFileRequest(AddFileRequest&& from) noexcept
    : AddFileRequest() {
    *this = ::std::move(from);
  }

  inline AddFileRequest& operator=(const AddFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFileRequest& operator=(AddFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFileRequest& default_instance();

  enum PayloadCase {
    kAddParams = 1,
    kChunk = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFileRequest* internal_default_instance() {
    return reinterpret_cast<const AddFileRequest*>(
               &_AddFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddFileRequest& a, AddFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFileRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFileRequest* New() const final {
    return CreateMaybeMessage<AddFileRequest>(nullptr);
  }

  AddFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFileRequest& from);
  void MergeFrom(const AddFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AddFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddParamsFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // .ipfs_lite.AddParams addParams = 1;
  bool has_addparams() const;
  private:
  bool _internal_has_addparams() const;
  public:
  void clear_addparams();
  const ::ipfs_lite::AddParams& addparams() const;
  ::ipfs_lite::AddParams* release_addparams();
  ::ipfs_lite::AddParams* mutable_addparams();
  void set_allocated_addparams(::ipfs_lite::AddParams* addparams);
  private:
  const ::ipfs_lite::AddParams& _internal_addparams() const;
  ::ipfs_lite::AddParams* _internal_mutable_addparams();
  public:

  // bytes chunk = 2;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const std::string& chunk() const;
  void set_chunk(const std::string& value);
  void set_chunk(std::string&& value);
  void set_chunk(const char* value);
  void set_chunk(const void* value, size_t size);
  std::string* mutable_chunk();
  std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:ipfs_lite.AddFileRequest)
 private:
  class _Internal;
  void set_has_addparams();
  void set_has_chunk();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::ipfs_lite::AddParams* addparams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class AddFileResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AddFileResponse) */ {
 public:
  AddFileResponse();
  virtual ~AddFileResponse();

  AddFileResponse(const AddFileResponse& from);
  AddFileResponse(AddFileResponse&& from) noexcept
    : AddFileResponse() {
    *this = ::std::move(from);
  }

  inline AddFileResponse& operator=(const AddFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFileResponse& operator=(AddFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFileResponse* internal_default_instance() {
    return reinterpret_cast<const AddFileResponse*>(
               &_AddFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddFileResponse& a, AddFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFileResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFileResponse* New() const final {
    return CreateMaybeMessage<AddFileResponse>(nullptr);
  }

  AddFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFileResponse& from);
  void MergeFrom(const AddFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AddFileResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .ipfs_lite.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::ipfs_lite::Node& node() const;
  ::ipfs_lite::Node* release_node();
  ::ipfs_lite::Node* mutable_node();
  void set_allocated_node(::ipfs_lite::Node* node);
  private:
  const ::ipfs_lite::Node& _internal_node() const;
  ::ipfs_lite::Node* _internal_mutable_node();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.AddFileResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ipfs_lite::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetFileRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetFileRequest) */ {
 public:
  GetFileRequest();
  virtual ~GetFileRequest();

  GetFileRequest(const GetFileRequest& from);
  GetFileRequest(GetFileRequest&& from) noexcept
    : GetFileRequest() {
    *this = ::std::move(from);
  }

  inline GetFileRequest& operator=(const GetFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileRequest& operator=(GetFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileRequest*>(
               &_GetFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetFileRequest& a, GetFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileRequest* New() const final {
    return CreateMaybeMessage<GetFileRequest>(nullptr);
  }

  GetFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileRequest& from);
  void MergeFrom(const GetFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetFileRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetFileResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetFileResponse) */ {
 public:
  GetFileResponse();
  virtual ~GetFileResponse();

  GetFileResponse(const GetFileResponse& from);
  GetFileResponse(GetFileResponse&& from) noexcept
    : GetFileResponse() {
    *this = ::std::move(from);
  }

  inline GetFileResponse& operator=(const GetFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileResponse& operator=(GetFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileResponse*>(
               &_GetFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetFileResponse& a, GetFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileResponse* New() const final {
    return CreateMaybeMessage<GetFileResponse>(nullptr);
  }

  GetFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileResponse& from);
  void MergeFrom(const GetFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetFileResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 1,
  };
  // bytes chunk = 1;
  void clear_chunk();
  const std::string& chunk() const;
  void set_chunk(const std::string& value);
  void set_chunk(std::string&& value);
  void set_chunk(const char* value);
  void set_chunk(const void* value, size_t size);
  std::string* mutable_chunk();
  std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetFileResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class AddNodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AddNodeRequest) */ {
 public:
  AddNodeRequest();
  virtual ~AddNodeRequest();

  AddNodeRequest(const AddNodeRequest& from);
  AddNodeRequest(AddNodeRequest&& from) noexcept
    : AddNodeRequest() {
    *this = ::std::move(from);
  }

  inline AddNodeRequest& operator=(const AddNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNodeRequest& operator=(AddNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodeRequest* internal_default_instance() {
    return reinterpret_cast<const AddNodeRequest*>(
               &_AddNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddNodeRequest& a, AddNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNodeRequest* New() const final {
    return CreateMaybeMessage<AddNodeRequest>(nullptr);
  }

  AddNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNodeRequest& from);
  void MergeFrom(const AddNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AddNodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // .ipfs_lite.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::ipfs_lite::Block& block() const;
  ::ipfs_lite::Block* release_block();
  ::ipfs_lite::Block* mutable_block();
  void set_allocated_block(::ipfs_lite::Block* block);
  private:
  const ::ipfs_lite::Block& _internal_block() const;
  ::ipfs_lite::Block* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.AddNodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ipfs_lite::Block* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class AddNodeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AddNodeResponse) */ {
 public:
  AddNodeResponse();
  virtual ~AddNodeResponse();

  AddNodeResponse(const AddNodeResponse& from);
  AddNodeResponse(AddNodeResponse&& from) noexcept
    : AddNodeResponse() {
    *this = ::std::move(from);
  }

  inline AddNodeResponse& operator=(const AddNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNodeResponse& operator=(AddNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodeResponse* internal_default_instance() {
    return reinterpret_cast<const AddNodeResponse*>(
               &_AddNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddNodeResponse& a, AddNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNodeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNodeResponse* New() const final {
    return CreateMaybeMessage<AddNodeResponse>(nullptr);
  }

  AddNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNodeResponse& from);
  void MergeFrom(const AddNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AddNodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.AddNodeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class AddNodesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AddNodesRequest) */ {
 public:
  AddNodesRequest();
  virtual ~AddNodesRequest();

  AddNodesRequest(const AddNodesRequest& from);
  AddNodesRequest(AddNodesRequest&& from) noexcept
    : AddNodesRequest() {
    *this = ::std::move(from);
  }

  inline AddNodesRequest& operator=(const AddNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNodesRequest& operator=(AddNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodesRequest* internal_default_instance() {
    return reinterpret_cast<const AddNodesRequest*>(
               &_AddNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddNodesRequest& a, AddNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNodesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNodesRequest* New() const final {
    return CreateMaybeMessage<AddNodesRequest>(nullptr);
  }

  AddNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNodesRequest& from);
  void MergeFrom(const AddNodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AddNodesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .ipfs_lite.Block blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::ipfs_lite::Block* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block >*
      mutable_blocks();
  private:
  const ::ipfs_lite::Block& _internal_blocks(int index) const;
  ::ipfs_lite::Block* _internal_add_blocks();
  public:
  const ::ipfs_lite::Block& blocks(int index) const;
  ::ipfs_lite::Block* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:ipfs_lite.AddNodesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block > blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class AddNodesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AddNodesResponse) */ {
 public:
  AddNodesResponse();
  virtual ~AddNodesResponse();

  AddNodesResponse(const AddNodesResponse& from);
  AddNodesResponse(AddNodesResponse&& from) noexcept
    : AddNodesResponse() {
    *this = ::std::move(from);
  }

  inline AddNodesResponse& operator=(const AddNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNodesResponse& operator=(AddNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodesResponse* internal_default_instance() {
    return reinterpret_cast<const AddNodesResponse*>(
               &_AddNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AddNodesResponse& a, AddNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNodesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNodesResponse* New() const final {
    return CreateMaybeMessage<AddNodesResponse>(nullptr);
  }

  AddNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNodesResponse& from);
  void MergeFrom(const AddNodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AddNodesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.AddNodesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetNodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetNodeRequest) */ {
 public:
  GetNodeRequest();
  virtual ~GetNodeRequest();

  GetNodeRequest(const GetNodeRequest& from);
  GetNodeRequest(GetNodeRequest&& from) noexcept
    : GetNodeRequest() {
    *this = ::std::move(from);
  }

  inline GetNodeRequest& operator=(const GetNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeRequest& operator=(GetNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodeRequest*>(
               &_GetNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetNodeRequest& a, GetNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeRequest* New() const final {
    return CreateMaybeMessage<GetNodeRequest>(nullptr);
  }

  GetNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeRequest& from);
  void MergeFrom(const GetNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetNodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetNodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetNodeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetNodeResponse) */ {
 public:
  GetNodeResponse();
  virtual ~GetNodeResponse();

  GetNodeResponse(const GetNodeResponse& from);
  GetNodeResponse(GetNodeResponse&& from) noexcept
    : GetNodeResponse() {
    *this = ::std::move(from);
  }

  inline GetNodeResponse& operator=(const GetNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeResponse& operator=(GetNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeResponse* internal_default_instance() {
    return reinterpret_cast<const GetNodeResponse*>(
               &_GetNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetNodeResponse& a, GetNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeResponse* New() const final {
    return CreateMaybeMessage<GetNodeResponse>(nullptr);
  }

  GetNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeResponse& from);
  void MergeFrom(const GetNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetNodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .ipfs_lite.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::ipfs_lite::Node& node() const;
  ::ipfs_lite::Node* release_node();
  ::ipfs_lite::Node* mutable_node();
  void set_allocated_node(::ipfs_lite::Node* node);
  private:
  const ::ipfs_lite::Node& _internal_node() const;
  ::ipfs_lite::Node* _internal_mutable_node();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetNodeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ipfs_lite::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetNodesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetNodesRequest) */ {
 public:
  GetNodesRequest();
  virtual ~GetNodesRequest();

  GetNodesRequest(const GetNodesRequest& from);
  GetNodesRequest(GetNodesRequest&& from) noexcept
    : GetNodesRequest() {
    *this = ::std::move(from);
  }

  inline GetNodesRequest& operator=(const GetNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodesRequest& operator=(GetNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodesRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodesRequest*>(
               &_GetNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetNodesRequest& a, GetNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodesRequest* New() const final {
    return CreateMaybeMessage<GetNodesRequest>(nullptr);
  }

  GetNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodesRequest& from);
  void MergeFrom(const GetNodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetNodesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidsFieldNumber = 1,
  };
  // repeated string cids = 1;
  int cids_size() const;
  private:
  int _internal_cids_size() const;
  public:
  void clear_cids();
  const std::string& cids(int index) const;
  std::string* mutable_cids(int index);
  void set_cids(int index, const std::string& value);
  void set_cids(int index, std::string&& value);
  void set_cids(int index, const char* value);
  void set_cids(int index, const char* value, size_t size);
  std::string* add_cids();
  void add_cids(const std::string& value);
  void add_cids(std::string&& value);
  void add_cids(const char* value);
  void add_cids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cids();
  private:
  const std::string& _internal_cids(int index) const;
  std::string* _internal_add_cids();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetNodesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetNodesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetNodesResponse) */ {
 public:
  GetNodesResponse();
  virtual ~GetNodesResponse();

  GetNodesResponse(const GetNodesResponse& from);
  GetNodesResponse(GetNodesResponse&& from) noexcept
    : GetNodesResponse() {
    *this = ::std::move(from);
  }

  inline GetNodesResponse& operator=(const GetNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodesResponse& operator=(GetNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodesResponse& default_instance();

  enum OptionCase {
    kNode = 1,
    kError = 2,
    OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodesResponse* internal_default_instance() {
    return reinterpret_cast<const GetNodesResponse*>(
               &_GetNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetNodesResponse& a, GetNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodesResponse* New() const final {
    return CreateMaybeMessage<GetNodesResponse>(nullptr);
  }

  GetNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodesResponse& from);
  void MergeFrom(const GetNodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetNodesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .ipfs_lite.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::ipfs_lite::Node& node() const;
  ::ipfs_lite::Node* release_node();
  ::ipfs_lite::Node* mutable_node();
  void set_allocated_node(::ipfs_lite::Node* node);
  private:
  const ::ipfs_lite::Node& _internal_node() const;
  ::ipfs_lite::Node* _internal_mutable_node();
  public:

  // string error = 2;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  void clear_option();
  OptionCase option_case() const;
  // @@protoc_insertion_point(class_scope:ipfs_lite.GetNodesResponse)
 private:
  class _Internal;
  void set_has_node();
  void set_has_error();

  inline bool has_option() const;
  inline void clear_has_option();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union OptionUnion {
    OptionUnion() {}
    ::ipfs_lite::Node* node_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  } option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class RemoveNodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.RemoveNodeRequest) */ {
 public:
  RemoveNodeRequest();
  virtual ~RemoveNodeRequest();

  RemoveNodeRequest(const RemoveNodeRequest& from);
  RemoveNodeRequest(RemoveNodeRequest&& from) noexcept
    : RemoveNodeRequest() {
    *this = ::std::move(from);
  }

  inline RemoveNodeRequest& operator=(const RemoveNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveNodeRequest& operator=(RemoveNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveNodeRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveNodeRequest*>(
               &_RemoveNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RemoveNodeRequest& a, RemoveNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveNodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveNodeRequest* New() const final {
    return CreateMaybeMessage<RemoveNodeRequest>(nullptr);
  }

  RemoveNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveNodeRequest& from);
  void MergeFrom(const RemoveNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.RemoveNodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.RemoveNodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class RemoveNodeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.RemoveNodeResponse) */ {
 public:
  RemoveNodeResponse();
  virtual ~RemoveNodeResponse();

  RemoveNodeResponse(const RemoveNodeResponse& from);
  RemoveNodeResponse(RemoveNodeResponse&& from) noexcept
    : RemoveNodeResponse() {
    *this = ::std::move(from);
  }

  inline RemoveNodeResponse& operator=(const RemoveNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveNodeResponse& operator=(RemoveNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveNodeResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveNodeResponse*>(
               &_RemoveNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RemoveNodeResponse& a, RemoveNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveNodeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveNodeResponse* New() const final {
    return CreateMaybeMessage<RemoveNodeResponse>(nullptr);
  }

  RemoveNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveNodeResponse& from);
  void MergeFrom(const RemoveNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.RemoveNodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.RemoveNodeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class RemoveNodesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.RemoveNodesRequest) */ {
 public:
  RemoveNodesRequest();
  virtual ~RemoveNodesRequest();

  RemoveNodesRequest(const RemoveNodesRequest& from);
  RemoveNodesRequest(RemoveNodesRequest&& from) noexcept
    : RemoveNodesRequest() {
    *this = ::std::move(from);
  }

  inline RemoveNodesRequest& operator=(const RemoveNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveNodesRequest& operator=(RemoveNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveNodesRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveNodesRequest*>(
               &_RemoveNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RemoveNodesRequest& a, RemoveNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveNodesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveNodesRequest* New() const final {
    return CreateMaybeMessage<RemoveNodesRequest>(nullptr);
  }

  RemoveNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveNodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveNodesRequest& from);
  void MergeFrom(const RemoveNodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.RemoveNodesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidsFieldNumber = 1,
  };
  // repeated string cids = 1;
  int cids_size() const;
  private:
  int _internal_cids_size() const;
  public:
  void clear_cids();
  const std::string& cids(int index) const;
  std::string* mutable_cids(int index);
  void set_cids(int index, const std::string& value);
  void set_cids(int index, std::string&& value);
  void set_cids(int index, const char* value);
  void set_cids(int index, const char* value, size_t size);
  std::string* add_cids();
  void add_cids(const std::string& value);
  void add_cids(std::string&& value);
  void add_cids(const char* value);
  void add_cids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cids();
  private:
  const std::string& _internal_cids(int index) const;
  std::string* _internal_add_cids();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.RemoveNodesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class RemoveNodesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.RemoveNodesResponse) */ {
 public:
  RemoveNodesResponse();
  virtual ~RemoveNodesResponse();

  RemoveNodesResponse(const RemoveNodesResponse& from);
  RemoveNodesResponse(RemoveNodesResponse&& from) noexcept
    : RemoveNodesResponse() {
    *this = ::std::move(from);
  }

  inline RemoveNodesResponse& operator=(const RemoveNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveNodesResponse& operator=(RemoveNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveNodesResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveNodesResponse*>(
               &_RemoveNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RemoveNodesResponse& a, RemoveNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveNodesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveNodesResponse* New() const final {
    return CreateMaybeMessage<RemoveNodesResponse>(nullptr);
  }

  RemoveNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveNodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveNodesResponse& from);
  void MergeFrom(const RemoveNodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.RemoveNodesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.RemoveNodesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class ResolveLinkRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.ResolveLinkRequest) */ {
 public:
  ResolveLinkRequest();
  virtual ~ResolveLinkRequest();

  ResolveLinkRequest(const ResolveLinkRequest& from);
  ResolveLinkRequest(ResolveLinkRequest&& from) noexcept
    : ResolveLinkRequest() {
    *this = ::std::move(from);
  }

  inline ResolveLinkRequest& operator=(const ResolveLinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveLinkRequest& operator=(ResolveLinkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveLinkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveLinkRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveLinkRequest*>(
               &_ResolveLinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ResolveLinkRequest& a, ResolveLinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveLinkRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveLinkRequest* New() const final {
    return CreateMaybeMessage<ResolveLinkRequest>(nullptr);
  }

  ResolveLinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveLinkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveLinkRequest& from);
  void MergeFrom(const ResolveLinkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveLinkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.ResolveLinkRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kNodeCidFieldNumber = 1,
  };
  // repeated string path = 2;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  const std::string& path(int index) const;
  std::string* mutable_path(int index);
  void set_path(int index, const std::string& value);
  void set_path(int index, std::string&& value);
  void set_path(int index, const char* value);
  void set_path(int index, const char* value, size_t size);
  std::string* add_path();
  void add_path(const std::string& value);
  void add_path(std::string&& value);
  void add_path(const char* value);
  void add_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_path();
  private:
  const std::string& _internal_path(int index) const;
  std::string* _internal_add_path();
  public:

  // string nodeCid = 1;
  void clear_nodecid();
  const std::string& nodecid() const;
  void set_nodecid(const std::string& value);
  void set_nodecid(std::string&& value);
  void set_nodecid(const char* value);
  void set_nodecid(const char* value, size_t size);
  std::string* mutable_nodecid();
  std::string* release_nodecid();
  void set_allocated_nodecid(std::string* nodecid);
  private:
  const std::string& _internal_nodecid() const;
  void _internal_set_nodecid(const std::string& value);
  std::string* _internal_mutable_nodecid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.ResolveLinkRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodecid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class ResolveLinkResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.ResolveLinkResponse) */ {
 public:
  ResolveLinkResponse();
  virtual ~ResolveLinkResponse();

  ResolveLinkResponse(const ResolveLinkResponse& from);
  ResolveLinkResponse(ResolveLinkResponse&& from) noexcept
    : ResolveLinkResponse() {
    *this = ::std::move(from);
  }

  inline ResolveLinkResponse& operator=(const ResolveLinkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveLinkResponse& operator=(ResolveLinkResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveLinkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveLinkResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveLinkResponse*>(
               &_ResolveLinkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ResolveLinkResponse& a, ResolveLinkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveLinkResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveLinkResponse* New() const final {
    return CreateMaybeMessage<ResolveLinkResponse>(nullptr);
  }

  ResolveLinkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveLinkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveLinkResponse& from);
  void MergeFrom(const ResolveLinkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveLinkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.ResolveLinkResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemainingPathFieldNumber = 2,
    kLinkFieldNumber = 1,
  };
  // repeated string remainingPath = 2;
  int remainingpath_size() const;
  private:
  int _internal_remainingpath_size() const;
  public:
  void clear_remainingpath();
  const std::string& remainingpath(int index) const;
  std::string* mutable_remainingpath(int index);
  void set_remainingpath(int index, const std::string& value);
  void set_remainingpath(int index, std::string&& value);
  void set_remainingpath(int index, const char* value);
  void set_remainingpath(int index, const char* value, size_t size);
  std::string* add_remainingpath();
  void add_remainingpath(const std::string& value);
  void add_remainingpath(std::string&& value);
  void add_remainingpath(const char* value);
  void add_remainingpath(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& remainingpath() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_remainingpath();
  private:
  const std::string& _internal_remainingpath(int index) const;
  std::string* _internal_add_remainingpath();
  public:

  // .ipfs_lite.Link link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::ipfs_lite::Link& link() const;
  ::ipfs_lite::Link* release_link();
  ::ipfs_lite::Link* mutable_link();
  void set_allocated_link(::ipfs_lite::Link* link);
  private:
  const ::ipfs_lite::Link& _internal_link() const;
  ::ipfs_lite::Link* _internal_mutable_link();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.ResolveLinkResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> remainingpath_;
  ::ipfs_lite::Link* link_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class TreeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.TreeRequest) */ {
 public:
  TreeRequest();
  virtual ~TreeRequest();

  TreeRequest(const TreeRequest& from);
  TreeRequest(TreeRequest&& from) noexcept
    : TreeRequest() {
    *this = ::std::move(from);
  }

  inline TreeRequest& operator=(const TreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeRequest& operator=(TreeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TreeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeRequest* internal_default_instance() {
    return reinterpret_cast<const TreeRequest*>(
               &_TreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TreeRequest& a, TreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TreeRequest* New() const final {
    return CreateMaybeMessage<TreeRequest>(nullptr);
  }

  TreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TreeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TreeRequest& from);
  void MergeFrom(const TreeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.TreeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeCidFieldNumber = 1,
    kPathFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // string nodeCid = 1;
  void clear_nodecid();
  const std::string& nodecid() const;
  void set_nodecid(const std::string& value);
  void set_nodecid(std::string&& value);
  void set_nodecid(const char* value);
  void set_nodecid(const char* value, size_t size);
  std::string* mutable_nodecid();
  std::string* release_nodecid();
  void set_allocated_nodecid(std::string* nodecid);
  private:
  const std::string& _internal_nodecid() const;
  void _internal_set_nodecid(const std::string& value);
  std::string* _internal_mutable_nodecid();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 depth = 3;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.TreeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodecid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class TreeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.TreeResponse) */ {
 public:
  TreeResponse();
  virtual ~TreeResponse();

  TreeResponse(const TreeResponse& from);
  TreeResponse(TreeResponse&& from) noexcept
    : TreeResponse() {
    *this = ::std::move(from);
  }

  inline TreeResponse& operator=(const TreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeResponse& operator=(TreeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TreeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeResponse* internal_default_instance() {
    return reinterpret_cast<const TreeResponse*>(
               &_TreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TreeResponse& a, TreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TreeResponse* New() const final {
    return CreateMaybeMessage<TreeResponse>(nullptr);
  }

  TreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TreeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TreeResponse& from);
  void MergeFrom(const TreeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.TreeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 1,
  };
  // repeated string paths = 1;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  const std::string& paths(int index) const;
  std::string* mutable_paths(int index);
  void set_paths(int index, const std::string& value);
  void set_paths(int index, std::string&& value);
  void set_paths(int index, const char* value);
  void set_paths(int index, const char* value, size_t size);
  std::string* add_paths();
  void add_paths(const std::string& value);
  void add_paths(std::string&& value);
  void add_paths(const char* value);
  void add_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_paths();
  private:
  const std::string& _internal_paths(int index) const;
  std::string* _internal_add_paths();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.TreeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class DeleteBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.DeleteBlockRequest) */ {
 public:
  DeleteBlockRequest();
  virtual ~DeleteBlockRequest();

  DeleteBlockRequest(const DeleteBlockRequest& from);
  DeleteBlockRequest(DeleteBlockRequest&& from) noexcept
    : DeleteBlockRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBlockRequest& operator=(const DeleteBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBlockRequest& operator=(DeleteBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBlockRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBlockRequest*>(
               &_DeleteBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeleteBlockRequest& a, DeleteBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBlockRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBlockRequest* New() const final {
    return CreateMaybeMessage<DeleteBlockRequest>(nullptr);
  }

  DeleteBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBlockRequest& from);
  void MergeFrom(const DeleteBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.DeleteBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.DeleteBlockRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class DeleteBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.DeleteBlockResponse) */ {
 public:
  DeleteBlockResponse();
  virtual ~DeleteBlockResponse();

  DeleteBlockResponse(const DeleteBlockResponse& from);
  DeleteBlockResponse(DeleteBlockResponse&& from) noexcept
    : DeleteBlockResponse() {
    *this = ::std::move(from);
  }

  inline DeleteBlockResponse& operator=(const DeleteBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBlockResponse& operator=(DeleteBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBlockResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteBlockResponse*>(
               &_DeleteBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeleteBlockResponse& a, DeleteBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBlockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBlockResponse* New() const final {
    return CreateMaybeMessage<DeleteBlockResponse>(nullptr);
  }

  DeleteBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBlockResponse& from);
  void MergeFrom(const DeleteBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.DeleteBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.DeleteBlockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class HasBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.HasBlockRequest) */ {
 public:
  HasBlockRequest();
  virtual ~HasBlockRequest();

  HasBlockRequest(const HasBlockRequest& from);
  HasBlockRequest(HasBlockRequest&& from) noexcept
    : HasBlockRequest() {
    *this = ::std::move(from);
  }

  inline HasBlockRequest& operator=(const HasBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasBlockRequest& operator=(HasBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HasBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HasBlockRequest* internal_default_instance() {
    return reinterpret_cast<const HasBlockRequest*>(
               &_HasBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(HasBlockRequest& a, HasBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasBlockRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HasBlockRequest* New() const final {
    return CreateMaybeMessage<HasBlockRequest>(nullptr);
  }

  HasBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HasBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HasBlockRequest& from);
  void MergeFrom(const HasBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.HasBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.HasBlockRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class HasBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.HasBlockResponse) */ {
 public:
  HasBlockResponse();
  virtual ~HasBlockResponse();

  HasBlockResponse(const HasBlockResponse& from);
  HasBlockResponse(HasBlockResponse&& from) noexcept
    : HasBlockResponse() {
    *this = ::std::move(from);
  }

  inline HasBlockResponse& operator=(const HasBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasBlockResponse& operator=(HasBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HasBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HasBlockResponse* internal_default_instance() {
    return reinterpret_cast<const HasBlockResponse*>(
               &_HasBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(HasBlockResponse& a, HasBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HasBlockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HasBlockResponse* New() const final {
    return CreateMaybeMessage<HasBlockResponse>(nullptr);
  }

  HasBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HasBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HasBlockResponse& from);
  void MergeFrom(const HasBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.HasBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasBlockFieldNumber = 1,
  };
  // bool hasBlock = 1;
  void clear_hasblock();
  bool hasblock() const;
  void set_hasblock(bool value);
  private:
  bool _internal_hasblock() const;
  void _internal_set_hasblock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.HasBlockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool hasblock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetBlockRequest) */ {
 public:
  GetBlockRequest();
  virtual ~GetBlockRequest();

  GetBlockRequest(const GetBlockRequest& from);
  GetBlockRequest(GetBlockRequest&& from) noexcept
    : GetBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockRequest& operator=(const GetBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockRequest& operator=(GetBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockRequest*>(
               &_GetBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetBlockRequest& a, GetBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockRequest* New() const final {
    return CreateMaybeMessage<GetBlockRequest>(nullptr);
  }

  GetBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockRequest& from);
  void MergeFrom(const GetBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetBlockRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetBlockResponse) */ {
 public:
  GetBlockResponse();
  virtual ~GetBlockResponse();

  GetBlockResponse(const GetBlockResponse& from);
  GetBlockResponse(GetBlockResponse&& from) noexcept
    : GetBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockResponse& operator=(const GetBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockResponse& operator=(GetBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockResponse*>(
               &_GetBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetBlockResponse& a, GetBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockResponse* New() const final {
    return CreateMaybeMessage<GetBlockResponse>(nullptr);
  }

  GetBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockResponse& from);
  void MergeFrom(const GetBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // .ipfs_lite.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::ipfs_lite::Block& block() const;
  ::ipfs_lite::Block* release_block();
  ::ipfs_lite::Block* mutable_block();
  void set_allocated_block(::ipfs_lite::Block* block);
  private:
  const ::ipfs_lite::Block& _internal_block() const;
  ::ipfs_lite::Block* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetBlockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ipfs_lite::Block* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetBlockSizeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetBlockSizeRequest) */ {
 public:
  GetBlockSizeRequest();
  virtual ~GetBlockSizeRequest();

  GetBlockSizeRequest(const GetBlockSizeRequest& from);
  GetBlockSizeRequest(GetBlockSizeRequest&& from) noexcept
    : GetBlockSizeRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockSizeRequest& operator=(const GetBlockSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockSizeRequest& operator=(GetBlockSizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockSizeRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockSizeRequest*>(
               &_GetBlockSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetBlockSizeRequest& a, GetBlockSizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockSizeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockSizeRequest* New() const final {
    return CreateMaybeMessage<GetBlockSizeRequest>(nullptr);
  }

  GetBlockSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockSizeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockSizeRequest& from);
  void MergeFrom(const GetBlockSizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockSizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetBlockSizeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetBlockSizeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class GetBlockSizeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.GetBlockSizeResponse) */ {
 public:
  GetBlockSizeResponse();
  virtual ~GetBlockSizeResponse();

  GetBlockSizeResponse(const GetBlockSizeResponse& from);
  GetBlockSizeResponse(GetBlockSizeResponse&& from) noexcept
    : GetBlockSizeResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockSizeResponse& operator=(const GetBlockSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockSizeResponse& operator=(GetBlockSizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockSizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockSizeResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockSizeResponse*>(
               &_GetBlockSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetBlockSizeResponse& a, GetBlockSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockSizeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockSizeResponse* New() const final {
    return CreateMaybeMessage<GetBlockSizeResponse>(nullptr);
  }

  GetBlockSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockSizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockSizeResponse& from);
  void MergeFrom(const GetBlockSizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockSizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.GetBlockSizeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // int32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.GetBlockSizeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class PutBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.PutBlockRequest) */ {
 public:
  PutBlockRequest();
  virtual ~PutBlockRequest();

  PutBlockRequest(const PutBlockRequest& from);
  PutBlockRequest(PutBlockRequest&& from) noexcept
    : PutBlockRequest() {
    *this = ::std::move(from);
  }

  inline PutBlockRequest& operator=(const PutBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutBlockRequest& operator=(PutBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutBlockRequest* internal_default_instance() {
    return reinterpret_cast<const PutBlockRequest*>(
               &_PutBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PutBlockRequest& a, PutBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutBlockRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutBlockRequest* New() const final {
    return CreateMaybeMessage<PutBlockRequest>(nullptr);
  }

  PutBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutBlockRequest& from);
  void MergeFrom(const PutBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.PutBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // .ipfs_lite.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::ipfs_lite::Block& block() const;
  ::ipfs_lite::Block* release_block();
  ::ipfs_lite::Block* mutable_block();
  void set_allocated_block(::ipfs_lite::Block* block);
  private:
  const ::ipfs_lite::Block& _internal_block() const;
  ::ipfs_lite::Block* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.PutBlockRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ipfs_lite::Block* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class PutBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.PutBlockResponse) */ {
 public:
  PutBlockResponse();
  virtual ~PutBlockResponse();

  PutBlockResponse(const PutBlockResponse& from);
  PutBlockResponse(PutBlockResponse&& from) noexcept
    : PutBlockResponse() {
    *this = ::std::move(from);
  }

  inline PutBlockResponse& operator=(const PutBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutBlockResponse& operator=(PutBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutBlockResponse* internal_default_instance() {
    return reinterpret_cast<const PutBlockResponse*>(
               &_PutBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PutBlockResponse& a, PutBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutBlockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutBlockResponse* New() const final {
    return CreateMaybeMessage<PutBlockResponse>(nullptr);
  }

  PutBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutBlockResponse& from);
  void MergeFrom(const PutBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.PutBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.PutBlockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class PutBlocksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.PutBlocksRequest) */ {
 public:
  PutBlocksRequest();
  virtual ~PutBlocksRequest();

  PutBlocksRequest(const PutBlocksRequest& from);
  PutBlocksRequest(PutBlocksRequest&& from) noexcept
    : PutBlocksRequest() {
    *this = ::std::move(from);
  }

  inline PutBlocksRequest& operator=(const PutBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutBlocksRequest& operator=(PutBlocksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutBlocksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const PutBlocksRequest*>(
               &_PutBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PutBlocksRequest& a, PutBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutBlocksRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutBlocksRequest* New() const final {
    return CreateMaybeMessage<PutBlocksRequest>(nullptr);
  }

  PutBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutBlocksRequest& from);
  void MergeFrom(const PutBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.PutBlocksRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .ipfs_lite.Block blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::ipfs_lite::Block* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block >*
      mutable_blocks();
  private:
  const ::ipfs_lite::Block& _internal_blocks(int index) const;
  ::ipfs_lite::Block* _internal_add_blocks();
  public:
  const ::ipfs_lite::Block& blocks(int index) const;
  ::ipfs_lite::Block* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:ipfs_lite.PutBlocksRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block > blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class PutBlocksResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.PutBlocksResponse) */ {
 public:
  PutBlocksResponse();
  virtual ~PutBlocksResponse();

  PutBlocksResponse(const PutBlocksResponse& from);
  PutBlocksResponse(PutBlocksResponse&& from) noexcept
    : PutBlocksResponse() {
    *this = ::std::move(from);
  }

  inline PutBlocksResponse& operator=(const PutBlocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutBlocksResponse& operator=(PutBlocksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutBlocksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutBlocksResponse* internal_default_instance() {
    return reinterpret_cast<const PutBlocksResponse*>(
               &_PutBlocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PutBlocksResponse& a, PutBlocksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutBlocksResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutBlocksResponse* New() const final {
    return CreateMaybeMessage<PutBlocksResponse>(nullptr);
  }

  PutBlocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutBlocksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutBlocksResponse& from);
  void MergeFrom(const PutBlocksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutBlocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.PutBlocksResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.PutBlocksResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class AllKeysRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AllKeysRequest) */ {
 public:
  AllKeysRequest();
  virtual ~AllKeysRequest();

  AllKeysRequest(const AllKeysRequest& from);
  AllKeysRequest(AllKeysRequest&& from) noexcept
    : AllKeysRequest() {
    *this = ::std::move(from);
  }

  inline AllKeysRequest& operator=(const AllKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllKeysRequest& operator=(AllKeysRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllKeysRequest* internal_default_instance() {
    return reinterpret_cast<const AllKeysRequest*>(
               &_AllKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(AllKeysRequest& a, AllKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AllKeysRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllKeysRequest* New() const final {
    return CreateMaybeMessage<AllKeysRequest>(nullptr);
  }

  AllKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllKeysRequest& from);
  void MergeFrom(const AllKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AllKeysRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.AllKeysRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class AllKeysResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.AllKeysResponse) */ {
 public:
  AllKeysResponse();
  virtual ~AllKeysResponse();

  AllKeysResponse(const AllKeysResponse& from);
  AllKeysResponse(AllKeysResponse&& from) noexcept
    : AllKeysResponse() {
    *this = ::std::move(from);
  }

  inline AllKeysResponse& operator=(const AllKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllKeysResponse& operator=(AllKeysResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllKeysResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllKeysResponse* internal_default_instance() {
    return reinterpret_cast<const AllKeysResponse*>(
               &_AllKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AllKeysResponse& a, AllKeysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AllKeysResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllKeysResponse* New() const final {
    return CreateMaybeMessage<AllKeysResponse>(nullptr);
  }

  AllKeysResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllKeysResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllKeysResponse& from);
  void MergeFrom(const AllKeysResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllKeysResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.AllKeysResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.AllKeysResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class HashOnReadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.HashOnReadRequest) */ {
 public:
  HashOnReadRequest();
  virtual ~HashOnReadRequest();

  HashOnReadRequest(const HashOnReadRequest& from);
  HashOnReadRequest(HashOnReadRequest&& from) noexcept
    : HashOnReadRequest() {
    *this = ::std::move(from);
  }

  inline HashOnReadRequest& operator=(const HashOnReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashOnReadRequest& operator=(HashOnReadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashOnReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashOnReadRequest* internal_default_instance() {
    return reinterpret_cast<const HashOnReadRequest*>(
               &_HashOnReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(HashOnReadRequest& a, HashOnReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HashOnReadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashOnReadRequest* New() const final {
    return CreateMaybeMessage<HashOnReadRequest>(nullptr);
  }

  HashOnReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashOnReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashOnReadRequest& from);
  void MergeFrom(const HashOnReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashOnReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.HashOnReadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashOnReadFieldNumber = 1,
  };
  // bool hashOnRead = 1;
  void clear_hashonread();
  bool hashonread() const;
  void set_hashonread(bool value);
  private:
  bool _internal_hashonread() const;
  void _internal_set_hashonread(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs_lite.HashOnReadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool hashonread_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// -------------------------------------------------------------------

class HashOnReadResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ipfs_lite.HashOnReadResponse) */ {
 public:
  HashOnReadResponse();
  virtual ~HashOnReadResponse();

  HashOnReadResponse(const HashOnReadResponse& from);
  HashOnReadResponse(HashOnReadResponse&& from) noexcept
    : HashOnReadResponse() {
    *this = ::std::move(from);
  }

  inline HashOnReadResponse& operator=(const HashOnReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashOnReadResponse& operator=(HashOnReadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashOnReadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashOnReadResponse* internal_default_instance() {
    return reinterpret_cast<const HashOnReadResponse*>(
               &_HashOnReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(HashOnReadResponse& a, HashOnReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HashOnReadResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashOnReadResponse* New() const final {
    return CreateMaybeMessage<HashOnReadResponse>(nullptr);
  }

  HashOnReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashOnReadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashOnReadResponse& from);
  void MergeFrom(const HashOnReadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashOnReadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs_lite.HashOnReadResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipfs_5flite_2eproto);
    return ::descriptor_table_ipfs_5flite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipfs_lite.HashOnReadResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipfs_5flite_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddParams

// string layout = 1;
inline void AddParams::clear_layout() {
  layout_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddParams::layout() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddParams.layout)
  return _internal_layout();
}
inline void AddParams::set_layout(const std::string& value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AddParams.layout)
}
inline std::string* AddParams::mutable_layout() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AddParams.layout)
  return _internal_mutable_layout();
}
inline const std::string& AddParams::_internal_layout() const {
  return layout_.GetNoArena();
}
inline void AddParams::_internal_set_layout(const std::string& value) {
  
  layout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddParams::set_layout(std::string&& value) {
  
  layout_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.AddParams.layout)
}
inline void AddParams::set_layout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  layout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.AddParams.layout)
}
inline void AddParams::set_layout(const char* value, size_t size) {
  
  layout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.AddParams.layout)
}
inline std::string* AddParams::_internal_mutable_layout() {
  
  return layout_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddParams::release_layout() {
  // @@protoc_insertion_point(field_release:ipfs_lite.AddParams.layout)
  
  return layout_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddParams::set_allocated_layout(std::string* layout) {
  if (layout != nullptr) {
    
  } else {
    
  }
  layout_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layout);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.AddParams.layout)
}

// string chunker = 2;
inline void AddParams::clear_chunker() {
  chunker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddParams::chunker() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddParams.chunker)
  return _internal_chunker();
}
inline void AddParams::set_chunker(const std::string& value) {
  _internal_set_chunker(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AddParams.chunker)
}
inline std::string* AddParams::mutable_chunker() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AddParams.chunker)
  return _internal_mutable_chunker();
}
inline const std::string& AddParams::_internal_chunker() const {
  return chunker_.GetNoArena();
}
inline void AddParams::_internal_set_chunker(const std::string& value) {
  
  chunker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddParams::set_chunker(std::string&& value) {
  
  chunker_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.AddParams.chunker)
}
inline void AddParams::set_chunker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chunker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.AddParams.chunker)
}
inline void AddParams::set_chunker(const char* value, size_t size) {
  
  chunker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.AddParams.chunker)
}
inline std::string* AddParams::_internal_mutable_chunker() {
  
  return chunker_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddParams::release_chunker() {
  // @@protoc_insertion_point(field_release:ipfs_lite.AddParams.chunker)
  
  return chunker_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddParams::set_allocated_chunker(std::string* chunker) {
  if (chunker != nullptr) {
    
  } else {
    
  }
  chunker_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunker);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.AddParams.chunker)
}

// bool rawLeaves = 3;
inline void AddParams::clear_rawleaves() {
  rawleaves_ = false;
}
inline bool AddParams::_internal_rawleaves() const {
  return rawleaves_;
}
inline bool AddParams::rawleaves() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddParams.rawLeaves)
  return _internal_rawleaves();
}
inline void AddParams::_internal_set_rawleaves(bool value) {
  
  rawleaves_ = value;
}
inline void AddParams::set_rawleaves(bool value) {
  _internal_set_rawleaves(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AddParams.rawLeaves)
}

// bool hidden = 4;
inline void AddParams::clear_hidden() {
  hidden_ = false;
}
inline bool AddParams::_internal_hidden() const {
  return hidden_;
}
inline bool AddParams::hidden() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddParams.hidden)
  return _internal_hidden();
}
inline void AddParams::_internal_set_hidden(bool value) {
  
  hidden_ = value;
}
inline void AddParams::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AddParams.hidden)
}

// bool shared = 5;
inline void AddParams::clear_shared() {
  shared_ = false;
}
inline bool AddParams::_internal_shared() const {
  return shared_;
}
inline bool AddParams::shared() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddParams.shared)
  return _internal_shared();
}
inline void AddParams::_internal_set_shared(bool value) {
  
  shared_ = value;
}
inline void AddParams::set_shared(bool value) {
  _internal_set_shared(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AddParams.shared)
}

// bool noCopy = 6;
inline void AddParams::clear_nocopy() {
  nocopy_ = false;
}
inline bool AddParams::_internal_nocopy() const {
  return nocopy_;
}
inline bool AddParams::nocopy() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddParams.noCopy)
  return _internal_nocopy();
}
inline void AddParams::_internal_set_nocopy(bool value) {
  
  nocopy_ = value;
}
inline void AddParams::set_nocopy(bool value) {
  _internal_set_nocopy(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AddParams.noCopy)
}

// string hashFun = 7;
inline void AddParams::clear_hashfun() {
  hashfun_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddParams::hashfun() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddParams.hashFun)
  return _internal_hashfun();
}
inline void AddParams::set_hashfun(const std::string& value) {
  _internal_set_hashfun(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AddParams.hashFun)
}
inline std::string* AddParams::mutable_hashfun() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AddParams.hashFun)
  return _internal_mutable_hashfun();
}
inline const std::string& AddParams::_internal_hashfun() const {
  return hashfun_.GetNoArena();
}
inline void AddParams::_internal_set_hashfun(const std::string& value) {
  
  hashfun_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddParams::set_hashfun(std::string&& value) {
  
  hashfun_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.AddParams.hashFun)
}
inline void AddParams::set_hashfun(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hashfun_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.AddParams.hashFun)
}
inline void AddParams::set_hashfun(const char* value, size_t size) {
  
  hashfun_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.AddParams.hashFun)
}
inline std::string* AddParams::_internal_mutable_hashfun() {
  
  return hashfun_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddParams::release_hashfun() {
  // @@protoc_insertion_point(field_release:ipfs_lite.AddParams.hashFun)
  
  return hashfun_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddParams::set_allocated_hashfun(std::string* hashfun) {
  if (hashfun != nullptr) {
    
  } else {
    
  }
  hashfun_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashfun);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.AddParams.hashFun)
}

// -------------------------------------------------------------------

// Block

// bytes rawData = 1;
inline void Block::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Block::rawdata() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Block.rawData)
  return _internal_rawdata();
}
inline void Block::set_rawdata(const std::string& value) {
  _internal_set_rawdata(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.Block.rawData)
}
inline std::string* Block::mutable_rawdata() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.Block.rawData)
  return _internal_mutable_rawdata();
}
inline const std::string& Block::_internal_rawdata() const {
  return rawdata_.GetNoArena();
}
inline void Block::_internal_set_rawdata(const std::string& value) {
  
  rawdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Block::set_rawdata(std::string&& value) {
  
  rawdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.Block.rawData)
}
inline void Block::set_rawdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rawdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.Block.rawData)
}
inline void Block::set_rawdata(const void* value, size_t size) {
  
  rawdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.Block.rawData)
}
inline std::string* Block::_internal_mutable_rawdata() {
  
  return rawdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Block::release_rawdata() {
  // @@protoc_insertion_point(field_release:ipfs_lite.Block.rawData)
  
  return rawdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_rawdata(std::string* rawdata) {
  if (rawdata != nullptr) {
    
  } else {
    
  }
  rawdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.Block.rawData)
}

// string cid = 2;
inline void Block::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Block::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Block.cid)
  return _internal_cid();
}
inline void Block::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.Block.cid)
}
inline std::string* Block::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.Block.cid)
  return _internal_mutable_cid();
}
inline const std::string& Block::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void Block::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Block::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.Block.cid)
}
inline void Block::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.Block.cid)
}
inline void Block::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.Block.cid)
}
inline std::string* Block::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Block::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.Block.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.Block.cid)
}

// -------------------------------------------------------------------

// Link

// string name = 1;
inline void Link::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Link::name() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Link.name)
  return _internal_name();
}
inline void Link::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.Link.name)
}
inline std::string* Link::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.Link.name)
  return _internal_mutable_name();
}
inline const std::string& Link::_internal_name() const {
  return name_.GetNoArena();
}
inline void Link::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Link::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.Link.name)
}
inline void Link::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.Link.name)
}
inline void Link::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.Link.name)
}
inline std::string* Link::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Link::release_name() {
  // @@protoc_insertion_point(field_release:ipfs_lite.Link.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.Link.name)
}

// int64 size = 2;
inline void Link::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Link::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Link::size() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Link.size)
  return _internal_size();
}
inline void Link::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Link::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.Link.size)
}

// string cid = 3;
inline void Link::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Link::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Link.cid)
  return _internal_cid();
}
inline void Link::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.Link.cid)
}
inline std::string* Link::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.Link.cid)
  return _internal_mutable_cid();
}
inline const std::string& Link::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void Link::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Link::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.Link.cid)
}
inline void Link::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.Link.cid)
}
inline void Link::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.Link.cid)
}
inline std::string* Link::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Link::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.Link.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.Link.cid)
}

// -------------------------------------------------------------------

// NodeStat

// string hash = 1;
inline void NodeStat::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeStat::hash() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.NodeStat.hash)
  return _internal_hash();
}
inline void NodeStat::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.NodeStat.hash)
}
inline std::string* NodeStat::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.NodeStat.hash)
  return _internal_mutable_hash();
}
inline const std::string& NodeStat::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void NodeStat::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeStat::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.NodeStat.hash)
}
inline void NodeStat::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.NodeStat.hash)
}
inline void NodeStat::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.NodeStat.hash)
}
inline std::string* NodeStat::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeStat::release_hash() {
  // @@protoc_insertion_point(field_release:ipfs_lite.NodeStat.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeStat::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.NodeStat.hash)
}

// int32 numLinks = 2;
inline void NodeStat::clear_numlinks() {
  numlinks_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::_internal_numlinks() const {
  return numlinks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::numlinks() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.NodeStat.numLinks)
  return _internal_numlinks();
}
inline void NodeStat::_internal_set_numlinks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numlinks_ = value;
}
inline void NodeStat::set_numlinks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numlinks(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.NodeStat.numLinks)
}

// int32 blockSize = 3;
inline void NodeStat::clear_blocksize() {
  blocksize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::_internal_blocksize() const {
  return blocksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::blocksize() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.NodeStat.blockSize)
  return _internal_blocksize();
}
inline void NodeStat::_internal_set_blocksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blocksize_ = value;
}
inline void NodeStat::set_blocksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocksize(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.NodeStat.blockSize)
}

// int32 linksSize = 4;
inline void NodeStat::clear_linkssize() {
  linkssize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::_internal_linkssize() const {
  return linkssize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::linkssize() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.NodeStat.linksSize)
  return _internal_linkssize();
}
inline void NodeStat::_internal_set_linkssize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  linkssize_ = value;
}
inline void NodeStat::set_linkssize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_linkssize(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.NodeStat.linksSize)
}

// int32 dataSize = 5;
inline void NodeStat::clear_datasize() {
  datasize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::datasize() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.NodeStat.dataSize)
  return _internal_datasize();
}
inline void NodeStat::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datasize_ = value;
}
inline void NodeStat::set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.NodeStat.dataSize)
}

// int32 cumulativeSize = 6;
inline void NodeStat::clear_cumulativesize() {
  cumulativesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::_internal_cumulativesize() const {
  return cumulativesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeStat::cumulativesize() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.NodeStat.cumulativeSize)
  return _internal_cumulativesize();
}
inline void NodeStat::_internal_set_cumulativesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cumulativesize_ = value;
}
inline void NodeStat::set_cumulativesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cumulativesize(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.NodeStat.cumulativeSize)
}

// -------------------------------------------------------------------

// Node

// .ipfs_lite.Block block = 1;
inline bool Node::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool Node::has_block() const {
  return _internal_has_block();
}
inline void Node::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::ipfs_lite::Block& Node::_internal_block() const {
  const ::ipfs_lite::Block* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ipfs_lite::Block*>(
      &::ipfs_lite::_Block_default_instance_);
}
inline const ::ipfs_lite::Block& Node::block() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Node.block)
  return _internal_block();
}
inline ::ipfs_lite::Block* Node::release_block() {
  // @@protoc_insertion_point(field_release:ipfs_lite.Node.block)
  
  ::ipfs_lite::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::ipfs_lite::Block* Node::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipfs_lite::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::ipfs_lite::Block* Node::mutable_block() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.Node.block)
  return _internal_mutable_block();
}
inline void Node::set_allocated_block(::ipfs_lite::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.Node.block)
}

// repeated .ipfs_lite.Link links = 2;
inline int Node::_internal_links_size() const {
  return links_.size();
}
inline int Node::links_size() const {
  return _internal_links_size();
}
inline void Node::clear_links() {
  links_.Clear();
}
inline ::ipfs_lite::Link* Node::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.Node.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Link >*
Node::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ipfs_lite.Node.links)
  return &links_;
}
inline const ::ipfs_lite::Link& Node::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::ipfs_lite::Link& Node::links(int index) const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Node.links)
  return _internal_links(index);
}
inline ::ipfs_lite::Link* Node::_internal_add_links() {
  return links_.Add();
}
inline ::ipfs_lite::Link* Node::add_links() {
  // @@protoc_insertion_point(field_add:ipfs_lite.Node.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Link >&
Node::links() const {
  // @@protoc_insertion_point(field_list:ipfs_lite.Node.links)
  return links_;
}

// .ipfs_lite.NodeStat stat = 3;
inline bool Node::_internal_has_stat() const {
  return this != internal_default_instance() && stat_ != nullptr;
}
inline bool Node::has_stat() const {
  return _internal_has_stat();
}
inline void Node::clear_stat() {
  if (GetArenaNoVirtual() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
}
inline const ::ipfs_lite::NodeStat& Node::_internal_stat() const {
  const ::ipfs_lite::NodeStat* p = stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ipfs_lite::NodeStat*>(
      &::ipfs_lite::_NodeStat_default_instance_);
}
inline const ::ipfs_lite::NodeStat& Node::stat() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Node.stat)
  return _internal_stat();
}
inline ::ipfs_lite::NodeStat* Node::release_stat() {
  // @@protoc_insertion_point(field_release:ipfs_lite.Node.stat)
  
  ::ipfs_lite::NodeStat* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::ipfs_lite::NodeStat* Node::_internal_mutable_stat() {
  
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipfs_lite::NodeStat>(GetArenaNoVirtual());
    stat_ = p;
  }
  return stat_;
}
inline ::ipfs_lite::NodeStat* Node::mutable_stat() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.Node.stat)
  return _internal_mutable_stat();
}
inline void Node::set_allocated_stat(::ipfs_lite::NodeStat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.Node.stat)
}

// int64 size = 4;
inline void Node::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Node::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Node::size() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.Node.size)
  return _internal_size();
}
inline void Node::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Node::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.Node.size)
}

// -------------------------------------------------------------------

// AddFileRequest

// .ipfs_lite.AddParams addParams = 1;
inline bool AddFileRequest::_internal_has_addparams() const {
  return payload_case() == kAddParams;
}
inline bool AddFileRequest::has_addparams() const {
  return _internal_has_addparams();
}
inline void AddFileRequest::set_has_addparams() {
  _oneof_case_[0] = kAddParams;
}
inline void AddFileRequest::clear_addparams() {
  if (_internal_has_addparams()) {
    delete payload_.addparams_;
    clear_has_payload();
  }
}
inline ::ipfs_lite::AddParams* AddFileRequest::release_addparams() {
  // @@protoc_insertion_point(field_release:ipfs_lite.AddFileRequest.addParams)
  if (has_addparams()) {
    clear_has_payload();
      ::ipfs_lite::AddParams* temp = payload_.addparams_;
    payload_.addparams_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ipfs_lite::AddParams& AddFileRequest::_internal_addparams() const {
  return _internal_has_addparams()
      ? *payload_.addparams_
      : *reinterpret_cast< ::ipfs_lite::AddParams*>(&::ipfs_lite::_AddParams_default_instance_);
}
inline const ::ipfs_lite::AddParams& AddFileRequest::addparams() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddFileRequest.addParams)
  return _internal_addparams();
}
inline ::ipfs_lite::AddParams* AddFileRequest::_internal_mutable_addparams() {
  if (!_internal_has_addparams()) {
    clear_payload();
    set_has_addparams();
    payload_.addparams_ = CreateMaybeMessage< ::ipfs_lite::AddParams >(
        GetArenaNoVirtual());
  }
  return payload_.addparams_;
}
inline ::ipfs_lite::AddParams* AddFileRequest::mutable_addparams() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AddFileRequest.addParams)
  return _internal_mutable_addparams();
}

// bytes chunk = 2;
inline bool AddFileRequest::_internal_has_chunk() const {
  return payload_case() == kChunk;
}
inline void AddFileRequest::set_has_chunk() {
  _oneof_case_[0] = kChunk;
}
inline void AddFileRequest::clear_chunk() {
  if (_internal_has_chunk()) {
    payload_.chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& AddFileRequest::chunk() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddFileRequest.chunk)
  return _internal_chunk();
}
inline void AddFileRequest::set_chunk(const std::string& value) {
  _internal_set_chunk(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AddFileRequest.chunk)
}
inline std::string* AddFileRequest::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AddFileRequest.chunk)
  return _internal_mutable_chunk();
}
inline const std::string& AddFileRequest::_internal_chunk() const {
  if (_internal_has_chunk()) {
    return payload_.chunk_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AddFileRequest::_internal_set_chunk(const std::string& value) {
  if (!_internal_has_chunk()) {
    clear_payload();
    set_has_chunk();
    payload_.chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddFileRequest::set_chunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.AddFileRequest.chunk)
  if (!_internal_has_chunk()) {
    clear_payload();
    set_has_chunk();
    payload_.chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.AddFileRequest.chunk)
}
inline void AddFileRequest::set_chunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_chunk()) {
    clear_payload();
    set_has_chunk();
    payload_.chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.AddFileRequest.chunk)
}
inline void AddFileRequest::set_chunk(const void* value, size_t size) {
  if (!_internal_has_chunk()) {
    clear_payload();
    set_has_chunk();
    payload_.chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.AddFileRequest.chunk)
}
inline std::string* AddFileRequest::_internal_mutable_chunk() {
  if (!_internal_has_chunk()) {
    clear_payload();
    set_has_chunk();
    payload_.chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.chunk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFileRequest::release_chunk() {
  // @@protoc_insertion_point(field_release:ipfs_lite.AddFileRequest.chunk)
  if (_internal_has_chunk()) {
    clear_has_payload();
    return payload_.chunk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AddFileRequest::set_allocated_chunk(std::string* chunk) {
  if (has_payload()) {
    clear_payload();
  }
  if (chunk != nullptr) {
    set_has_chunk();
    payload_.chunk_.UnsafeSetDefault(chunk);
  }
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.AddFileRequest.chunk)
}

inline bool AddFileRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void AddFileRequest::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline AddFileRequest::PayloadCase AddFileRequest::payload_case() const {
  return AddFileRequest::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AddFileResponse

// .ipfs_lite.Node node = 1;
inline bool AddFileResponse::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool AddFileResponse::has_node() const {
  return _internal_has_node();
}
inline void AddFileResponse::clear_node() {
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::ipfs_lite::Node& AddFileResponse::_internal_node() const {
  const ::ipfs_lite::Node* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ipfs_lite::Node*>(
      &::ipfs_lite::_Node_default_instance_);
}
inline const ::ipfs_lite::Node& AddFileResponse::node() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddFileResponse.node)
  return _internal_node();
}
inline ::ipfs_lite::Node* AddFileResponse::release_node() {
  // @@protoc_insertion_point(field_release:ipfs_lite.AddFileResponse.node)
  
  ::ipfs_lite::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::ipfs_lite::Node* AddFileResponse::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipfs_lite::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  return node_;
}
inline ::ipfs_lite::Node* AddFileResponse::mutable_node() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AddFileResponse.node)
  return _internal_mutable_node();
}
inline void AddFileResponse::set_allocated_node(::ipfs_lite::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.AddFileResponse.node)
}

// -------------------------------------------------------------------

// GetFileRequest

// string cid = 1;
inline void GetFileRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFileRequest::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetFileRequest.cid)
  return _internal_cid();
}
inline void GetFileRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.GetFileRequest.cid)
}
inline std::string* GetFileRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetFileRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& GetFileRequest::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void GetFileRequest::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFileRequest::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.GetFileRequest.cid)
}
inline void GetFileRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.GetFileRequest.cid)
}
inline void GetFileRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.GetFileRequest.cid)
}
inline std::string* GetFileRequest::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileRequest::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetFileRequest.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetFileRequest.cid)
}

// -------------------------------------------------------------------

// GetFileResponse

// bytes chunk = 1;
inline void GetFileResponse::clear_chunk() {
  chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFileResponse::chunk() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetFileResponse.chunk)
  return _internal_chunk();
}
inline void GetFileResponse::set_chunk(const std::string& value) {
  _internal_set_chunk(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.GetFileResponse.chunk)
}
inline std::string* GetFileResponse::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetFileResponse.chunk)
  return _internal_mutable_chunk();
}
inline const std::string& GetFileResponse::_internal_chunk() const {
  return chunk_.GetNoArena();
}
inline void GetFileResponse::_internal_set_chunk(const std::string& value) {
  
  chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFileResponse::set_chunk(std::string&& value) {
  
  chunk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.GetFileResponse.chunk)
}
inline void GetFileResponse::set_chunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.GetFileResponse.chunk)
}
inline void GetFileResponse::set_chunk(const void* value, size_t size) {
  
  chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.GetFileResponse.chunk)
}
inline std::string* GetFileResponse::_internal_mutable_chunk() {
  
  return chunk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetFileResponse.chunk)
  
  return chunk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileResponse::set_allocated_chunk(std::string* chunk) {
  if (chunk != nullptr) {
    
  } else {
    
  }
  chunk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetFileResponse.chunk)
}

// -------------------------------------------------------------------

// AddNodeRequest

// .ipfs_lite.Block block = 1;
inline bool AddNodeRequest::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool AddNodeRequest::has_block() const {
  return _internal_has_block();
}
inline void AddNodeRequest::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::ipfs_lite::Block& AddNodeRequest::_internal_block() const {
  const ::ipfs_lite::Block* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ipfs_lite::Block*>(
      &::ipfs_lite::_Block_default_instance_);
}
inline const ::ipfs_lite::Block& AddNodeRequest::block() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddNodeRequest.block)
  return _internal_block();
}
inline ::ipfs_lite::Block* AddNodeRequest::release_block() {
  // @@protoc_insertion_point(field_release:ipfs_lite.AddNodeRequest.block)
  
  ::ipfs_lite::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::ipfs_lite::Block* AddNodeRequest::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipfs_lite::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::ipfs_lite::Block* AddNodeRequest::mutable_block() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AddNodeRequest.block)
  return _internal_mutable_block();
}
inline void AddNodeRequest::set_allocated_block(::ipfs_lite::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.AddNodeRequest.block)
}

// -------------------------------------------------------------------

// AddNodeResponse

// -------------------------------------------------------------------

// AddNodesRequest

// repeated .ipfs_lite.Block blocks = 1;
inline int AddNodesRequest::_internal_blocks_size() const {
  return blocks_.size();
}
inline int AddNodesRequest::blocks_size() const {
  return _internal_blocks_size();
}
inline void AddNodesRequest::clear_blocks() {
  blocks_.Clear();
}
inline ::ipfs_lite::Block* AddNodesRequest::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AddNodesRequest.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block >*
AddNodesRequest::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ipfs_lite.AddNodesRequest.blocks)
  return &blocks_;
}
inline const ::ipfs_lite::Block& AddNodesRequest::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::ipfs_lite::Block& AddNodesRequest::blocks(int index) const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AddNodesRequest.blocks)
  return _internal_blocks(index);
}
inline ::ipfs_lite::Block* AddNodesRequest::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::ipfs_lite::Block* AddNodesRequest::add_blocks() {
  // @@protoc_insertion_point(field_add:ipfs_lite.AddNodesRequest.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block >&
AddNodesRequest::blocks() const {
  // @@protoc_insertion_point(field_list:ipfs_lite.AddNodesRequest.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// AddNodesResponse

// -------------------------------------------------------------------

// GetNodeRequest

// string cid = 1;
inline void GetNodeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetNodeRequest::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetNodeRequest.cid)
  return _internal_cid();
}
inline void GetNodeRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.GetNodeRequest.cid)
}
inline std::string* GetNodeRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetNodeRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& GetNodeRequest::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void GetNodeRequest::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodeRequest::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.GetNodeRequest.cid)
}
inline void GetNodeRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.GetNodeRequest.cid)
}
inline void GetNodeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.GetNodeRequest.cid)
}
inline std::string* GetNodeRequest::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetNodeRequest.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodeRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetNodeRequest.cid)
}

// -------------------------------------------------------------------

// GetNodeResponse

// .ipfs_lite.Node node = 1;
inline bool GetNodeResponse::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool GetNodeResponse::has_node() const {
  return _internal_has_node();
}
inline void GetNodeResponse::clear_node() {
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::ipfs_lite::Node& GetNodeResponse::_internal_node() const {
  const ::ipfs_lite::Node* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ipfs_lite::Node*>(
      &::ipfs_lite::_Node_default_instance_);
}
inline const ::ipfs_lite::Node& GetNodeResponse::node() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetNodeResponse.node)
  return _internal_node();
}
inline ::ipfs_lite::Node* GetNodeResponse::release_node() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetNodeResponse.node)
  
  ::ipfs_lite::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::ipfs_lite::Node* GetNodeResponse::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipfs_lite::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  return node_;
}
inline ::ipfs_lite::Node* GetNodeResponse::mutable_node() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetNodeResponse.node)
  return _internal_mutable_node();
}
inline void GetNodeResponse::set_allocated_node(::ipfs_lite::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetNodeResponse.node)
}

// -------------------------------------------------------------------

// GetNodesRequest

// repeated string cids = 1;
inline int GetNodesRequest::_internal_cids_size() const {
  return cids_.size();
}
inline int GetNodesRequest::cids_size() const {
  return _internal_cids_size();
}
inline void GetNodesRequest::clear_cids() {
  cids_.Clear();
}
inline std::string* GetNodesRequest::add_cids() {
  // @@protoc_insertion_point(field_add_mutable:ipfs_lite.GetNodesRequest.cids)
  return _internal_add_cids();
}
inline const std::string& GetNodesRequest::_internal_cids(int index) const {
  return cids_.Get(index);
}
inline const std::string& GetNodesRequest::cids(int index) const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetNodesRequest.cids)
  return _internal_cids(index);
}
inline std::string* GetNodesRequest::mutable_cids(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetNodesRequest.cids)
  return cids_.Mutable(index);
}
inline void GetNodesRequest::set_cids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.GetNodesRequest.cids)
  cids_.Mutable(index)->assign(value);
}
inline void GetNodesRequest::set_cids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.GetNodesRequest.cids)
  cids_.Mutable(index)->assign(std::move(value));
}
inline void GetNodesRequest::set_cids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ipfs_lite.GetNodesRequest.cids)
}
inline void GetNodesRequest::set_cids(int index, const char* value, size_t size) {
  cids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.GetNodesRequest.cids)
}
inline std::string* GetNodesRequest::_internal_add_cids() {
  return cids_.Add();
}
inline void GetNodesRequest::add_cids(const std::string& value) {
  cids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ipfs_lite.GetNodesRequest.cids)
}
inline void GetNodesRequest::add_cids(std::string&& value) {
  cids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ipfs_lite.GetNodesRequest.cids)
}
inline void GetNodesRequest::add_cids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ipfs_lite.GetNodesRequest.cids)
}
inline void GetNodesRequest::add_cids(const char* value, size_t size) {
  cids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ipfs_lite.GetNodesRequest.cids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetNodesRequest::cids() const {
  // @@protoc_insertion_point(field_list:ipfs_lite.GetNodesRequest.cids)
  return cids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetNodesRequest::mutable_cids() {
  // @@protoc_insertion_point(field_mutable_list:ipfs_lite.GetNodesRequest.cids)
  return &cids_;
}

// -------------------------------------------------------------------

// GetNodesResponse

// .ipfs_lite.Node node = 1;
inline bool GetNodesResponse::_internal_has_node() const {
  return option_case() == kNode;
}
inline bool GetNodesResponse::has_node() const {
  return _internal_has_node();
}
inline void GetNodesResponse::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void GetNodesResponse::clear_node() {
  if (_internal_has_node()) {
    delete option_.node_;
    clear_has_option();
  }
}
inline ::ipfs_lite::Node* GetNodesResponse::release_node() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetNodesResponse.node)
  if (has_node()) {
    clear_has_option();
      ::ipfs_lite::Node* temp = option_.node_;
    option_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ipfs_lite::Node& GetNodesResponse::_internal_node() const {
  return _internal_has_node()
      ? *option_.node_
      : *reinterpret_cast< ::ipfs_lite::Node*>(&::ipfs_lite::_Node_default_instance_);
}
inline const ::ipfs_lite::Node& GetNodesResponse::node() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetNodesResponse.node)
  return _internal_node();
}
inline ::ipfs_lite::Node* GetNodesResponse::_internal_mutable_node() {
  if (!_internal_has_node()) {
    clear_option();
    set_has_node();
    option_.node_ = CreateMaybeMessage< ::ipfs_lite::Node >(
        GetArenaNoVirtual());
  }
  return option_.node_;
}
inline ::ipfs_lite::Node* GetNodesResponse::mutable_node() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetNodesResponse.node)
  return _internal_mutable_node();
}

// string error = 2;
inline bool GetNodesResponse::_internal_has_error() const {
  return option_case() == kError;
}
inline void GetNodesResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void GetNodesResponse::clear_error() {
  if (_internal_has_error()) {
    option_.error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_option();
  }
}
inline const std::string& GetNodesResponse::error() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetNodesResponse.error)
  return _internal_error();
}
inline void GetNodesResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.GetNodesResponse.error)
}
inline std::string* GetNodesResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetNodesResponse.error)
  return _internal_mutable_error();
}
inline const std::string& GetNodesResponse::_internal_error() const {
  if (_internal_has_error()) {
    return option_.error_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetNodesResponse::_internal_set_error(const std::string& value) {
  if (!_internal_has_error()) {
    clear_option();
    set_has_error();
    option_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  option_.error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodesResponse::set_error(std::string&& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.GetNodesResponse.error)
  if (!_internal_has_error()) {
    clear_option();
    set_has_error();
    option_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  option_.error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.GetNodesResponse.error)
}
inline void GetNodesResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_error()) {
    clear_option();
    set_has_error();
    option_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  option_.error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.GetNodesResponse.error)
}
inline void GetNodesResponse::set_error(const char* value, size_t size) {
  if (!_internal_has_error()) {
    clear_option();
    set_has_error();
    option_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  option_.error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.GetNodesResponse.error)
}
inline std::string* GetNodesResponse::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_option();
    set_has_error();
    option_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return option_.error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodesResponse::release_error() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetNodesResponse.error)
  if (_internal_has_error()) {
    clear_has_option();
    return option_.error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void GetNodesResponse::set_allocated_error(std::string* error) {
  if (has_option()) {
    clear_option();
  }
  if (error != nullptr) {
    set_has_error();
    option_.error_.UnsafeSetDefault(error);
  }
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetNodesResponse.error)
}

inline bool GetNodesResponse::has_option() const {
  return option_case() != OPTION_NOT_SET;
}
inline void GetNodesResponse::clear_has_option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline GetNodesResponse::OptionCase GetNodesResponse::option_case() const {
  return GetNodesResponse::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RemoveNodeRequest

// string cid = 1;
inline void RemoveNodeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveNodeRequest::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.RemoveNodeRequest.cid)
  return _internal_cid();
}
inline void RemoveNodeRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.RemoveNodeRequest.cid)
}
inline std::string* RemoveNodeRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.RemoveNodeRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& RemoveNodeRequest::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void RemoveNodeRequest::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveNodeRequest::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.RemoveNodeRequest.cid)
}
inline void RemoveNodeRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.RemoveNodeRequest.cid)
}
inline void RemoveNodeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.RemoveNodeRequest.cid)
}
inline std::string* RemoveNodeRequest::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveNodeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.RemoveNodeRequest.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveNodeRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.RemoveNodeRequest.cid)
}

// -------------------------------------------------------------------

// RemoveNodeResponse

// -------------------------------------------------------------------

// RemoveNodesRequest

// repeated string cids = 1;
inline int RemoveNodesRequest::_internal_cids_size() const {
  return cids_.size();
}
inline int RemoveNodesRequest::cids_size() const {
  return _internal_cids_size();
}
inline void RemoveNodesRequest::clear_cids() {
  cids_.Clear();
}
inline std::string* RemoveNodesRequest::add_cids() {
  // @@protoc_insertion_point(field_add_mutable:ipfs_lite.RemoveNodesRequest.cids)
  return _internal_add_cids();
}
inline const std::string& RemoveNodesRequest::_internal_cids(int index) const {
  return cids_.Get(index);
}
inline const std::string& RemoveNodesRequest::cids(int index) const {
  // @@protoc_insertion_point(field_get:ipfs_lite.RemoveNodesRequest.cids)
  return _internal_cids(index);
}
inline std::string* RemoveNodesRequest::mutable_cids(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.RemoveNodesRequest.cids)
  return cids_.Mutable(index);
}
inline void RemoveNodesRequest::set_cids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.RemoveNodesRequest.cids)
  cids_.Mutable(index)->assign(value);
}
inline void RemoveNodesRequest::set_cids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.RemoveNodesRequest.cids)
  cids_.Mutable(index)->assign(std::move(value));
}
inline void RemoveNodesRequest::set_cids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ipfs_lite.RemoveNodesRequest.cids)
}
inline void RemoveNodesRequest::set_cids(int index, const char* value, size_t size) {
  cids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.RemoveNodesRequest.cids)
}
inline std::string* RemoveNodesRequest::_internal_add_cids() {
  return cids_.Add();
}
inline void RemoveNodesRequest::add_cids(const std::string& value) {
  cids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ipfs_lite.RemoveNodesRequest.cids)
}
inline void RemoveNodesRequest::add_cids(std::string&& value) {
  cids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ipfs_lite.RemoveNodesRequest.cids)
}
inline void RemoveNodesRequest::add_cids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ipfs_lite.RemoveNodesRequest.cids)
}
inline void RemoveNodesRequest::add_cids(const char* value, size_t size) {
  cids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ipfs_lite.RemoveNodesRequest.cids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RemoveNodesRequest::cids() const {
  // @@protoc_insertion_point(field_list:ipfs_lite.RemoveNodesRequest.cids)
  return cids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RemoveNodesRequest::mutable_cids() {
  // @@protoc_insertion_point(field_mutable_list:ipfs_lite.RemoveNodesRequest.cids)
  return &cids_;
}

// -------------------------------------------------------------------

// RemoveNodesResponse

// -------------------------------------------------------------------

// ResolveLinkRequest

// string nodeCid = 1;
inline void ResolveLinkRequest::clear_nodecid() {
  nodecid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResolveLinkRequest::nodecid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.ResolveLinkRequest.nodeCid)
  return _internal_nodecid();
}
inline void ResolveLinkRequest::set_nodecid(const std::string& value) {
  _internal_set_nodecid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.ResolveLinkRequest.nodeCid)
}
inline std::string* ResolveLinkRequest::mutable_nodecid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.ResolveLinkRequest.nodeCid)
  return _internal_mutable_nodecid();
}
inline const std::string& ResolveLinkRequest::_internal_nodecid() const {
  return nodecid_.GetNoArena();
}
inline void ResolveLinkRequest::_internal_set_nodecid(const std::string& value) {
  
  nodecid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResolveLinkRequest::set_nodecid(std::string&& value) {
  
  nodecid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.ResolveLinkRequest.nodeCid)
}
inline void ResolveLinkRequest::set_nodecid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodecid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.ResolveLinkRequest.nodeCid)
}
inline void ResolveLinkRequest::set_nodecid(const char* value, size_t size) {
  
  nodecid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.ResolveLinkRequest.nodeCid)
}
inline std::string* ResolveLinkRequest::_internal_mutable_nodecid() {
  
  return nodecid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResolveLinkRequest::release_nodecid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.ResolveLinkRequest.nodeCid)
  
  return nodecid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResolveLinkRequest::set_allocated_nodecid(std::string* nodecid) {
  if (nodecid != nullptr) {
    
  } else {
    
  }
  nodecid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodecid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.ResolveLinkRequest.nodeCid)
}

// repeated string path = 2;
inline int ResolveLinkRequest::_internal_path_size() const {
  return path_.size();
}
inline int ResolveLinkRequest::path_size() const {
  return _internal_path_size();
}
inline void ResolveLinkRequest::clear_path() {
  path_.Clear();
}
inline std::string* ResolveLinkRequest::add_path() {
  // @@protoc_insertion_point(field_add_mutable:ipfs_lite.ResolveLinkRequest.path)
  return _internal_add_path();
}
inline const std::string& ResolveLinkRequest::_internal_path(int index) const {
  return path_.Get(index);
}
inline const std::string& ResolveLinkRequest::path(int index) const {
  // @@protoc_insertion_point(field_get:ipfs_lite.ResolveLinkRequest.path)
  return _internal_path(index);
}
inline std::string* ResolveLinkRequest::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.ResolveLinkRequest.path)
  return path_.Mutable(index);
}
inline void ResolveLinkRequest::set_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.ResolveLinkRequest.path)
  path_.Mutable(index)->assign(value);
}
inline void ResolveLinkRequest::set_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.ResolveLinkRequest.path)
  path_.Mutable(index)->assign(std::move(value));
}
inline void ResolveLinkRequest::set_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ipfs_lite.ResolveLinkRequest.path)
}
inline void ResolveLinkRequest::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.ResolveLinkRequest.path)
}
inline std::string* ResolveLinkRequest::_internal_add_path() {
  return path_.Add();
}
inline void ResolveLinkRequest::add_path(const std::string& value) {
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ipfs_lite.ResolveLinkRequest.path)
}
inline void ResolveLinkRequest::add_path(std::string&& value) {
  path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ipfs_lite.ResolveLinkRequest.path)
}
inline void ResolveLinkRequest::add_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ipfs_lite.ResolveLinkRequest.path)
}
inline void ResolveLinkRequest::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ipfs_lite.ResolveLinkRequest.path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResolveLinkRequest::path() const {
  // @@protoc_insertion_point(field_list:ipfs_lite.ResolveLinkRequest.path)
  return path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResolveLinkRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:ipfs_lite.ResolveLinkRequest.path)
  return &path_;
}

// -------------------------------------------------------------------

// ResolveLinkResponse

// .ipfs_lite.Link link = 1;
inline bool ResolveLinkResponse::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool ResolveLinkResponse::has_link() const {
  return _internal_has_link();
}
inline void ResolveLinkResponse::clear_link() {
  if (GetArenaNoVirtual() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::ipfs_lite::Link& ResolveLinkResponse::_internal_link() const {
  const ::ipfs_lite::Link* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ipfs_lite::Link*>(
      &::ipfs_lite::_Link_default_instance_);
}
inline const ::ipfs_lite::Link& ResolveLinkResponse::link() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.ResolveLinkResponse.link)
  return _internal_link();
}
inline ::ipfs_lite::Link* ResolveLinkResponse::release_link() {
  // @@protoc_insertion_point(field_release:ipfs_lite.ResolveLinkResponse.link)
  
  ::ipfs_lite::Link* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::ipfs_lite::Link* ResolveLinkResponse::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipfs_lite::Link>(GetArenaNoVirtual());
    link_ = p;
  }
  return link_;
}
inline ::ipfs_lite::Link* ResolveLinkResponse::mutable_link() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.ResolveLinkResponse.link)
  return _internal_mutable_link();
}
inline void ResolveLinkResponse::set_allocated_link(::ipfs_lite::Link* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.ResolveLinkResponse.link)
}

// repeated string remainingPath = 2;
inline int ResolveLinkResponse::_internal_remainingpath_size() const {
  return remainingpath_.size();
}
inline int ResolveLinkResponse::remainingpath_size() const {
  return _internal_remainingpath_size();
}
inline void ResolveLinkResponse::clear_remainingpath() {
  remainingpath_.Clear();
}
inline std::string* ResolveLinkResponse::add_remainingpath() {
  // @@protoc_insertion_point(field_add_mutable:ipfs_lite.ResolveLinkResponse.remainingPath)
  return _internal_add_remainingpath();
}
inline const std::string& ResolveLinkResponse::_internal_remainingpath(int index) const {
  return remainingpath_.Get(index);
}
inline const std::string& ResolveLinkResponse::remainingpath(int index) const {
  // @@protoc_insertion_point(field_get:ipfs_lite.ResolveLinkResponse.remainingPath)
  return _internal_remainingpath(index);
}
inline std::string* ResolveLinkResponse::mutable_remainingpath(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.ResolveLinkResponse.remainingPath)
  return remainingpath_.Mutable(index);
}
inline void ResolveLinkResponse::set_remainingpath(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.ResolveLinkResponse.remainingPath)
  remainingpath_.Mutable(index)->assign(value);
}
inline void ResolveLinkResponse::set_remainingpath(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.ResolveLinkResponse.remainingPath)
  remainingpath_.Mutable(index)->assign(std::move(value));
}
inline void ResolveLinkResponse::set_remainingpath(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remainingpath_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ipfs_lite.ResolveLinkResponse.remainingPath)
}
inline void ResolveLinkResponse::set_remainingpath(int index, const char* value, size_t size) {
  remainingpath_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.ResolveLinkResponse.remainingPath)
}
inline std::string* ResolveLinkResponse::_internal_add_remainingpath() {
  return remainingpath_.Add();
}
inline void ResolveLinkResponse::add_remainingpath(const std::string& value) {
  remainingpath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ipfs_lite.ResolveLinkResponse.remainingPath)
}
inline void ResolveLinkResponse::add_remainingpath(std::string&& value) {
  remainingpath_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ipfs_lite.ResolveLinkResponse.remainingPath)
}
inline void ResolveLinkResponse::add_remainingpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remainingpath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ipfs_lite.ResolveLinkResponse.remainingPath)
}
inline void ResolveLinkResponse::add_remainingpath(const char* value, size_t size) {
  remainingpath_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ipfs_lite.ResolveLinkResponse.remainingPath)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResolveLinkResponse::remainingpath() const {
  // @@protoc_insertion_point(field_list:ipfs_lite.ResolveLinkResponse.remainingPath)
  return remainingpath_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResolveLinkResponse::mutable_remainingpath() {
  // @@protoc_insertion_point(field_mutable_list:ipfs_lite.ResolveLinkResponse.remainingPath)
  return &remainingpath_;
}

// -------------------------------------------------------------------

// TreeRequest

// string nodeCid = 1;
inline void TreeRequest::clear_nodecid() {
  nodecid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TreeRequest::nodecid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.TreeRequest.nodeCid)
  return _internal_nodecid();
}
inline void TreeRequest::set_nodecid(const std::string& value) {
  _internal_set_nodecid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.TreeRequest.nodeCid)
}
inline std::string* TreeRequest::mutable_nodecid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.TreeRequest.nodeCid)
  return _internal_mutable_nodecid();
}
inline const std::string& TreeRequest::_internal_nodecid() const {
  return nodecid_.GetNoArena();
}
inline void TreeRequest::_internal_set_nodecid(const std::string& value) {
  
  nodecid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TreeRequest::set_nodecid(std::string&& value) {
  
  nodecid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.TreeRequest.nodeCid)
}
inline void TreeRequest::set_nodecid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodecid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.TreeRequest.nodeCid)
}
inline void TreeRequest::set_nodecid(const char* value, size_t size) {
  
  nodecid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.TreeRequest.nodeCid)
}
inline std::string* TreeRequest::_internal_mutable_nodecid() {
  
  return nodecid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TreeRequest::release_nodecid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.TreeRequest.nodeCid)
  
  return nodecid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TreeRequest::set_allocated_nodecid(std::string* nodecid) {
  if (nodecid != nullptr) {
    
  } else {
    
  }
  nodecid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodecid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.TreeRequest.nodeCid)
}

// string path = 2;
inline void TreeRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TreeRequest::path() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.TreeRequest.path)
  return _internal_path();
}
inline void TreeRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.TreeRequest.path)
}
inline std::string* TreeRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.TreeRequest.path)
  return _internal_mutable_path();
}
inline const std::string& TreeRequest::_internal_path() const {
  return path_.GetNoArena();
}
inline void TreeRequest::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TreeRequest::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.TreeRequest.path)
}
inline void TreeRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.TreeRequest.path)
}
inline void TreeRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.TreeRequest.path)
}
inline std::string* TreeRequest::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TreeRequest::release_path() {
  // @@protoc_insertion_point(field_release:ipfs_lite.TreeRequest.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TreeRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.TreeRequest.path)
}

// int32 depth = 3;
inline void TreeRequest::clear_depth() {
  depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreeRequest::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreeRequest::depth() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.TreeRequest.depth)
  return _internal_depth();
}
inline void TreeRequest::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_ = value;
}
inline void TreeRequest::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.TreeRequest.depth)
}

// -------------------------------------------------------------------

// TreeResponse

// repeated string paths = 1;
inline int TreeResponse::_internal_paths_size() const {
  return paths_.size();
}
inline int TreeResponse::paths_size() const {
  return _internal_paths_size();
}
inline void TreeResponse::clear_paths() {
  paths_.Clear();
}
inline std::string* TreeResponse::add_paths() {
  // @@protoc_insertion_point(field_add_mutable:ipfs_lite.TreeResponse.paths)
  return _internal_add_paths();
}
inline const std::string& TreeResponse::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const std::string& TreeResponse::paths(int index) const {
  // @@protoc_insertion_point(field_get:ipfs_lite.TreeResponse.paths)
  return _internal_paths(index);
}
inline std::string* TreeResponse::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.TreeResponse.paths)
  return paths_.Mutable(index);
}
inline void TreeResponse::set_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.TreeResponse.paths)
  paths_.Mutable(index)->assign(value);
}
inline void TreeResponse::set_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ipfs_lite.TreeResponse.paths)
  paths_.Mutable(index)->assign(std::move(value));
}
inline void TreeResponse::set_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ipfs_lite.TreeResponse.paths)
}
inline void TreeResponse::set_paths(int index, const char* value, size_t size) {
  paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.TreeResponse.paths)
}
inline std::string* TreeResponse::_internal_add_paths() {
  return paths_.Add();
}
inline void TreeResponse::add_paths(const std::string& value) {
  paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ipfs_lite.TreeResponse.paths)
}
inline void TreeResponse::add_paths(std::string&& value) {
  paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ipfs_lite.TreeResponse.paths)
}
inline void TreeResponse::add_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ipfs_lite.TreeResponse.paths)
}
inline void TreeResponse::add_paths(const char* value, size_t size) {
  paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ipfs_lite.TreeResponse.paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TreeResponse::paths() const {
  // @@protoc_insertion_point(field_list:ipfs_lite.TreeResponse.paths)
  return paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TreeResponse::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:ipfs_lite.TreeResponse.paths)
  return &paths_;
}

// -------------------------------------------------------------------

// DeleteBlockRequest

// string cid = 1;
inline void DeleteBlockRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteBlockRequest::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.DeleteBlockRequest.cid)
  return _internal_cid();
}
inline void DeleteBlockRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.DeleteBlockRequest.cid)
}
inline std::string* DeleteBlockRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.DeleteBlockRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& DeleteBlockRequest::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void DeleteBlockRequest::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteBlockRequest::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.DeleteBlockRequest.cid)
}
inline void DeleteBlockRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.DeleteBlockRequest.cid)
}
inline void DeleteBlockRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.DeleteBlockRequest.cid)
}
inline std::string* DeleteBlockRequest::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteBlockRequest::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.DeleteBlockRequest.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBlockRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.DeleteBlockRequest.cid)
}

// -------------------------------------------------------------------

// DeleteBlockResponse

// -------------------------------------------------------------------

// HasBlockRequest

// string cid = 1;
inline void HasBlockRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HasBlockRequest::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.HasBlockRequest.cid)
  return _internal_cid();
}
inline void HasBlockRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.HasBlockRequest.cid)
}
inline std::string* HasBlockRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.HasBlockRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& HasBlockRequest::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void HasBlockRequest::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HasBlockRequest::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.HasBlockRequest.cid)
}
inline void HasBlockRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.HasBlockRequest.cid)
}
inline void HasBlockRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.HasBlockRequest.cid)
}
inline std::string* HasBlockRequest::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HasBlockRequest::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.HasBlockRequest.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HasBlockRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.HasBlockRequest.cid)
}

// -------------------------------------------------------------------

// HasBlockResponse

// bool hasBlock = 1;
inline void HasBlockResponse::clear_hasblock() {
  hasblock_ = false;
}
inline bool HasBlockResponse::_internal_hasblock() const {
  return hasblock_;
}
inline bool HasBlockResponse::hasblock() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.HasBlockResponse.hasBlock)
  return _internal_hasblock();
}
inline void HasBlockResponse::_internal_set_hasblock(bool value) {
  
  hasblock_ = value;
}
inline void HasBlockResponse::set_hasblock(bool value) {
  _internal_set_hasblock(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.HasBlockResponse.hasBlock)
}

// -------------------------------------------------------------------

// GetBlockRequest

// string cid = 1;
inline void GetBlockRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockRequest::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetBlockRequest.cid)
  return _internal_cid();
}
inline void GetBlockRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.GetBlockRequest.cid)
}
inline std::string* GetBlockRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetBlockRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& GetBlockRequest::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void GetBlockRequest::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockRequest::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.GetBlockRequest.cid)
}
inline void GetBlockRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.GetBlockRequest.cid)
}
inline void GetBlockRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.GetBlockRequest.cid)
}
inline std::string* GetBlockRequest::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockRequest::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetBlockRequest.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetBlockRequest.cid)
}

// -------------------------------------------------------------------

// GetBlockResponse

// .ipfs_lite.Block block = 1;
inline bool GetBlockResponse::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GetBlockResponse::has_block() const {
  return _internal_has_block();
}
inline void GetBlockResponse::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::ipfs_lite::Block& GetBlockResponse::_internal_block() const {
  const ::ipfs_lite::Block* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ipfs_lite::Block*>(
      &::ipfs_lite::_Block_default_instance_);
}
inline const ::ipfs_lite::Block& GetBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetBlockResponse.block)
  return _internal_block();
}
inline ::ipfs_lite::Block* GetBlockResponse::release_block() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetBlockResponse.block)
  
  ::ipfs_lite::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::ipfs_lite::Block* GetBlockResponse::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipfs_lite::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::ipfs_lite::Block* GetBlockResponse::mutable_block() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetBlockResponse.block)
  return _internal_mutable_block();
}
inline void GetBlockResponse::set_allocated_block(::ipfs_lite::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetBlockResponse.block)
}

// -------------------------------------------------------------------

// GetBlockSizeRequest

// string cid = 1;
inline void GetBlockSizeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockSizeRequest::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetBlockSizeRequest.cid)
  return _internal_cid();
}
inline void GetBlockSizeRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.GetBlockSizeRequest.cid)
}
inline std::string* GetBlockSizeRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.GetBlockSizeRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& GetBlockSizeRequest::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void GetBlockSizeRequest::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockSizeRequest::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.GetBlockSizeRequest.cid)
}
inline void GetBlockSizeRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.GetBlockSizeRequest.cid)
}
inline void GetBlockSizeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.GetBlockSizeRequest.cid)
}
inline std::string* GetBlockSizeRequest::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockSizeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.GetBlockSizeRequest.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockSizeRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetBlockSizeRequest.cid)
}

// -------------------------------------------------------------------

// GetBlockSizeResponse

// int32 size = 1;
inline void GetBlockSizeResponse::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockSizeResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockSizeResponse::size() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.GetBlockSizeResponse.size)
  return _internal_size();
}
inline void GetBlockSizeResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void GetBlockSizeResponse::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.GetBlockSizeResponse.size)
}

// -------------------------------------------------------------------

// PutBlockRequest

// .ipfs_lite.Block block = 1;
inline bool PutBlockRequest::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool PutBlockRequest::has_block() const {
  return _internal_has_block();
}
inline void PutBlockRequest::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::ipfs_lite::Block& PutBlockRequest::_internal_block() const {
  const ::ipfs_lite::Block* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ipfs_lite::Block*>(
      &::ipfs_lite::_Block_default_instance_);
}
inline const ::ipfs_lite::Block& PutBlockRequest::block() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.PutBlockRequest.block)
  return _internal_block();
}
inline ::ipfs_lite::Block* PutBlockRequest::release_block() {
  // @@protoc_insertion_point(field_release:ipfs_lite.PutBlockRequest.block)
  
  ::ipfs_lite::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::ipfs_lite::Block* PutBlockRequest::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipfs_lite::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::ipfs_lite::Block* PutBlockRequest::mutable_block() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.PutBlockRequest.block)
  return _internal_mutable_block();
}
inline void PutBlockRequest::set_allocated_block(::ipfs_lite::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.PutBlockRequest.block)
}

// -------------------------------------------------------------------

// PutBlockResponse

// -------------------------------------------------------------------

// PutBlocksRequest

// repeated .ipfs_lite.Block blocks = 1;
inline int PutBlocksRequest::_internal_blocks_size() const {
  return blocks_.size();
}
inline int PutBlocksRequest::blocks_size() const {
  return _internal_blocks_size();
}
inline void PutBlocksRequest::clear_blocks() {
  blocks_.Clear();
}
inline ::ipfs_lite::Block* PutBlocksRequest::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.PutBlocksRequest.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block >*
PutBlocksRequest::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ipfs_lite.PutBlocksRequest.blocks)
  return &blocks_;
}
inline const ::ipfs_lite::Block& PutBlocksRequest::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::ipfs_lite::Block& PutBlocksRequest::blocks(int index) const {
  // @@protoc_insertion_point(field_get:ipfs_lite.PutBlocksRequest.blocks)
  return _internal_blocks(index);
}
inline ::ipfs_lite::Block* PutBlocksRequest::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::ipfs_lite::Block* PutBlocksRequest::add_blocks() {
  // @@protoc_insertion_point(field_add:ipfs_lite.PutBlocksRequest.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs_lite::Block >&
PutBlocksRequest::blocks() const {
  // @@protoc_insertion_point(field_list:ipfs_lite.PutBlocksRequest.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// PutBlocksResponse

// -------------------------------------------------------------------

// AllKeysRequest

// -------------------------------------------------------------------

// AllKeysResponse

// string cid = 1;
inline void AllKeysResponse::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AllKeysResponse::cid() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.AllKeysResponse.cid)
  return _internal_cid();
}
inline void AllKeysResponse::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.AllKeysResponse.cid)
}
inline std::string* AllKeysResponse::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:ipfs_lite.AllKeysResponse.cid)
  return _internal_mutable_cid();
}
inline const std::string& AllKeysResponse::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void AllKeysResponse::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AllKeysResponse::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfs_lite.AllKeysResponse.cid)
}
inline void AllKeysResponse::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfs_lite.AllKeysResponse.cid)
}
inline void AllKeysResponse::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfs_lite.AllKeysResponse.cid)
}
inline std::string* AllKeysResponse::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AllKeysResponse::release_cid() {
  // @@protoc_insertion_point(field_release:ipfs_lite.AllKeysResponse.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AllKeysResponse::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.AllKeysResponse.cid)
}

// -------------------------------------------------------------------

// HashOnReadRequest

// bool hashOnRead = 1;
inline void HashOnReadRequest::clear_hashonread() {
  hashonread_ = false;
}
inline bool HashOnReadRequest::_internal_hashonread() const {
  return hashonread_;
}
inline bool HashOnReadRequest::hashonread() const {
  // @@protoc_insertion_point(field_get:ipfs_lite.HashOnReadRequest.hashOnRead)
  return _internal_hashonread();
}
inline void HashOnReadRequest::_internal_set_hashonread(bool value) {
  
  hashonread_ = value;
}
inline void HashOnReadRequest::set_hashonread(bool value) {
  _internal_set_hashonread(value);
  // @@protoc_insertion_point(field_set:ipfs_lite.HashOnReadRequest.hashOnRead)
}

// -------------------------------------------------------------------

// HashOnReadResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipfs_lite

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ipfs_5flite_2eproto
