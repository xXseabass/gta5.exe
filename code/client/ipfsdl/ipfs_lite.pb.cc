// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipfs_lite.proto

#include <StdInc.h>
#include "ipfs_lite.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ipfs_5flite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddParams_ipfs_5flite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ipfs_5flite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Block_ipfs_5flite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ipfs_5flite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Link_ipfs_5flite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ipfs_5flite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Node_ipfs_5flite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ipfs_5flite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeStat_ipfs_5flite_2eproto;
namespace ipfs_lite {
class AddParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddParams> _instance;
} _AddParams_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class LinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Link> _instance;
} _Link_default_instance_;
class NodeStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeStat> _instance;
} _NodeStat_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class AddFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFileRequest> _instance;
  const ::ipfs_lite::AddParams* addparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
} _AddFileRequest_default_instance_;
class AddFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFileResponse> _instance;
} _AddFileResponse_default_instance_;
class GetFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFileRequest> _instance;
} _GetFileRequest_default_instance_;
class GetFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFileResponse> _instance;
} _GetFileResponse_default_instance_;
class AddNodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNodeRequest> _instance;
} _AddNodeRequest_default_instance_;
class AddNodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNodeResponse> _instance;
} _AddNodeResponse_default_instance_;
class AddNodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNodesRequest> _instance;
} _AddNodesRequest_default_instance_;
class AddNodesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNodesResponse> _instance;
} _AddNodesResponse_default_instance_;
class GetNodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeRequest> _instance;
} _GetNodeRequest_default_instance_;
class GetNodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeResponse> _instance;
} _GetNodeResponse_default_instance_;
class GetNodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodesRequest> _instance;
} _GetNodesRequest_default_instance_;
class GetNodesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodesResponse> _instance;
  const ::ipfs_lite::Node* node_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
} _GetNodesResponse_default_instance_;
class RemoveNodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveNodeRequest> _instance;
} _RemoveNodeRequest_default_instance_;
class RemoveNodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveNodeResponse> _instance;
} _RemoveNodeResponse_default_instance_;
class RemoveNodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveNodesRequest> _instance;
} _RemoveNodesRequest_default_instance_;
class RemoveNodesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveNodesResponse> _instance;
} _RemoveNodesResponse_default_instance_;
class ResolveLinkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveLinkRequest> _instance;
} _ResolveLinkRequest_default_instance_;
class ResolveLinkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveLinkResponse> _instance;
} _ResolveLinkResponse_default_instance_;
class TreeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreeRequest> _instance;
} _TreeRequest_default_instance_;
class TreeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreeResponse> _instance;
} _TreeResponse_default_instance_;
class DeleteBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteBlockRequest> _instance;
} _DeleteBlockRequest_default_instance_;
class DeleteBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteBlockResponse> _instance;
} _DeleteBlockResponse_default_instance_;
class HasBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HasBlockRequest> _instance;
} _HasBlockRequest_default_instance_;
class HasBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HasBlockResponse> _instance;
} _HasBlockResponse_default_instance_;
class GetBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockRequest> _instance;
} _GetBlockRequest_default_instance_;
class GetBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockResponse> _instance;
} _GetBlockResponse_default_instance_;
class GetBlockSizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockSizeRequest> _instance;
} _GetBlockSizeRequest_default_instance_;
class GetBlockSizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockSizeResponse> _instance;
} _GetBlockSizeResponse_default_instance_;
class PutBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutBlockRequest> _instance;
} _PutBlockRequest_default_instance_;
class PutBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutBlockResponse> _instance;
} _PutBlockResponse_default_instance_;
class PutBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutBlocksRequest> _instance;
} _PutBlocksRequest_default_instance_;
class PutBlocksResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutBlocksResponse> _instance;
} _PutBlocksResponse_default_instance_;
class AllKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllKeysRequest> _instance;
} _AllKeysRequest_default_instance_;
class AllKeysResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllKeysResponse> _instance;
} _AllKeysResponse_default_instance_;
class HashOnReadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashOnReadRequest> _instance;
} _HashOnReadRequest_default_instance_;
class HashOnReadResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashOnReadResponse> _instance;
} _HashOnReadResponse_default_instance_;
}  // namespace ipfs_lite
static void InitDefaultsscc_info_AddFileRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AddFileRequest_default_instance_;
    new (ptr) ::ipfs_lite::AddFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AddFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddFileRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddFileRequest_ipfs_5flite_2eproto}, {
      &scc_info_AddParams_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_AddFileResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AddFileResponse_default_instance_;
    new (ptr) ::ipfs_lite::AddFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AddFileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddFileResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddFileResponse_ipfs_5flite_2eproto}, {
      &scc_info_Node_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_AddNodeRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AddNodeRequest_default_instance_;
    new (ptr) ::ipfs_lite::AddNodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AddNodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddNodeRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddNodeRequest_ipfs_5flite_2eproto}, {
      &scc_info_Block_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_AddNodeResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AddNodeResponse_default_instance_;
    new (ptr) ::ipfs_lite::AddNodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AddNodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddNodeResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddNodeResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_AddNodesRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AddNodesRequest_default_instance_;
    new (ptr) ::ipfs_lite::AddNodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AddNodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddNodesRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddNodesRequest_ipfs_5flite_2eproto}, {
      &scc_info_Block_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_AddNodesResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AddNodesResponse_default_instance_;
    new (ptr) ::ipfs_lite::AddNodesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AddNodesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddNodesResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddNodesResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_AddParams_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AddParams_default_instance_;
    new (ptr) ::ipfs_lite::AddParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AddParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddParams_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddParams_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_AllKeysRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AllKeysRequest_default_instance_;
    new (ptr) ::ipfs_lite::AllKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AllKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllKeysRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllKeysRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_AllKeysResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_AllKeysResponse_default_instance_;
    new (ptr) ::ipfs_lite::AllKeysResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::AllKeysResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllKeysResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllKeysResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_Block_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_Block_default_instance_;
    new (ptr) ::ipfs_lite::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Block_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Block_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_DeleteBlockRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_DeleteBlockRequest_default_instance_;
    new (ptr) ::ipfs_lite::DeleteBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::DeleteBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteBlockRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteBlockRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_DeleteBlockResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_DeleteBlockResponse_default_instance_;
    new (ptr) ::ipfs_lite::DeleteBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::DeleteBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteBlockResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteBlockResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetBlockRequest_default_instance_;
    new (ptr) ::ipfs_lite::GetBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetBlockResponse_default_instance_;
    new (ptr) ::ipfs_lite::GetBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBlockResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBlockResponse_ipfs_5flite_2eproto}, {
      &scc_info_Block_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_GetBlockSizeRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetBlockSizeRequest_default_instance_;
    new (ptr) ::ipfs_lite::GetBlockSizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetBlockSizeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockSizeRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockSizeRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockSizeResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetBlockSizeResponse_default_instance_;
    new (ptr) ::ipfs_lite::GetBlockSizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetBlockSizeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockSizeResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockSizeResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_GetFileRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetFileRequest_default_instance_;
    new (ptr) ::ipfs_lite::GetFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFileRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFileRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_GetFileResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetFileResponse_default_instance_;
    new (ptr) ::ipfs_lite::GetFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetFileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFileResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFileResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_GetNodeRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetNodeRequest_default_instance_;
    new (ptr) ::ipfs_lite::GetNodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetNodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNodeRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNodeRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_GetNodeResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetNodeResponse_default_instance_;
    new (ptr) ::ipfs_lite::GetNodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetNodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNodeResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNodeResponse_ipfs_5flite_2eproto}, {
      &scc_info_Node_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_GetNodesRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetNodesRequest_default_instance_;
    new (ptr) ::ipfs_lite::GetNodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetNodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNodesRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNodesRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_GetNodesResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_GetNodesResponse_default_instance_;
    new (ptr) ::ipfs_lite::GetNodesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::GetNodesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNodesResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNodesResponse_ipfs_5flite_2eproto}, {
      &scc_info_Node_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_HasBlockRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_HasBlockRequest_default_instance_;
    new (ptr) ::ipfs_lite::HasBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::HasBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HasBlockRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HasBlockRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_HasBlockResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_HasBlockResponse_default_instance_;
    new (ptr) ::ipfs_lite::HasBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::HasBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HasBlockResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HasBlockResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_HashOnReadRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_HashOnReadRequest_default_instance_;
    new (ptr) ::ipfs_lite::HashOnReadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::HashOnReadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashOnReadRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashOnReadRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_HashOnReadResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_HashOnReadResponse_default_instance_;
    new (ptr) ::ipfs_lite::HashOnReadResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::HashOnReadResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashOnReadResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashOnReadResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_Link_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_Link_default_instance_;
    new (ptr) ::ipfs_lite::Link();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::Link::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Link_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Link_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_Node_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_Node_default_instance_;
    new (ptr) ::ipfs_lite::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Node_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Node_ipfs_5flite_2eproto}, {
      &scc_info_Block_ipfs_5flite_2eproto.base,
      &scc_info_Link_ipfs_5flite_2eproto.base,
      &scc_info_NodeStat_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_NodeStat_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_NodeStat_default_instance_;
    new (ptr) ::ipfs_lite::NodeStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::NodeStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeStat_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeStat_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_PutBlockRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_PutBlockRequest_default_instance_;
    new (ptr) ::ipfs_lite::PutBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::PutBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutBlockRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutBlockRequest_ipfs_5flite_2eproto}, {
      &scc_info_Block_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_PutBlockResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_PutBlockResponse_default_instance_;
    new (ptr) ::ipfs_lite::PutBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::PutBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutBlockResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutBlockResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_PutBlocksRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_PutBlocksRequest_default_instance_;
    new (ptr) ::ipfs_lite::PutBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::PutBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutBlocksRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutBlocksRequest_ipfs_5flite_2eproto}, {
      &scc_info_Block_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_PutBlocksResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_PutBlocksResponse_default_instance_;
    new (ptr) ::ipfs_lite::PutBlocksResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::PutBlocksResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutBlocksResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutBlocksResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_RemoveNodeRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_RemoveNodeRequest_default_instance_;
    new (ptr) ::ipfs_lite::RemoveNodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::RemoveNodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveNodeRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveNodeRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_RemoveNodeResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_RemoveNodeResponse_default_instance_;
    new (ptr) ::ipfs_lite::RemoveNodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::RemoveNodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveNodeResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveNodeResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_RemoveNodesRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_RemoveNodesRequest_default_instance_;
    new (ptr) ::ipfs_lite::RemoveNodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::RemoveNodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveNodesRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveNodesRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_RemoveNodesResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_RemoveNodesResponse_default_instance_;
    new (ptr) ::ipfs_lite::RemoveNodesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::RemoveNodesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveNodesResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveNodesResponse_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_ResolveLinkRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_ResolveLinkRequest_default_instance_;
    new (ptr) ::ipfs_lite::ResolveLinkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::ResolveLinkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResolveLinkRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResolveLinkRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_ResolveLinkResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_ResolveLinkResponse_default_instance_;
    new (ptr) ::ipfs_lite::ResolveLinkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::ResolveLinkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolveLinkResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResolveLinkResponse_ipfs_5flite_2eproto}, {
      &scc_info_Link_ipfs_5flite_2eproto.base,}};

static void InitDefaultsscc_info_TreeRequest_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_TreeRequest_default_instance_;
    new (ptr) ::ipfs_lite::TreeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::TreeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TreeRequest_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TreeRequest_ipfs_5flite_2eproto}, {}};

static void InitDefaultsscc_info_TreeResponse_ipfs_5flite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipfs_lite::_TreeResponse_default_instance_;
    new (ptr) ::ipfs_lite::TreeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipfs_lite::TreeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TreeResponse_ipfs_5flite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TreeResponse_ipfs_5flite_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ipfs_5flite_2eproto[41];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ipfs_5flite_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ipfs_5flite_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ipfs_5flite_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddParams, layout_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddParams, chunker_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddParams, rawleaves_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddParams, hidden_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddParams, shared_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddParams, nocopy_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddParams, hashfun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Block, rawdata_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Block, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Link, name_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Link, size_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Link, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::NodeStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::NodeStat, hash_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::NodeStat, numlinks_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::NodeStat, blocksize_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::NodeStat, linkssize_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::NodeStat, datasize_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::NodeStat, cumulativesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Node, block_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Node, links_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Node, stat_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::Node, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddFileRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ipfs_lite::AddFileRequestDefaultTypeInternal, addparams_),
  offsetof(::ipfs_lite::AddFileRequestDefaultTypeInternal, chunk_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddFileRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddFileResponse, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetFileRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetFileResponse, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddNodeRequest, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddNodesRequest, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AddNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodeRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodeResponse, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodesRequest, cids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodesResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ipfs_lite::GetNodesResponseDefaultTypeInternal, node_),
  offsetof(::ipfs_lite::GetNodesResponseDefaultTypeInternal, error_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetNodesResponse, option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::RemoveNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::RemoveNodeRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::RemoveNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::RemoveNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::RemoveNodesRequest, cids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::RemoveNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::ResolveLinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::ResolveLinkRequest, nodecid_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::ResolveLinkRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::ResolveLinkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::ResolveLinkResponse, link_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::ResolveLinkResponse, remainingpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::TreeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::TreeRequest, nodecid_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::TreeRequest, path_),
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::TreeRequest, depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::TreeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::TreeResponse, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::DeleteBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::DeleteBlockRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::DeleteBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::HasBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::HasBlockRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::HasBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::HasBlockResponse, hasblock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetBlockRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetBlockResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetBlockSizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetBlockSizeRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetBlockSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::GetBlockSizeResponse, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::PutBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::PutBlockRequest, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::PutBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::PutBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::PutBlocksRequest, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::PutBlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AllKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AllKeysResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::AllKeysResponse, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::HashOnReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::HashOnReadRequest, hashonread_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ipfs_lite::HashOnReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ipfs_lite::AddParams)},
  { 12, -1, sizeof(::ipfs_lite::Block)},
  { 19, -1, sizeof(::ipfs_lite::Link)},
  { 27, -1, sizeof(::ipfs_lite::NodeStat)},
  { 38, -1, sizeof(::ipfs_lite::Node)},
  { 47, -1, sizeof(::ipfs_lite::AddFileRequest)},
  { 55, -1, sizeof(::ipfs_lite::AddFileResponse)},
  { 61, -1, sizeof(::ipfs_lite::GetFileRequest)},
  { 67, -1, sizeof(::ipfs_lite::GetFileResponse)},
  { 73, -1, sizeof(::ipfs_lite::AddNodeRequest)},
  { 79, -1, sizeof(::ipfs_lite::AddNodeResponse)},
  { 84, -1, sizeof(::ipfs_lite::AddNodesRequest)},
  { 90, -1, sizeof(::ipfs_lite::AddNodesResponse)},
  { 95, -1, sizeof(::ipfs_lite::GetNodeRequest)},
  { 101, -1, sizeof(::ipfs_lite::GetNodeResponse)},
  { 107, -1, sizeof(::ipfs_lite::GetNodesRequest)},
  { 113, -1, sizeof(::ipfs_lite::GetNodesResponse)},
  { 121, -1, sizeof(::ipfs_lite::RemoveNodeRequest)},
  { 127, -1, sizeof(::ipfs_lite::RemoveNodeResponse)},
  { 132, -1, sizeof(::ipfs_lite::RemoveNodesRequest)},
  { 138, -1, sizeof(::ipfs_lite::RemoveNodesResponse)},
  { 143, -1, sizeof(::ipfs_lite::ResolveLinkRequest)},
  { 150, -1, sizeof(::ipfs_lite::ResolveLinkResponse)},
  { 157, -1, sizeof(::ipfs_lite::TreeRequest)},
  { 165, -1, sizeof(::ipfs_lite::TreeResponse)},
  { 171, -1, sizeof(::ipfs_lite::DeleteBlockRequest)},
  { 177, -1, sizeof(::ipfs_lite::DeleteBlockResponse)},
  { 182, -1, sizeof(::ipfs_lite::HasBlockRequest)},
  { 188, -1, sizeof(::ipfs_lite::HasBlockResponse)},
  { 194, -1, sizeof(::ipfs_lite::GetBlockRequest)},
  { 200, -1, sizeof(::ipfs_lite::GetBlockResponse)},
  { 206, -1, sizeof(::ipfs_lite::GetBlockSizeRequest)},
  { 212, -1, sizeof(::ipfs_lite::GetBlockSizeResponse)},
  { 218, -1, sizeof(::ipfs_lite::PutBlockRequest)},
  { 224, -1, sizeof(::ipfs_lite::PutBlockResponse)},
  { 229, -1, sizeof(::ipfs_lite::PutBlocksRequest)},
  { 235, -1, sizeof(::ipfs_lite::PutBlocksResponse)},
  { 240, -1, sizeof(::ipfs_lite::AllKeysRequest)},
  { 245, -1, sizeof(::ipfs_lite::AllKeysResponse)},
  { 251, -1, sizeof(::ipfs_lite::HashOnReadRequest)},
  { 257, -1, sizeof(::ipfs_lite::HashOnReadResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AddParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_Link_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_NodeStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AddFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AddFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AddNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AddNodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AddNodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AddNodesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetNodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetNodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetNodesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_RemoveNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_RemoveNodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_RemoveNodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_RemoveNodesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_ResolveLinkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_ResolveLinkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_TreeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_TreeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_DeleteBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_DeleteBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_HasBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_HasBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetBlockSizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_GetBlockSizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_PutBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_PutBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_PutBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_PutBlocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AllKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_AllKeysResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_HashOnReadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ipfs_lite::_HashOnReadResponse_default_instance_),
};

const char descriptor_table_protodef_ipfs_5flite_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ipfs_lite.proto\022\tipfs_lite\"\200\001\n\tAddPara"
  "ms\022\016\n\006layout\030\001 \001(\t\022\017\n\007chunker\030\002 \001(\t\022\021\n\tr"
  "awLeaves\030\003 \001(\010\022\016\n\006hidden\030\004 \001(\010\022\016\n\006shared"
  "\030\005 \001(\010\022\016\n\006noCopy\030\006 \001(\010\022\017\n\007hashFun\030\007 \001(\t\""
  "%\n\005Block\022\017\n\007rawData\030\001 \001(\014\022\013\n\003cid\030\002 \001(\t\"/"
  "\n\004Link\022\014\n\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\003\022\013\n\003ci"
  "d\030\003 \001(\t\"z\n\010NodeStat\022\014\n\004hash\030\001 \001(\t\022\020\n\010num"
  "Links\030\002 \001(\005\022\021\n\tblockSize\030\003 \001(\005\022\021\n\tlinksS"
  "ize\030\004 \001(\005\022\020\n\010dataSize\030\005 \001(\005\022\026\n\016cumulativ"
  "eSize\030\006 \001(\005\"x\n\004Node\022\037\n\005block\030\001 \001(\0132\020.ipf"
  "s_lite.Block\022\036\n\005links\030\002 \003(\0132\017.ipfs_lite."
  "Link\022!\n\004stat\030\003 \001(\0132\023.ipfs_lite.NodeStat\022"
  "\014\n\004size\030\004 \001(\003\"W\n\016AddFileRequest\022)\n\taddPa"
  "rams\030\001 \001(\0132\024.ipfs_lite.AddParamsH\000\022\017\n\005ch"
  "unk\030\002 \001(\014H\000B\t\n\007payload\"0\n\017AddFileRespons"
  "e\022\035\n\004node\030\001 \001(\0132\017.ipfs_lite.Node\"\035\n\016GetF"
  "ileRequest\022\013\n\003cid\030\001 \001(\t\" \n\017GetFileRespon"
  "se\022\r\n\005chunk\030\001 \001(\014\"1\n\016AddNodeRequest\022\037\n\005b"
  "lock\030\001 \001(\0132\020.ipfs_lite.Block\"\021\n\017AddNodeR"
  "esponse\"3\n\017AddNodesRequest\022 \n\006blocks\030\001 \003"
  "(\0132\020.ipfs_lite.Block\"\022\n\020AddNodesResponse"
  "\"\035\n\016GetNodeRequest\022\013\n\003cid\030\001 \001(\t\"0\n\017GetNo"
  "deResponse\022\035\n\004node\030\001 \001(\0132\017.ipfs_lite.Nod"
  "e\"\037\n\017GetNodesRequest\022\014\n\004cids\030\001 \003(\t\"N\n\020Ge"
  "tNodesResponse\022\037\n\004node\030\001 \001(\0132\017.ipfs_lite"
  ".NodeH\000\022\017\n\005error\030\002 \001(\tH\000B\010\n\006option\" \n\021Re"
  "moveNodeRequest\022\013\n\003cid\030\001 \001(\t\"\024\n\022RemoveNo"
  "deResponse\"\"\n\022RemoveNodesRequest\022\014\n\004cids"
  "\030\001 \003(\t\"\025\n\023RemoveNodesResponse\"3\n\022Resolve"
  "LinkRequest\022\017\n\007nodeCid\030\001 \001(\t\022\014\n\004path\030\002 \003"
  "(\t\"K\n\023ResolveLinkResponse\022\035\n\004link\030\001 \001(\0132"
  "\017.ipfs_lite.Link\022\025\n\rremainingPath\030\002 \003(\t\""
  ";\n\013TreeRequest\022\017\n\007nodeCid\030\001 \001(\t\022\014\n\004path\030"
  "\002 \001(\t\022\r\n\005depth\030\003 \001(\005\"\035\n\014TreeResponse\022\r\n\005"
  "paths\030\001 \003(\t\"!\n\022DeleteBlockRequest\022\013\n\003cid"
  "\030\001 \001(\t\"\025\n\023DeleteBlockResponse\"\036\n\017HasBloc"
  "kRequest\022\013\n\003cid\030\001 \001(\t\"$\n\020HasBlockRespons"
  "e\022\020\n\010hasBlock\030\001 \001(\010\"\036\n\017GetBlockRequest\022\013"
  "\n\003cid\030\001 \001(\t\"3\n\020GetBlockResponse\022\037\n\005block"
  "\030\001 \001(\0132\020.ipfs_lite.Block\"\"\n\023GetBlockSize"
  "Request\022\013\n\003cid\030\001 \001(\t\"$\n\024GetBlockSizeResp"
  "onse\022\014\n\004size\030\001 \001(\005\"2\n\017PutBlockRequest\022\037\n"
  "\005block\030\001 \001(\0132\020.ipfs_lite.Block\"\022\n\020PutBlo"
  "ckResponse\"4\n\020PutBlocksRequest\022 \n\006blocks"
  "\030\001 \003(\0132\020.ipfs_lite.Block\"\023\n\021PutBlocksRes"
  "ponse\"\020\n\016AllKeysRequest\"\036\n\017AllKeysRespon"
  "se\022\013\n\003cid\030\001 \001(\t\"\'\n\021HashOnReadRequest\022\022\n\n"
  "hashOnRead\030\001 \001(\010\"\024\n\022HashOnReadResponse2\235"
  "\006\n\010IpfsLite\022D\n\007AddFile\022\031.ipfs_lite.AddFi"
  "leRequest\032\032.ipfs_lite.AddFileResponse\"\000("
  "\001\022D\n\007GetFile\022\031.ipfs_lite.GetFileRequest\032"
  "\032.ipfs_lite.GetFileResponse\"\0000\001\022E\n\010HasBl"
  "ock\022\032.ipfs_lite.HasBlockRequest\032\033.ipfs_l"
  "ite.HasBlockResponse\"\000\022B\n\007AddNode\022\031.ipfs"
  "_lite.AddNodeRequest\032\032.ipfs_lite.AddNode"
  "Response\"\000\022E\n\010AddNodes\022\032.ipfs_lite.AddNo"
  "desRequest\032\033.ipfs_lite.AddNodesResponse\""
  "\000\022B\n\007GetNode\022\031.ipfs_lite.GetNodeRequest\032"
  "\032.ipfs_lite.GetNodeResponse\"\000\022G\n\010GetNode"
  "s\022\032.ipfs_lite.GetNodesRequest\032\033.ipfs_lit"
  "e.GetNodesResponse\"\0000\001\022K\n\nRemoveNode\022\034.i"
  "pfs_lite.RemoveNodeRequest\032\035.ipfs_lite.R"
  "emoveNodeResponse\"\000\022N\n\013RemoveNodes\022\035.ipf"
  "s_lite.RemoveNodesRequest\032\036.ipfs_lite.Re"
  "moveNodesResponse\"\000\022N\n\013ResolveLink\022\035.ipf"
  "s_lite.ResolveLinkRequest\032\036.ipfs_lite.Re"
  "solveLinkResponse\"\000\0229\n\004Tree\022\026.ipfs_lite."
  "TreeRequest\032\027.ipfs_lite.TreeResponse\"\000B-"
  "\n\031io.textile.grpc_ipfs_liteB\010IpfsLiteP\001\242"
  "\002\003TTEb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ipfs_5flite_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ipfs_5flite_2eproto_sccs[41] = {
  &scc_info_AddFileRequest_ipfs_5flite_2eproto.base,
  &scc_info_AddFileResponse_ipfs_5flite_2eproto.base,
  &scc_info_AddNodeRequest_ipfs_5flite_2eproto.base,
  &scc_info_AddNodeResponse_ipfs_5flite_2eproto.base,
  &scc_info_AddNodesRequest_ipfs_5flite_2eproto.base,
  &scc_info_AddNodesResponse_ipfs_5flite_2eproto.base,
  &scc_info_AddParams_ipfs_5flite_2eproto.base,
  &scc_info_AllKeysRequest_ipfs_5flite_2eproto.base,
  &scc_info_AllKeysResponse_ipfs_5flite_2eproto.base,
  &scc_info_Block_ipfs_5flite_2eproto.base,
  &scc_info_DeleteBlockRequest_ipfs_5flite_2eproto.base,
  &scc_info_DeleteBlockResponse_ipfs_5flite_2eproto.base,
  &scc_info_GetBlockRequest_ipfs_5flite_2eproto.base,
  &scc_info_GetBlockResponse_ipfs_5flite_2eproto.base,
  &scc_info_GetBlockSizeRequest_ipfs_5flite_2eproto.base,
  &scc_info_GetBlockSizeResponse_ipfs_5flite_2eproto.base,
  &scc_info_GetFileRequest_ipfs_5flite_2eproto.base,
  &scc_info_GetFileResponse_ipfs_5flite_2eproto.base,
  &scc_info_GetNodeRequest_ipfs_5flite_2eproto.base,
  &scc_info_GetNodeResponse_ipfs_5flite_2eproto.base,
  &scc_info_GetNodesRequest_ipfs_5flite_2eproto.base,
  &scc_info_GetNodesResponse_ipfs_5flite_2eproto.base,
  &scc_info_HasBlockRequest_ipfs_5flite_2eproto.base,
  &scc_info_HasBlockResponse_ipfs_5flite_2eproto.base,
  &scc_info_HashOnReadRequest_ipfs_5flite_2eproto.base,
  &scc_info_HashOnReadResponse_ipfs_5flite_2eproto.base,
  &scc_info_Link_ipfs_5flite_2eproto.base,
  &scc_info_Node_ipfs_5flite_2eproto.base,
  &scc_info_NodeStat_ipfs_5flite_2eproto.base,
  &scc_info_PutBlockRequest_ipfs_5flite_2eproto.base,
  &scc_info_PutBlockResponse_ipfs_5flite_2eproto.base,
  &scc_info_PutBlocksRequest_ipfs_5flite_2eproto.base,
  &scc_info_PutBlocksResponse_ipfs_5flite_2eproto.base,
  &scc_info_RemoveNodeRequest_ipfs_5flite_2eproto.base,
  &scc_info_RemoveNodeResponse_ipfs_5flite_2eproto.base,
  &scc_info_RemoveNodesRequest_ipfs_5flite_2eproto.base,
  &scc_info_RemoveNodesResponse_ipfs_5flite_2eproto.base,
  &scc_info_ResolveLinkRequest_ipfs_5flite_2eproto.base,
  &scc_info_ResolveLinkResponse_ipfs_5flite_2eproto.base,
  &scc_info_TreeRequest_ipfs_5flite_2eproto.base,
  &scc_info_TreeResponse_ipfs_5flite_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ipfs_5flite_2eproto_once;
static bool descriptor_table_ipfs_5flite_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ipfs_5flite_2eproto = {
  &descriptor_table_ipfs_5flite_2eproto_initialized, descriptor_table_protodef_ipfs_5flite_2eproto, "ipfs_lite.proto", 2773,
  &descriptor_table_ipfs_5flite_2eproto_once, descriptor_table_ipfs_5flite_2eproto_sccs, descriptor_table_ipfs_5flite_2eproto_deps, 41, 0,
  schemas, file_default_instances, TableStruct_ipfs_5flite_2eproto::offsets,
  file_level_metadata_ipfs_5flite_2eproto, 41, file_level_enum_descriptors_ipfs_5flite_2eproto, file_level_service_descriptors_ipfs_5flite_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ipfs_5flite_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ipfs_5flite_2eproto), true);
namespace ipfs_lite {

// ===================================================================

void AddParams::InitAsDefaultInstance() {
}
class AddParams::_Internal {
 public:
};

AddParams::AddParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AddParams)
}
AddParams::AddParams(const AddParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_layout().empty()) {
    layout_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layout_);
  }
  chunker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunker().empty()) {
    chunker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chunker_);
  }
  hashfun_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hashfun().empty()) {
    hashfun_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hashfun_);
  }
  ::memcpy(&rawleaves_, &from.rawleaves_,
    static_cast<size_t>(reinterpret_cast<char*>(&nocopy_) -
    reinterpret_cast<char*>(&rawleaves_)) + sizeof(nocopy_));
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AddParams)
}

void AddParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddParams_ipfs_5flite_2eproto.base);
  layout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfun_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rawleaves_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nocopy_) -
      reinterpret_cast<char*>(&rawleaves_)) + sizeof(nocopy_));
}

AddParams::~AddParams() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AddParams)
  SharedDtor();
}

void AddParams::SharedDtor() {
  layout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfun_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddParams& AddParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddParams_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AddParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AddParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layout_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfun_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rawleaves_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nocopy_) -
      reinterpret_cast<char*>(&rawleaves_)) + sizeof(nocopy_));
  _internal_metadata_.Clear();
}

const char* AddParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string layout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_layout(), ptr, ctx, "ipfs_lite.AddParams.layout");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chunker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_chunker(), ptr, ctx, "ipfs_lite.AddParams.chunker");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rawLeaves = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rawleaves_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shared = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool noCopy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nocopy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hashFun = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_hashfun(), ptr, ctx, "ipfs_lite.AddParams.hashFun");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AddParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string layout = 1;
  if (this->layout().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layout().data(), static_cast<int>(this->_internal_layout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.AddParams.layout");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_layout(), target);
  }

  // string chunker = 2;
  if (this->chunker().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chunker().data(), static_cast<int>(this->_internal_chunker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.AddParams.chunker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chunker(), target);
  }

  // bool rawLeaves = 3;
  if (this->rawleaves() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_rawleaves(), target);
  }

  // bool hidden = 4;
  if (this->hidden() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hidden(), target);
  }

  // bool shared = 5;
  if (this->shared() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_shared(), target);
  }

  // bool noCopy = 6;
  if (this->nocopy() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_nocopy(), target);
  }

  // string hashFun = 7;
  if (this->hashfun().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hashfun().data(), static_cast<int>(this->_internal_hashfun().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.AddParams.hashFun");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hashfun(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AddParams)
  return target;
}

size_t AddParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AddParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string layout = 1;
  if (this->layout().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_layout());
  }

  // string chunker = 2;
  if (this->chunker().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chunker());
  }

  // string hashFun = 7;
  if (this->hashfun().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashfun());
  }

  // bool rawLeaves = 3;
  if (this->rawleaves() != 0) {
    total_size += 1 + 1;
  }

  // bool hidden = 4;
  if (this->hidden() != 0) {
    total_size += 1 + 1;
  }

  // bool shared = 5;
  if (this->shared() != 0) {
    total_size += 1 + 1;
  }

  // bool noCopy = 6;
  if (this->nocopy() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AddParams)
  GOOGLE_DCHECK_NE(&from, this);
  const AddParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AddParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AddParams)
    MergeFrom(*source);
  }
}

void AddParams::MergeFrom(const AddParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AddParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.layout().size() > 0) {

    layout_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layout_);
  }
  if (from.chunker().size() > 0) {

    chunker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chunker_);
  }
  if (from.hashfun().size() > 0) {

    hashfun_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hashfun_);
  }
  if (from.rawleaves() != 0) {
    _internal_set_rawleaves(from._internal_rawleaves());
  }
  if (from.hidden() != 0) {
    _internal_set_hidden(from._internal_hidden());
  }
  if (from.shared() != 0) {
    _internal_set_shared(from._internal_shared());
  }
  if (from.nocopy() != 0) {
    _internal_set_nocopy(from._internal_nocopy());
  }
}

void AddParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AddParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddParams::CopyFrom(const AddParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AddParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddParams::IsInitialized() const {
  return true;
}

void AddParams::InternalSwap(AddParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  layout_.Swap(&other->layout_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chunker_.Swap(&other->chunker_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashfun_.Swap(&other->hashfun_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rawleaves_, other->rawleaves_);
  swap(hidden_, other->hidden_);
  swap(shared_, other->shared_);
  swap(nocopy_, other->nocopy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Block::InitAsDefaultInstance() {
}
class Block::_Internal {
 public:
};

Block::Block()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rawdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rawdata().empty()) {
    rawdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_ipfs_5flite_2eproto.base);
  rawdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:ipfs_lite.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  rawdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rawdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes rawData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_rawdata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.Block.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rawData = 1;
  if (this->rawdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rawdata(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.Block.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rawData = 1;
  if (this->rawdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rawdata());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rawdata().size() > 0) {

    rawdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rawdata_.Swap(&other->rawdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Link::InitAsDefaultInstance() {
}
class Link::_Internal {
 public:
};

Link::Link()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.Link)
}

void Link::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Link_ipfs_5flite_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_LONGLONG(0);
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:ipfs_lite.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Link& Link::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Link_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "ipfs_lite.Link.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.Link.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Link::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.Link.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 size = 2;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // string cid = 3;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.Link.cid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.Link)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cid = 3;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // int64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Link::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Link* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Link>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.Link)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void Link::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeStat::InitAsDefaultInstance() {
}
class NodeStat::_Internal {
 public:
};

NodeStat::NodeStat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.NodeStat)
}
NodeStat::NodeStat(const NodeStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  ::memcpy(&numlinks_, &from.numlinks_,
    static_cast<size_t>(reinterpret_cast<char*>(&cumulativesize_) -
    reinterpret_cast<char*>(&numlinks_)) + sizeof(cumulativesize_));
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.NodeStat)
}

void NodeStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeStat_ipfs_5flite_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&numlinks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cumulativesize_) -
      reinterpret_cast<char*>(&numlinks_)) + sizeof(cumulativesize_));
}

NodeStat::~NodeStat() {
  // @@protoc_insertion_point(destructor:ipfs_lite.NodeStat)
  SharedDtor();
}

void NodeStat::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeStat& NodeStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeStat_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void NodeStat::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.NodeStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&numlinks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cumulativesize_) -
      reinterpret_cast<char*>(&numlinks_)) + sizeof(cumulativesize_));
  _internal_metadata_.Clear();
}

const char* NodeStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_hash(), ptr, ctx, "ipfs_lite.NodeStat.hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numLinks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numlinks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blockSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 linksSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          linkssize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dataSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cumulativeSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cumulativesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeStat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.NodeStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.NodeStat.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int32 numLinks = 2;
  if (this->numlinks() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_numlinks(), target);
  }

  // int32 blockSize = 3;
  if (this->blocksize() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_blocksize(), target);
  }

  // int32 linksSize = 4;
  if (this->linkssize() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_linkssize(), target);
  }

  // int32 dataSize = 5;
  if (this->datasize() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_datasize(), target);
  }

  // int32 cumulativeSize = 6;
  if (this->cumulativesize() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cumulativesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.NodeStat)
  return target;
}

size_t NodeStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.NodeStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // int32 numLinks = 2;
  if (this->numlinks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numlinks());
  }

  // int32 blockSize = 3;
  if (this->blocksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blocksize());
  }

  // int32 linksSize = 4;
  if (this->linkssize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_linkssize());
  }

  // int32 dataSize = 5;
  if (this->datasize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_datasize());
  }

  // int32 cumulativeSize = 6;
  if (this->cumulativesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cumulativesize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.NodeStat)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.NodeStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.NodeStat)
    MergeFrom(*source);
  }
}

void NodeStat::MergeFrom(const NodeStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.NodeStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.numlinks() != 0) {
    _internal_set_numlinks(from._internal_numlinks());
  }
  if (from.blocksize() != 0) {
    _internal_set_blocksize(from._internal_blocksize());
  }
  if (from.linkssize() != 0) {
    _internal_set_linkssize(from._internal_linkssize());
  }
  if (from.datasize() != 0) {
    _internal_set_datasize(from._internal_datasize());
  }
  if (from.cumulativesize() != 0) {
    _internal_set_cumulativesize(from._internal_cumulativesize());
  }
}

void NodeStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.NodeStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStat::CopyFrom(const NodeStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.NodeStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStat::IsInitialized() const {
  return true;
}

void NodeStat::InternalSwap(NodeStat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(numlinks_, other->numlinks_);
  swap(blocksize_, other->blocksize_);
  swap(linkssize_, other->linkssize_);
  swap(datasize_, other->datasize_);
  swap(cumulativesize_, other->cumulativesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::ipfs_lite::_Node_default_instance_._instance.get_mutable()->block_ = const_cast< ::ipfs_lite::Block*>(
      ::ipfs_lite::Block::internal_default_instance());
  ::ipfs_lite::_Node_default_instance_._instance.get_mutable()->stat_ = const_cast< ::ipfs_lite::NodeStat*>(
      ::ipfs_lite::NodeStat::internal_default_instance());
}
class Node::_Internal {
 public:
  static const ::ipfs_lite::Block& block(const Node* msg);
  static const ::ipfs_lite::NodeStat& stat(const Node* msg);
};

const ::ipfs_lite::Block&
Node::_Internal::block(const Node* msg) {
  return *msg->block_;
}
const ::ipfs_lite::NodeStat&
Node::_Internal::stat(const Node* msg) {
  return *msg->stat_;
}
Node::Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::ipfs_lite::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_stat()) {
    stat_ = new ::ipfs_lite::NodeStat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_ipfs_5flite_2eproto.base);
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&block_)) + sizeof(size_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:ipfs_lite.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete stat_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
  size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ipfs_lite.Link links = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .ipfs_lite.NodeStat stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.Block block = 1;
  if (this->has_block()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::block(this), target, stream);
  }

  // repeated .ipfs_lite.Link links = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_links(i), target, stream);
  }

  // .ipfs_lite.NodeStat stat = 3;
  if (this->has_stat()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::stat(this), target, stream);
  }

  // int64 size = 4;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ipfs_lite.Link links = 2;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ipfs_lite.Block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .ipfs_lite.NodeStat stat = 3;
  if (this->has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stat_);
  }

  // int64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from.has_block()) {
    _internal_mutable_block()->::ipfs_lite::Block::MergeFrom(from._internal_block());
  }
  if (from.has_stat()) {
    _internal_mutable_stat()->::ipfs_lite::NodeStat::MergeFrom(from._internal_stat());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  links_.InternalSwap(&other->links_);
  swap(block_, other->block_);
  swap(stat_, other->stat_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFileRequest::InitAsDefaultInstance() {
  ::ipfs_lite::_AddFileRequest_default_instance_.addparams_ = const_cast< ::ipfs_lite::AddParams*>(
      ::ipfs_lite::AddParams::internal_default_instance());
  ::ipfs_lite::_AddFileRequest_default_instance_.chunk_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class AddFileRequest::_Internal {
 public:
  static const ::ipfs_lite::AddParams& addparams(const AddFileRequest* msg);
};

const ::ipfs_lite::AddParams&
AddFileRequest::_Internal::addparams(const AddFileRequest* msg) {
  return *msg->payload_.addparams_;
}
void AddFileRequest::set_allocated_addparams(::ipfs_lite::AddParams* addparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (addparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      addparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addparams, submessage_arena);
    }
    set_has_addparams();
    payload_.addparams_ = addparams;
  }
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.AddFileRequest.addParams)
}
AddFileRequest::AddFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AddFileRequest)
}
AddFileRequest::AddFileRequest(const AddFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kAddParams: {
      _internal_mutable_addparams()->::ipfs_lite::AddParams::MergeFrom(from._internal_addparams());
      break;
    }
    case kChunk: {
      _internal_set_chunk(from._internal_chunk());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AddFileRequest)
}

void AddFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFileRequest_ipfs_5flite_2eproto.base);
  clear_has_payload();
}

AddFileRequest::~AddFileRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AddFileRequest)
  SharedDtor();
}

void AddFileRequest::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void AddFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFileRequest& AddFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFileRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AddFileRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:ipfs_lite.AddFileRequest)
  switch (payload_case()) {
    case kAddParams: {
      delete payload_.addparams_;
      break;
    }
    case kChunk: {
      payload_.chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void AddFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AddFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

const char* AddFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.AddParams addParams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_addparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_chunk(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFileRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AddFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.AddParams addParams = 1;
  if (_internal_has_addparams()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::addparams(this), target, stream);
  }

  // bytes chunk = 2;
  if (_internal_has_chunk()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AddFileRequest)
  return target;
}

size_t AddFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AddFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .ipfs_lite.AddParams addParams = 1;
    case kAddParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.addparams_);
      break;
    }
    // bytes chunk = 2;
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AddFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AddFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AddFileRequest)
    MergeFrom(*source);
  }
}

void AddFileRequest::MergeFrom(const AddFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AddFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kAddParams: {
      _internal_mutable_addparams()->::ipfs_lite::AddParams::MergeFrom(from._internal_addparams());
      break;
    }
    case kChunk: {
      _internal_set_chunk(from._internal_chunk());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void AddFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AddFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFileRequest::CopyFrom(const AddFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AddFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFileRequest::IsInitialized() const {
  return true;
}

void AddFileRequest::InternalSwap(AddFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFileResponse::InitAsDefaultInstance() {
  ::ipfs_lite::_AddFileResponse_default_instance_._instance.get_mutable()->node_ = const_cast< ::ipfs_lite::Node*>(
      ::ipfs_lite::Node::internal_default_instance());
}
class AddFileResponse::_Internal {
 public:
  static const ::ipfs_lite::Node& node(const AddFileResponse* msg);
};

const ::ipfs_lite::Node&
AddFileResponse::_Internal::node(const AddFileResponse* msg) {
  return *msg->node_;
}
AddFileResponse::AddFileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AddFileResponse)
}
AddFileResponse::AddFileResponse(const AddFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::ipfs_lite::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AddFileResponse)
}

void AddFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFileResponse_ipfs_5flite_2eproto.base);
  node_ = nullptr;
}

AddFileResponse::~AddFileResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AddFileResponse)
  SharedDtor();
}

void AddFileResponse::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void AddFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFileResponse& AddFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFileResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AddFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AddFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFileResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AddFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.Node node = 1;
  if (this->has_node()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AddFileResponse)
  return target;
}

size_t AddFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AddFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ipfs_lite.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AddFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AddFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AddFileResponse)
    MergeFrom(*source);
  }
}

void AddFileResponse::MergeFrom(const AddFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AddFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    _internal_mutable_node()->::ipfs_lite::Node::MergeFrom(from._internal_node());
  }
}

void AddFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AddFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFileResponse::CopyFrom(const AddFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AddFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFileResponse::IsInitialized() const {
  return true;
}

void AddFileResponse::InternalSwap(AddFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFileRequest::InitAsDefaultInstance() {
}
class GetFileRequest::_Internal {
 public:
};

GetFileRequest::GetFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetFileRequest)
}
GetFileRequest::GetFileRequest(const GetFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetFileRequest)
}

void GetFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFileRequest_ipfs_5flite_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetFileRequest::~GetFileRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetFileRequest)
  SharedDtor();
}

void GetFileRequest::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileRequest& GetFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFileRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.GetFileRequest.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.GetFileRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetFileRequest)
  return target;
}

size_t GetFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetFileRequest)
    MergeFrom(*source);
  }
}

void GetFileRequest::MergeFrom(const GetFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void GetFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileRequest::CopyFrom(const GetFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileRequest::IsInitialized() const {
  return true;
}

void GetFileRequest::InternalSwap(GetFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFileResponse::InitAsDefaultInstance() {
}
class GetFileResponse::_Internal {
 public:
};

GetFileResponse::GetFileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetFileResponse)
}
GetFileResponse::GetFileResponse(const GetFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunk().empty()) {
    chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chunk_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetFileResponse)
}

void GetFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFileResponse_ipfs_5flite_2eproto.base);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetFileResponse::~GetFileResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetFileResponse)
  SharedDtor();
}

void GetFileResponse::SharedDtor() {
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileResponse& GetFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFileResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_chunk(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetFileResponse)
  return target;
}

size_t GetFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetFileResponse)
    MergeFrom(*source);
  }
}

void GetFileResponse::MergeFrom(const GetFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk().size() > 0) {

    chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chunk_);
  }
}

void GetFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileResponse::CopyFrom(const GetFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileResponse::IsInitialized() const {
  return true;
}

void GetFileResponse::InternalSwap(GetFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chunk_.Swap(&other->chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddNodeRequest::InitAsDefaultInstance() {
  ::ipfs_lite::_AddNodeRequest_default_instance_._instance.get_mutable()->block_ = const_cast< ::ipfs_lite::Block*>(
      ::ipfs_lite::Block::internal_default_instance());
}
class AddNodeRequest::_Internal {
 public:
  static const ::ipfs_lite::Block& block(const AddNodeRequest* msg);
};

const ::ipfs_lite::Block&
AddNodeRequest::_Internal::block(const AddNodeRequest* msg) {
  return *msg->block_;
}
AddNodeRequest::AddNodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AddNodeRequest)
}
AddNodeRequest::AddNodeRequest(const AddNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::ipfs_lite::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AddNodeRequest)
}

void AddNodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddNodeRequest_ipfs_5flite_2eproto.base);
  block_ = nullptr;
}

AddNodeRequest::~AddNodeRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AddNodeRequest)
  SharedDtor();
}

void AddNodeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void AddNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNodeRequest& AddNodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNodeRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AddNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AddNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNodeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AddNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.Block block = 1;
  if (this->has_block()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AddNodeRequest)
  return target;
}

size_t AddNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AddNodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ipfs_lite.Block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AddNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AddNodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AddNodeRequest)
    MergeFrom(*source);
  }
}

void AddNodeRequest::MergeFrom(const AddNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AddNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::ipfs_lite::Block::MergeFrom(from._internal_block());
  }
}

void AddNodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AddNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNodeRequest::CopyFrom(const AddNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AddNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNodeRequest::IsInitialized() const {
  return true;
}

void AddNodeRequest::InternalSwap(AddNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddNodeResponse::InitAsDefaultInstance() {
}
class AddNodeResponse::_Internal {
 public:
};

AddNodeResponse::AddNodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AddNodeResponse)
}
AddNodeResponse::AddNodeResponse(const AddNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AddNodeResponse)
}

void AddNodeResponse::SharedCtor() {
}

AddNodeResponse::~AddNodeResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AddNodeResponse)
  SharedDtor();
}

void AddNodeResponse::SharedDtor() {
}

void AddNodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNodeResponse& AddNodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNodeResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AddNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AddNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AddNodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNodeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AddNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AddNodeResponse)
  return target;
}

size_t AddNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AddNodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AddNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AddNodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AddNodeResponse)
    MergeFrom(*source);
  }
}

void AddNodeResponse::MergeFrom(const AddNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AddNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddNodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AddNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNodeResponse::CopyFrom(const AddNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AddNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNodeResponse::IsInitialized() const {
  return true;
}

void AddNodeResponse::InternalSwap(AddNodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddNodesRequest::InitAsDefaultInstance() {
}
class AddNodesRequest::_Internal {
 public:
};

AddNodesRequest::AddNodesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AddNodesRequest)
}
AddNodesRequest::AddNodesRequest(const AddNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AddNodesRequest)
}

void AddNodesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddNodesRequest_ipfs_5flite_2eproto.base);
}

AddNodesRequest::~AddNodesRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AddNodesRequest)
  SharedDtor();
}

void AddNodesRequest::SharedDtor() {
}

void AddNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNodesRequest& AddNodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNodesRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AddNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AddNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  _internal_metadata_.Clear();
}

const char* AddNodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ipfs_lite.Block blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNodesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AddNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ipfs_lite.Block blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AddNodesRequest)
  return target;
}

size_t AddNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AddNodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ipfs_lite.Block blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AddNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AddNodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AddNodesRequest)
    MergeFrom(*source);
  }
}

void AddNodesRequest::MergeFrom(const AddNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AddNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
}

void AddNodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AddNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNodesRequest::CopyFrom(const AddNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AddNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNodesRequest::IsInitialized() const {
  return true;
}

void AddNodesRequest::InternalSwap(AddNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddNodesResponse::InitAsDefaultInstance() {
}
class AddNodesResponse::_Internal {
 public:
};

AddNodesResponse::AddNodesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AddNodesResponse)
}
AddNodesResponse::AddNodesResponse(const AddNodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AddNodesResponse)
}

void AddNodesResponse::SharedCtor() {
}

AddNodesResponse::~AddNodesResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AddNodesResponse)
  SharedDtor();
}

void AddNodesResponse::SharedDtor() {
}

void AddNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNodesResponse& AddNodesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNodesResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AddNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AddNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AddNodesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNodesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AddNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AddNodesResponse)
  return target;
}

size_t AddNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AddNodesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNodesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AddNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNodesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNodesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AddNodesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AddNodesResponse)
    MergeFrom(*source);
  }
}

void AddNodesResponse::MergeFrom(const AddNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AddNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddNodesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AddNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNodesResponse::CopyFrom(const AddNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AddNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNodesResponse::IsInitialized() const {
  return true;
}

void AddNodesResponse::InternalSwap(AddNodesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNodesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodeRequest::InitAsDefaultInstance() {
}
class GetNodeRequest::_Internal {
 public:
};

GetNodeRequest::GetNodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetNodeRequest)
}
GetNodeRequest::GetNodeRequest(const GetNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetNodeRequest)
}

void GetNodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeRequest_ipfs_5flite_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNodeRequest::~GetNodeRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetNodeRequest)
  SharedDtor();
}

void GetNodeRequest::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeRequest& GetNodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.GetNodeRequest.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.GetNodeRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetNodeRequest)
  return target;
}

size_t GetNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetNodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetNodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetNodeRequest)
    MergeFrom(*source);
  }
}

void GetNodeRequest::MergeFrom(const GetNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void GetNodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeRequest::CopyFrom(const GetNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeRequest::IsInitialized() const {
  return true;
}

void GetNodeRequest::InternalSwap(GetNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodeResponse::InitAsDefaultInstance() {
  ::ipfs_lite::_GetNodeResponse_default_instance_._instance.get_mutable()->node_ = const_cast< ::ipfs_lite::Node*>(
      ::ipfs_lite::Node::internal_default_instance());
}
class GetNodeResponse::_Internal {
 public:
  static const ::ipfs_lite::Node& node(const GetNodeResponse* msg);
};

const ::ipfs_lite::Node&
GetNodeResponse::_Internal::node(const GetNodeResponse* msg) {
  return *msg->node_;
}
GetNodeResponse::GetNodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetNodeResponse)
}
GetNodeResponse::GetNodeResponse(const GetNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::ipfs_lite::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetNodeResponse)
}

void GetNodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeResponse_ipfs_5flite_2eproto.base);
  node_ = nullptr;
}

GetNodeResponse::~GetNodeResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetNodeResponse)
  SharedDtor();
}

void GetNodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void GetNodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeResponse& GetNodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetNodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.Node node = 1;
  if (this->has_node()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetNodeResponse)
  return target;
}

size_t GetNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetNodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ipfs_lite.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetNodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetNodeResponse)
    MergeFrom(*source);
  }
}

void GetNodeResponse::MergeFrom(const GetNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    _internal_mutable_node()->::ipfs_lite::Node::MergeFrom(from._internal_node());
  }
}

void GetNodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeResponse::CopyFrom(const GetNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeResponse::IsInitialized() const {
  return true;
}

void GetNodeResponse::InternalSwap(GetNodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodesRequest::InitAsDefaultInstance() {
}
class GetNodesRequest::_Internal {
 public:
};

GetNodesRequest::GetNodesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetNodesRequest)
}
GetNodesRequest::GetNodesRequest(const GetNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cids_(from.cids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetNodesRequest)
}

void GetNodesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodesRequest_ipfs_5flite_2eproto.base);
}

GetNodesRequest::~GetNodesRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetNodesRequest)
  SharedDtor();
}

void GetNodesRequest::SharedDtor() {
}

void GetNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodesRequest& GetNodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodesRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetNodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string cids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_cids(), ptr, ctx, "ipfs_lite.GetNodesRequest.cids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cids = 1;
  for (int i = 0, n = this->_internal_cids_size(); i < n; i++) {
    const auto& s = this->_internal_cids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.GetNodesRequest.cids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetNodesRequest)
  return target;
}

size_t GetNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetNodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cids_.size());
  for (int i = 0, n = cids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetNodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetNodesRequest)
    MergeFrom(*source);
  }
}

void GetNodesRequest::MergeFrom(const GetNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cids_.MergeFrom(from.cids_);
}

void GetNodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodesRequest::CopyFrom(const GetNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodesRequest::IsInitialized() const {
  return true;
}

void GetNodesRequest::InternalSwap(GetNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cids_.InternalSwap(&other->cids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodesResponse::InitAsDefaultInstance() {
  ::ipfs_lite::_GetNodesResponse_default_instance_.node_ = const_cast< ::ipfs_lite::Node*>(
      ::ipfs_lite::Node::internal_default_instance());
  ::ipfs_lite::_GetNodesResponse_default_instance_.error_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class GetNodesResponse::_Internal {
 public:
  static const ::ipfs_lite::Node& node(const GetNodesResponse* msg);
};

const ::ipfs_lite::Node&
GetNodesResponse::_Internal::node(const GetNodesResponse* msg) {
  return *msg->option_.node_;
}
void GetNodesResponse::set_allocated_node(::ipfs_lite::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_option();
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    option_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:ipfs_lite.GetNodesResponse.node)
}
GetNodesResponse::GetNodesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetNodesResponse)
}
GetNodesResponse::GetNodesResponse(const GetNodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_option();
  switch (from.option_case()) {
    case kNode: {
      _internal_mutable_node()->::ipfs_lite::Node::MergeFrom(from._internal_node());
      break;
    }
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetNodesResponse)
}

void GetNodesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodesResponse_ipfs_5flite_2eproto.base);
  clear_has_option();
}

GetNodesResponse::~GetNodesResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetNodesResponse)
  SharedDtor();
}

void GetNodesResponse::SharedDtor() {
  if (has_option()) {
    clear_option();
  }
}

void GetNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodesResponse& GetNodesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodesResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetNodesResponse::clear_option() {
// @@protoc_insertion_point(one_of_clear_start:ipfs_lite.GetNodesResponse)
  switch (option_case()) {
    case kNode: {
      delete option_.node_;
      break;
    }
    case kError: {
      option_.error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void GetNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_option();
  _internal_metadata_.Clear();
}

const char* GetNodesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_error(), ptr, ctx, "ipfs_lite.GetNodesResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.Node node = 1;
  if (_internal_has_node()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::node(this), target, stream);
  }

  // string error = 2;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.GetNodesResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetNodesResponse)
  return target;
}

size_t GetNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetNodesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (option_case()) {
    // .ipfs_lite.Node node = 1;
    case kNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *option_.node_);
      break;
    }
    // string error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetNodesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetNodesResponse)
    MergeFrom(*source);
  }
}

void GetNodesResponse::MergeFrom(const GetNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.option_case()) {
    case kNode: {
      _internal_mutable_node()->::ipfs_lite::Node::MergeFrom(from._internal_node());
      break;
    }
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void GetNodesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodesResponse::CopyFrom(const GetNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodesResponse::IsInitialized() const {
  return true;
}

void GetNodesResponse::InternalSwap(GetNodesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(option_, other->option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveNodeRequest::InitAsDefaultInstance() {
}
class RemoveNodeRequest::_Internal {
 public:
};

RemoveNodeRequest::RemoveNodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.RemoveNodeRequest)
}
RemoveNodeRequest::RemoveNodeRequest(const RemoveNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.RemoveNodeRequest)
}

void RemoveNodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveNodeRequest_ipfs_5flite_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveNodeRequest::~RemoveNodeRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.RemoveNodeRequest)
  SharedDtor();
}

void RemoveNodeRequest::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveNodeRequest& RemoveNodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveNodeRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void RemoveNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.RemoveNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RemoveNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.RemoveNodeRequest.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveNodeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.RemoveNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.RemoveNodeRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.RemoveNodeRequest)
  return target;
}

size_t RemoveNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.RemoveNodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveNodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.RemoveNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveNodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.RemoveNodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.RemoveNodeRequest)
    MergeFrom(*source);
  }
}

void RemoveNodeRequest::MergeFrom(const RemoveNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.RemoveNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void RemoveNodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.RemoveNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveNodeRequest::CopyFrom(const RemoveNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.RemoveNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveNodeRequest::IsInitialized() const {
  return true;
}

void RemoveNodeRequest::InternalSwap(RemoveNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveNodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveNodeResponse::InitAsDefaultInstance() {
}
class RemoveNodeResponse::_Internal {
 public:
};

RemoveNodeResponse::RemoveNodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.RemoveNodeResponse)
}
RemoveNodeResponse::RemoveNodeResponse(const RemoveNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.RemoveNodeResponse)
}

void RemoveNodeResponse::SharedCtor() {
}

RemoveNodeResponse::~RemoveNodeResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.RemoveNodeResponse)
  SharedDtor();
}

void RemoveNodeResponse::SharedDtor() {
}

void RemoveNodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveNodeResponse& RemoveNodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveNodeResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void RemoveNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.RemoveNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* RemoveNodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveNodeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.RemoveNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.RemoveNodeResponse)
  return target;
}

size_t RemoveNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.RemoveNodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveNodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.RemoveNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveNodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveNodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.RemoveNodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.RemoveNodeResponse)
    MergeFrom(*source);
  }
}

void RemoveNodeResponse::MergeFrom(const RemoveNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.RemoveNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveNodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.RemoveNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveNodeResponse::CopyFrom(const RemoveNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.RemoveNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveNodeResponse::IsInitialized() const {
  return true;
}

void RemoveNodeResponse::InternalSwap(RemoveNodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveNodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveNodesRequest::InitAsDefaultInstance() {
}
class RemoveNodesRequest::_Internal {
 public:
};

RemoveNodesRequest::RemoveNodesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.RemoveNodesRequest)
}
RemoveNodesRequest::RemoveNodesRequest(const RemoveNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cids_(from.cids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.RemoveNodesRequest)
}

void RemoveNodesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveNodesRequest_ipfs_5flite_2eproto.base);
}

RemoveNodesRequest::~RemoveNodesRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.RemoveNodesRequest)
  SharedDtor();
}

void RemoveNodesRequest::SharedDtor() {
}

void RemoveNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveNodesRequest& RemoveNodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveNodesRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void RemoveNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.RemoveNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cids_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveNodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string cids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_cids(), ptr, ctx, "ipfs_lite.RemoveNodesRequest.cids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveNodesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.RemoveNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cids = 1;
  for (int i = 0, n = this->_internal_cids_size(); i < n; i++) {
    const auto& s = this->_internal_cids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.RemoveNodesRequest.cids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.RemoveNodesRequest)
  return target;
}

size_t RemoveNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.RemoveNodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cids_.size());
  for (int i = 0, n = cids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveNodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.RemoveNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveNodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.RemoveNodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.RemoveNodesRequest)
    MergeFrom(*source);
  }
}

void RemoveNodesRequest::MergeFrom(const RemoveNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.RemoveNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cids_.MergeFrom(from.cids_);
}

void RemoveNodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.RemoveNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveNodesRequest::CopyFrom(const RemoveNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.RemoveNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveNodesRequest::IsInitialized() const {
  return true;
}

void RemoveNodesRequest::InternalSwap(RemoveNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cids_.InternalSwap(&other->cids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveNodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveNodesResponse::InitAsDefaultInstance() {
}
class RemoveNodesResponse::_Internal {
 public:
};

RemoveNodesResponse::RemoveNodesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.RemoveNodesResponse)
}
RemoveNodesResponse::RemoveNodesResponse(const RemoveNodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.RemoveNodesResponse)
}

void RemoveNodesResponse::SharedCtor() {
}

RemoveNodesResponse::~RemoveNodesResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.RemoveNodesResponse)
  SharedDtor();
}

void RemoveNodesResponse::SharedDtor() {
}

void RemoveNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveNodesResponse& RemoveNodesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveNodesResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void RemoveNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.RemoveNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* RemoveNodesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveNodesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.RemoveNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.RemoveNodesResponse)
  return target;
}

size_t RemoveNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.RemoveNodesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveNodesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.RemoveNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveNodesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveNodesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.RemoveNodesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.RemoveNodesResponse)
    MergeFrom(*source);
  }
}

void RemoveNodesResponse::MergeFrom(const RemoveNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.RemoveNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveNodesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.RemoveNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveNodesResponse::CopyFrom(const RemoveNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.RemoveNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveNodesResponse::IsInitialized() const {
  return true;
}

void RemoveNodesResponse::InternalSwap(RemoveNodesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveNodesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolveLinkRequest::InitAsDefaultInstance() {
}
class ResolveLinkRequest::_Internal {
 public:
};

ResolveLinkRequest::ResolveLinkRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.ResolveLinkRequest)
}
ResolveLinkRequest::ResolveLinkRequest(const ResolveLinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      path_(from.path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodecid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodecid().empty()) {
    nodecid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodecid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.ResolveLinkRequest)
}

void ResolveLinkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveLinkRequest_ipfs_5flite_2eproto.base);
  nodecid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResolveLinkRequest::~ResolveLinkRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.ResolveLinkRequest)
  SharedDtor();
}

void ResolveLinkRequest::SharedDtor() {
  nodecid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResolveLinkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveLinkRequest& ResolveLinkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveLinkRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void ResolveLinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.ResolveLinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  nodecid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ResolveLinkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodeCid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_nodecid(), ptr, ctx, "ipfs_lite.ResolveLinkRequest.nodeCid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_path(), ptr, ctx, "ipfs_lite.ResolveLinkRequest.path");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveLinkRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.ResolveLinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeCid = 1;
  if (this->nodecid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodecid().data(), static_cast<int>(this->_internal_nodecid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.ResolveLinkRequest.nodeCid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodecid(), target);
  }

  // repeated string path = 2;
  for (int i = 0, n = this->_internal_path_size(); i < n; i++) {
    const auto& s = this->_internal_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.ResolveLinkRequest.path");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.ResolveLinkRequest)
  return target;
}

size_t ResolveLinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.ResolveLinkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string path = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(path_.size());
  for (int i = 0, n = path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      path_.Get(i));
  }

  // string nodeCid = 1;
  if (this->nodecid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodecid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveLinkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.ResolveLinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveLinkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveLinkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.ResolveLinkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.ResolveLinkRequest)
    MergeFrom(*source);
  }
}

void ResolveLinkRequest::MergeFrom(const ResolveLinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.ResolveLinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (from.nodecid().size() > 0) {

    nodecid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodecid_);
  }
}

void ResolveLinkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.ResolveLinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveLinkRequest::CopyFrom(const ResolveLinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.ResolveLinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveLinkRequest::IsInitialized() const {
  return true;
}

void ResolveLinkRequest::InternalSwap(ResolveLinkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
  nodecid_.Swap(&other->nodecid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveLinkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolveLinkResponse::InitAsDefaultInstance() {
  ::ipfs_lite::_ResolveLinkResponse_default_instance_._instance.get_mutable()->link_ = const_cast< ::ipfs_lite::Link*>(
      ::ipfs_lite::Link::internal_default_instance());
}
class ResolveLinkResponse::_Internal {
 public:
  static const ::ipfs_lite::Link& link(const ResolveLinkResponse* msg);
};

const ::ipfs_lite::Link&
ResolveLinkResponse::_Internal::link(const ResolveLinkResponse* msg) {
  return *msg->link_;
}
ResolveLinkResponse::ResolveLinkResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.ResolveLinkResponse)
}
ResolveLinkResponse::ResolveLinkResponse(const ResolveLinkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      remainingpath_(from.remainingpath_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_link()) {
    link_ = new ::ipfs_lite::Link(*from.link_);
  } else {
    link_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.ResolveLinkResponse)
}

void ResolveLinkResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveLinkResponse_ipfs_5flite_2eproto.base);
  link_ = nullptr;
}

ResolveLinkResponse::~ResolveLinkResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.ResolveLinkResponse)
  SharedDtor();
}

void ResolveLinkResponse::SharedDtor() {
  if (this != internal_default_instance()) delete link_;
}

void ResolveLinkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveLinkResponse& ResolveLinkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveLinkResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void ResolveLinkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.ResolveLinkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remainingpath_.Clear();
  if (GetArenaNoVirtual() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ResolveLinkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.Link link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string remainingPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_remainingpath(), ptr, ctx, "ipfs_lite.ResolveLinkResponse.remainingPath");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveLinkResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.ResolveLinkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.Link link = 1;
  if (this->has_link()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::link(this), target, stream);
  }

  // repeated string remainingPath = 2;
  for (int i = 0, n = this->_internal_remainingpath_size(); i < n; i++) {
    const auto& s = this->_internal_remainingpath(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.ResolveLinkResponse.remainingPath");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.ResolveLinkResponse)
  return target;
}

size_t ResolveLinkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.ResolveLinkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string remainingPath = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(remainingpath_.size());
  for (int i = 0, n = remainingpath_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      remainingpath_.Get(i));
  }

  // .ipfs_lite.Link link = 1;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveLinkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.ResolveLinkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveLinkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveLinkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.ResolveLinkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.ResolveLinkResponse)
    MergeFrom(*source);
  }
}

void ResolveLinkResponse::MergeFrom(const ResolveLinkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.ResolveLinkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remainingpath_.MergeFrom(from.remainingpath_);
  if (from.has_link()) {
    _internal_mutable_link()->::ipfs_lite::Link::MergeFrom(from._internal_link());
  }
}

void ResolveLinkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.ResolveLinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveLinkResponse::CopyFrom(const ResolveLinkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.ResolveLinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveLinkResponse::IsInitialized() const {
  return true;
}

void ResolveLinkResponse::InternalSwap(ResolveLinkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remainingpath_.InternalSwap(&other->remainingpath_);
  swap(link_, other->link_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveLinkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TreeRequest::InitAsDefaultInstance() {
}
class TreeRequest::_Internal {
 public:
};

TreeRequest::TreeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.TreeRequest)
}
TreeRequest::TreeRequest(const TreeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodecid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodecid().empty()) {
    nodecid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodecid_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  depth_ = from.depth_;
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.TreeRequest)
}

void TreeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreeRequest_ipfs_5flite_2eproto.base);
  nodecid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depth_ = 0;
}

TreeRequest::~TreeRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.TreeRequest)
  SharedDtor();
}

void TreeRequest::SharedDtor() {
  nodecid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TreeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeRequest& TreeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreeRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void TreeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.TreeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodecid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depth_ = 0;
  _internal_metadata_.Clear();
}

const char* TreeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodeCid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_nodecid(), ptr, ctx, "ipfs_lite.TreeRequest.nodeCid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_path(), ptr, ctx, "ipfs_lite.TreeRequest.path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.TreeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeCid = 1;
  if (this->nodecid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodecid().data(), static_cast<int>(this->_internal_nodecid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.TreeRequest.nodeCid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodecid(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.TreeRequest.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // int32 depth = 3;
  if (this->depth() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.TreeRequest)
  return target;
}

size_t TreeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.TreeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeCid = 1;
  if (this->nodecid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodecid());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 depth = 3;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.TreeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.TreeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.TreeRequest)
    MergeFrom(*source);
  }
}

void TreeRequest::MergeFrom(const TreeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.TreeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodecid().size() > 0) {

    nodecid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodecid_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
}

void TreeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.TreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeRequest::CopyFrom(const TreeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.TreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeRequest::IsInitialized() const {
  return true;
}

void TreeRequest::InternalSwap(TreeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodecid_.Swap(&other->nodecid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(depth_, other->depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TreeResponse::InitAsDefaultInstance() {
}
class TreeResponse::_Internal {
 public:
};

TreeResponse::TreeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.TreeResponse)
}
TreeResponse::TreeResponse(const TreeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.TreeResponse)
}

void TreeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreeResponse_ipfs_5flite_2eproto.base);
}

TreeResponse::~TreeResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.TreeResponse)
  SharedDtor();
}

void TreeResponse::SharedDtor() {
}

void TreeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeResponse& TreeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreeResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void TreeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.TreeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  _internal_metadata_.Clear();
}

const char* TreeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_paths(), ptr, ctx, "ipfs_lite.TreeResponse.paths");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.TreeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string paths = 1;
  for (int i = 0, n = this->_internal_paths_size(); i < n; i++) {
    const auto& s = this->_internal_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.TreeResponse.paths");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.TreeResponse)
  return target;
}

size_t TreeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.TreeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(paths_.size());
  for (int i = 0, n = paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      paths_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.TreeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.TreeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.TreeResponse)
    MergeFrom(*source);
  }
}

void TreeResponse::MergeFrom(const TreeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.TreeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
}

void TreeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.TreeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeResponse::CopyFrom(const TreeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.TreeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeResponse::IsInitialized() const {
  return true;
}

void TreeResponse::InternalSwap(TreeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteBlockRequest::InitAsDefaultInstance() {
}
class DeleteBlockRequest::_Internal {
 public:
};

DeleteBlockRequest::DeleteBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.DeleteBlockRequest)
}
DeleteBlockRequest::DeleteBlockRequest(const DeleteBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.DeleteBlockRequest)
}

void DeleteBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteBlockRequest_ipfs_5flite_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteBlockRequest::~DeleteBlockRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.DeleteBlockRequest)
  SharedDtor();
}

void DeleteBlockRequest::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteBlockRequest& DeleteBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteBlockRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void DeleteBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.DeleteBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeleteBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.DeleteBlockRequest.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.DeleteBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.DeleteBlockRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.DeleteBlockRequest)
  return target;
}

size_t DeleteBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.DeleteBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.DeleteBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.DeleteBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.DeleteBlockRequest)
    MergeFrom(*source);
  }
}

void DeleteBlockRequest::MergeFrom(const DeleteBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.DeleteBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void DeleteBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.DeleteBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBlockRequest::CopyFrom(const DeleteBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.DeleteBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBlockRequest::IsInitialized() const {
  return true;
}

void DeleteBlockRequest::InternalSwap(DeleteBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteBlockResponse::InitAsDefaultInstance() {
}
class DeleteBlockResponse::_Internal {
 public:
};

DeleteBlockResponse::DeleteBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.DeleteBlockResponse)
}
DeleteBlockResponse::DeleteBlockResponse(const DeleteBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.DeleteBlockResponse)
}

void DeleteBlockResponse::SharedCtor() {
}

DeleteBlockResponse::~DeleteBlockResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.DeleteBlockResponse)
  SharedDtor();
}

void DeleteBlockResponse::SharedDtor() {
}

void DeleteBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteBlockResponse& DeleteBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteBlockResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void DeleteBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.DeleteBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeleteBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.DeleteBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.DeleteBlockResponse)
  return target;
}

size_t DeleteBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.DeleteBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.DeleteBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.DeleteBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.DeleteBlockResponse)
    MergeFrom(*source);
  }
}

void DeleteBlockResponse::MergeFrom(const DeleteBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.DeleteBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.DeleteBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBlockResponse::CopyFrom(const DeleteBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.DeleteBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBlockResponse::IsInitialized() const {
  return true;
}

void DeleteBlockResponse::InternalSwap(DeleteBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HasBlockRequest::InitAsDefaultInstance() {
}
class HasBlockRequest::_Internal {
 public:
};

HasBlockRequest::HasBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.HasBlockRequest)
}
HasBlockRequest::HasBlockRequest(const HasBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.HasBlockRequest)
}

void HasBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HasBlockRequest_ipfs_5flite_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HasBlockRequest::~HasBlockRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.HasBlockRequest)
  SharedDtor();
}

void HasBlockRequest::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HasBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HasBlockRequest& HasBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HasBlockRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void HasBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.HasBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* HasBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.HasBlockRequest.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HasBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.HasBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.HasBlockRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.HasBlockRequest)
  return target;
}

size_t HasBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.HasBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HasBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.HasBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HasBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HasBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.HasBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.HasBlockRequest)
    MergeFrom(*source);
  }
}

void HasBlockRequest::MergeFrom(const HasBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.HasBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void HasBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.HasBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HasBlockRequest::CopyFrom(const HasBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.HasBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasBlockRequest::IsInitialized() const {
  return true;
}

void HasBlockRequest::InternalSwap(HasBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HasBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HasBlockResponse::InitAsDefaultInstance() {
}
class HasBlockResponse::_Internal {
 public:
};

HasBlockResponse::HasBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.HasBlockResponse)
}
HasBlockResponse::HasBlockResponse(const HasBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hasblock_ = from.hasblock_;
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.HasBlockResponse)
}

void HasBlockResponse::SharedCtor() {
  hasblock_ = false;
}

HasBlockResponse::~HasBlockResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.HasBlockResponse)
  SharedDtor();
}

void HasBlockResponse::SharedDtor() {
}

void HasBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HasBlockResponse& HasBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HasBlockResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void HasBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.HasBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hasblock_ = false;
  _internal_metadata_.Clear();
}

const char* HasBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool hasBlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hasblock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HasBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.HasBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasBlock = 1;
  if (this->hasblock() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hasblock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.HasBlockResponse)
  return target;
}

size_t HasBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.HasBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool hasBlock = 1;
  if (this->hasblock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HasBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.HasBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HasBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HasBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.HasBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.HasBlockResponse)
    MergeFrom(*source);
  }
}

void HasBlockResponse::MergeFrom(const HasBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.HasBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hasblock() != 0) {
    _internal_set_hasblock(from._internal_hasblock());
  }
}

void HasBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.HasBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HasBlockResponse::CopyFrom(const HasBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.HasBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasBlockResponse::IsInitialized() const {
  return true;
}

void HasBlockResponse::InternalSwap(HasBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hasblock_, other->hasblock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockRequest::InitAsDefaultInstance() {
}
class GetBlockRequest::_Internal {
 public:
};

GetBlockRequest::GetBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetBlockRequest)
}
GetBlockRequest::GetBlockRequest(const GetBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetBlockRequest)
}

void GetBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockRequest_ipfs_5flite_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockRequest::~GetBlockRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetBlockRequest)
  SharedDtor();
}

void GetBlockRequest::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockRequest& GetBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.GetBlockRequest.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.GetBlockRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetBlockRequest)
  return target;
}

size_t GetBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetBlockRequest)
    MergeFrom(*source);
  }
}

void GetBlockRequest::MergeFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void GetBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockRequest::CopyFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockRequest::IsInitialized() const {
  return true;
}

void GetBlockRequest::InternalSwap(GetBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockResponse::InitAsDefaultInstance() {
  ::ipfs_lite::_GetBlockResponse_default_instance_._instance.get_mutable()->block_ = const_cast< ::ipfs_lite::Block*>(
      ::ipfs_lite::Block::internal_default_instance());
}
class GetBlockResponse::_Internal {
 public:
  static const ::ipfs_lite::Block& block(const GetBlockResponse* msg);
};

const ::ipfs_lite::Block&
GetBlockResponse::_Internal::block(const GetBlockResponse* msg) {
  return *msg->block_;
}
GetBlockResponse::GetBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetBlockResponse)
}
GetBlockResponse::GetBlockResponse(const GetBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::ipfs_lite::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetBlockResponse)
}

void GetBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockResponse_ipfs_5flite_2eproto.base);
  block_ = nullptr;
}

GetBlockResponse::~GetBlockResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetBlockResponse)
  SharedDtor();
}

void GetBlockResponse::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void GetBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockResponse& GetBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.Block block = 1;
  if (this->has_block()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetBlockResponse)
  return target;
}

size_t GetBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ipfs_lite.Block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetBlockResponse)
    MergeFrom(*source);
  }
}

void GetBlockResponse::MergeFrom(const GetBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::ipfs_lite::Block::MergeFrom(from._internal_block());
  }
}

void GetBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockResponse::CopyFrom(const GetBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockResponse::IsInitialized() const {
  return true;
}

void GetBlockResponse::InternalSwap(GetBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockSizeRequest::InitAsDefaultInstance() {
}
class GetBlockSizeRequest::_Internal {
 public:
};

GetBlockSizeRequest::GetBlockSizeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetBlockSizeRequest)
}
GetBlockSizeRequest::GetBlockSizeRequest(const GetBlockSizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetBlockSizeRequest)
}

void GetBlockSizeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockSizeRequest_ipfs_5flite_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockSizeRequest::~GetBlockSizeRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetBlockSizeRequest)
  SharedDtor();
}

void GetBlockSizeRequest::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockSizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockSizeRequest& GetBlockSizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockSizeRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetBlockSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetBlockSizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetBlockSizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.GetBlockSizeRequest.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockSizeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetBlockSizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.GetBlockSizeRequest.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetBlockSizeRequest)
  return target;
}

size_t GetBlockSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetBlockSizeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockSizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetBlockSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockSizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockSizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetBlockSizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetBlockSizeRequest)
    MergeFrom(*source);
  }
}

void GetBlockSizeRequest::MergeFrom(const GetBlockSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetBlockSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void GetBlockSizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetBlockSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockSizeRequest::CopyFrom(const GetBlockSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetBlockSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockSizeRequest::IsInitialized() const {
  return true;
}

void GetBlockSizeRequest::InternalSwap(GetBlockSizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockSizeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockSizeResponse::InitAsDefaultInstance() {
}
class GetBlockSizeResponse::_Internal {
 public:
};

GetBlockSizeResponse::GetBlockSizeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.GetBlockSizeResponse)
}
GetBlockSizeResponse::GetBlockSizeResponse(const GetBlockSizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.GetBlockSizeResponse)
}

void GetBlockSizeResponse::SharedCtor() {
  size_ = 0;
}

GetBlockSizeResponse::~GetBlockSizeResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.GetBlockSizeResponse)
  SharedDtor();
}

void GetBlockSizeResponse::SharedDtor() {
}

void GetBlockSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockSizeResponse& GetBlockSizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockSizeResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void GetBlockSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.GetBlockSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0;
  _internal_metadata_.Clear();
}

const char* GetBlockSizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockSizeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.GetBlockSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.GetBlockSizeResponse)
  return target;
}

size_t GetBlockSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.GetBlockSizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockSizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.GetBlockSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockSizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockSizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.GetBlockSizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.GetBlockSizeResponse)
    MergeFrom(*source);
  }
}

void GetBlockSizeResponse::MergeFrom(const GetBlockSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.GetBlockSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void GetBlockSizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.GetBlockSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockSizeResponse::CopyFrom(const GetBlockSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.GetBlockSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockSizeResponse::IsInitialized() const {
  return true;
}

void GetBlockSizeResponse::InternalSwap(GetBlockSizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockSizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutBlockRequest::InitAsDefaultInstance() {
  ::ipfs_lite::_PutBlockRequest_default_instance_._instance.get_mutable()->block_ = const_cast< ::ipfs_lite::Block*>(
      ::ipfs_lite::Block::internal_default_instance());
}
class PutBlockRequest::_Internal {
 public:
  static const ::ipfs_lite::Block& block(const PutBlockRequest* msg);
};

const ::ipfs_lite::Block&
PutBlockRequest::_Internal::block(const PutBlockRequest* msg) {
  return *msg->block_;
}
PutBlockRequest::PutBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.PutBlockRequest)
}
PutBlockRequest::PutBlockRequest(const PutBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::ipfs_lite::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.PutBlockRequest)
}

void PutBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutBlockRequest_ipfs_5flite_2eproto.base);
  block_ = nullptr;
}

PutBlockRequest::~PutBlockRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.PutBlockRequest)
  SharedDtor();
}

void PutBlockRequest::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void PutBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutBlockRequest& PutBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutBlockRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void PutBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.PutBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PutBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ipfs_lite.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.PutBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ipfs_lite.Block block = 1;
  if (this->has_block()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.PutBlockRequest)
  return target;
}

size_t PutBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.PutBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ipfs_lite.Block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.PutBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.PutBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.PutBlockRequest)
    MergeFrom(*source);
  }
}

void PutBlockRequest::MergeFrom(const PutBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.PutBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::ipfs_lite::Block::MergeFrom(from._internal_block());
  }
}

void PutBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.PutBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutBlockRequest::CopyFrom(const PutBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.PutBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutBlockRequest::IsInitialized() const {
  return true;
}

void PutBlockRequest::InternalSwap(PutBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutBlockResponse::InitAsDefaultInstance() {
}
class PutBlockResponse::_Internal {
 public:
};

PutBlockResponse::PutBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.PutBlockResponse)
}
PutBlockResponse::PutBlockResponse(const PutBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.PutBlockResponse)
}

void PutBlockResponse::SharedCtor() {
}

PutBlockResponse::~PutBlockResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.PutBlockResponse)
  SharedDtor();
}

void PutBlockResponse::SharedDtor() {
}

void PutBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutBlockResponse& PutBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutBlockResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void PutBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.PutBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PutBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.PutBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.PutBlockResponse)
  return target;
}

size_t PutBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.PutBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.PutBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.PutBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.PutBlockResponse)
    MergeFrom(*source);
  }
}

void PutBlockResponse::MergeFrom(const PutBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.PutBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PutBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.PutBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutBlockResponse::CopyFrom(const PutBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.PutBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutBlockResponse::IsInitialized() const {
  return true;
}

void PutBlockResponse::InternalSwap(PutBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutBlocksRequest::InitAsDefaultInstance() {
}
class PutBlocksRequest::_Internal {
 public:
};

PutBlocksRequest::PutBlocksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.PutBlocksRequest)
}
PutBlocksRequest::PutBlocksRequest(const PutBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.PutBlocksRequest)
}

void PutBlocksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutBlocksRequest_ipfs_5flite_2eproto.base);
}

PutBlocksRequest::~PutBlocksRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.PutBlocksRequest)
  SharedDtor();
}

void PutBlocksRequest::SharedDtor() {
}

void PutBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutBlocksRequest& PutBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutBlocksRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void PutBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.PutBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  _internal_metadata_.Clear();
}

const char* PutBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ipfs_lite.Block blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutBlocksRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.PutBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ipfs_lite.Block blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.PutBlocksRequest)
  return target;
}

size_t PutBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.PutBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ipfs_lite.Block blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.PutBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.PutBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.PutBlocksRequest)
    MergeFrom(*source);
  }
}

void PutBlocksRequest::MergeFrom(const PutBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.PutBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
}

void PutBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.PutBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutBlocksRequest::CopyFrom(const PutBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.PutBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutBlocksRequest::IsInitialized() const {
  return true;
}

void PutBlocksRequest::InternalSwap(PutBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutBlocksResponse::InitAsDefaultInstance() {
}
class PutBlocksResponse::_Internal {
 public:
};

PutBlocksResponse::PutBlocksResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.PutBlocksResponse)
}
PutBlocksResponse::PutBlocksResponse(const PutBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.PutBlocksResponse)
}

void PutBlocksResponse::SharedCtor() {
}

PutBlocksResponse::~PutBlocksResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.PutBlocksResponse)
  SharedDtor();
}

void PutBlocksResponse::SharedDtor() {
}

void PutBlocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutBlocksResponse& PutBlocksResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutBlocksResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void PutBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.PutBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PutBlocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutBlocksResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.PutBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.PutBlocksResponse)
  return target;
}

size_t PutBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.PutBlocksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutBlocksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.PutBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutBlocksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutBlocksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.PutBlocksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.PutBlocksResponse)
    MergeFrom(*source);
  }
}

void PutBlocksResponse::MergeFrom(const PutBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.PutBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PutBlocksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.PutBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutBlocksResponse::CopyFrom(const PutBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.PutBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutBlocksResponse::IsInitialized() const {
  return true;
}

void PutBlocksResponse::InternalSwap(PutBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutBlocksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllKeysRequest::InitAsDefaultInstance() {
}
class AllKeysRequest::_Internal {
 public:
};

AllKeysRequest::AllKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AllKeysRequest)
}
AllKeysRequest::AllKeysRequest(const AllKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AllKeysRequest)
}

void AllKeysRequest::SharedCtor() {
}

AllKeysRequest::~AllKeysRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AllKeysRequest)
  SharedDtor();
}

void AllKeysRequest::SharedDtor() {
}

void AllKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllKeysRequest& AllKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllKeysRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AllKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AllKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AllKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllKeysRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AllKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AllKeysRequest)
  return target;
}

size_t AllKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AllKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AllKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AllKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AllKeysRequest)
    MergeFrom(*source);
  }
}

void AllKeysRequest::MergeFrom(const AllKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AllKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AllKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AllKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllKeysRequest::CopyFrom(const AllKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AllKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllKeysRequest::IsInitialized() const {
  return true;
}

void AllKeysRequest::InternalSwap(AllKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllKeysResponse::InitAsDefaultInstance() {
}
class AllKeysResponse::_Internal {
 public:
};

AllKeysResponse::AllKeysResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.AllKeysResponse)
}
AllKeysResponse::AllKeysResponse(const AllKeysResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.AllKeysResponse)
}

void AllKeysResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllKeysResponse_ipfs_5flite_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AllKeysResponse::~AllKeysResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.AllKeysResponse)
  SharedDtor();
}

void AllKeysResponse::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllKeysResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllKeysResponse& AllKeysResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllKeysResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void AllKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.AllKeysResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AllKeysResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cid(), ptr, ctx, "ipfs_lite.AllKeysResponse.cid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllKeysResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.AllKeysResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ipfs_lite.AllKeysResponse.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.AllKeysResponse)
  return target;
}

size_t AllKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.AllKeysResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllKeysResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.AllKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AllKeysResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllKeysResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.AllKeysResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.AllKeysResponse)
    MergeFrom(*source);
  }
}

void AllKeysResponse::MergeFrom(const AllKeysResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.AllKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void AllKeysResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.AllKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllKeysResponse::CopyFrom(const AllKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.AllKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllKeysResponse::IsInitialized() const {
  return true;
}

void AllKeysResponse::InternalSwap(AllKeysResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AllKeysResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashOnReadRequest::InitAsDefaultInstance() {
}
class HashOnReadRequest::_Internal {
 public:
};

HashOnReadRequest::HashOnReadRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.HashOnReadRequest)
}
HashOnReadRequest::HashOnReadRequest(const HashOnReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashonread_ = from.hashonread_;
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.HashOnReadRequest)
}

void HashOnReadRequest::SharedCtor() {
  hashonread_ = false;
}

HashOnReadRequest::~HashOnReadRequest() {
  // @@protoc_insertion_point(destructor:ipfs_lite.HashOnReadRequest)
  SharedDtor();
}

void HashOnReadRequest::SharedDtor() {
}

void HashOnReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashOnReadRequest& HashOnReadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashOnReadRequest_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void HashOnReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.HashOnReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashonread_ = false;
  _internal_metadata_.Clear();
}

const char* HashOnReadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool hashOnRead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hashonread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashOnReadRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.HashOnReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hashOnRead = 1;
  if (this->hashonread() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hashonread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.HashOnReadRequest)
  return target;
}

size_t HashOnReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.HashOnReadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool hashOnRead = 1;
  if (this->hashonread() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashOnReadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.HashOnReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HashOnReadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashOnReadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.HashOnReadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.HashOnReadRequest)
    MergeFrom(*source);
  }
}

void HashOnReadRequest::MergeFrom(const HashOnReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.HashOnReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hashonread() != 0) {
    _internal_set_hashonread(from._internal_hashonread());
  }
}

void HashOnReadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.HashOnReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashOnReadRequest::CopyFrom(const HashOnReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.HashOnReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashOnReadRequest::IsInitialized() const {
  return true;
}

void HashOnReadRequest::InternalSwap(HashOnReadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hashonread_, other->hashonread_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashOnReadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashOnReadResponse::InitAsDefaultInstance() {
}
class HashOnReadResponse::_Internal {
 public:
};

HashOnReadResponse::HashOnReadResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipfs_lite.HashOnReadResponse)
}
HashOnReadResponse::HashOnReadResponse(const HashOnReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipfs_lite.HashOnReadResponse)
}

void HashOnReadResponse::SharedCtor() {
}

HashOnReadResponse::~HashOnReadResponse() {
  // @@protoc_insertion_point(destructor:ipfs_lite.HashOnReadResponse)
  SharedDtor();
}

void HashOnReadResponse::SharedDtor() {
}

void HashOnReadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashOnReadResponse& HashOnReadResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashOnReadResponse_ipfs_5flite_2eproto.base);
  return *internal_default_instance();
}


void HashOnReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ipfs_lite.HashOnReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* HashOnReadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashOnReadResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipfs_lite.HashOnReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipfs_lite.HashOnReadResponse)
  return target;
}

size_t HashOnReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipfs_lite.HashOnReadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashOnReadResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipfs_lite.HashOnReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HashOnReadResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashOnReadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipfs_lite.HashOnReadResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipfs_lite.HashOnReadResponse)
    MergeFrom(*source);
  }
}

void HashOnReadResponse::MergeFrom(const HashOnReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipfs_lite.HashOnReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HashOnReadResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipfs_lite.HashOnReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashOnReadResponse::CopyFrom(const HashOnReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipfs_lite.HashOnReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashOnReadResponse::IsInitialized() const {
  return true;
}

void HashOnReadResponse::InternalSwap(HashOnReadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashOnReadResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ipfs_lite
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ipfs_lite::AddParams* Arena::CreateMaybeMessage< ::ipfs_lite::AddParams >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AddParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::Block* Arena::CreateMaybeMessage< ::ipfs_lite::Block >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::Link* Arena::CreateMaybeMessage< ::ipfs_lite::Link >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::NodeStat* Arena::CreateMaybeMessage< ::ipfs_lite::NodeStat >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::NodeStat >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::Node* Arena::CreateMaybeMessage< ::ipfs_lite::Node >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::AddFileRequest* Arena::CreateMaybeMessage< ::ipfs_lite::AddFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AddFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::AddFileResponse* Arena::CreateMaybeMessage< ::ipfs_lite::AddFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AddFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetFileRequest* Arena::CreateMaybeMessage< ::ipfs_lite::GetFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetFileResponse* Arena::CreateMaybeMessage< ::ipfs_lite::GetFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::AddNodeRequest* Arena::CreateMaybeMessage< ::ipfs_lite::AddNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AddNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::AddNodeResponse* Arena::CreateMaybeMessage< ::ipfs_lite::AddNodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AddNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::AddNodesRequest* Arena::CreateMaybeMessage< ::ipfs_lite::AddNodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AddNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::AddNodesResponse* Arena::CreateMaybeMessage< ::ipfs_lite::AddNodesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AddNodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetNodeRequest* Arena::CreateMaybeMessage< ::ipfs_lite::GetNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetNodeResponse* Arena::CreateMaybeMessage< ::ipfs_lite::GetNodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetNodesRequest* Arena::CreateMaybeMessage< ::ipfs_lite::GetNodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetNodesResponse* Arena::CreateMaybeMessage< ::ipfs_lite::GetNodesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetNodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::RemoveNodeRequest* Arena::CreateMaybeMessage< ::ipfs_lite::RemoveNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::RemoveNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::RemoveNodeResponse* Arena::CreateMaybeMessage< ::ipfs_lite::RemoveNodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::RemoveNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::RemoveNodesRequest* Arena::CreateMaybeMessage< ::ipfs_lite::RemoveNodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::RemoveNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::RemoveNodesResponse* Arena::CreateMaybeMessage< ::ipfs_lite::RemoveNodesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::RemoveNodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::ResolveLinkRequest* Arena::CreateMaybeMessage< ::ipfs_lite::ResolveLinkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::ResolveLinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::ResolveLinkResponse* Arena::CreateMaybeMessage< ::ipfs_lite::ResolveLinkResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::ResolveLinkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::TreeRequest* Arena::CreateMaybeMessage< ::ipfs_lite::TreeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::TreeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::TreeResponse* Arena::CreateMaybeMessage< ::ipfs_lite::TreeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::TreeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::DeleteBlockRequest* Arena::CreateMaybeMessage< ::ipfs_lite::DeleteBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::DeleteBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::DeleteBlockResponse* Arena::CreateMaybeMessage< ::ipfs_lite::DeleteBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::DeleteBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::HasBlockRequest* Arena::CreateMaybeMessage< ::ipfs_lite::HasBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::HasBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::HasBlockResponse* Arena::CreateMaybeMessage< ::ipfs_lite::HasBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::HasBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetBlockRequest* Arena::CreateMaybeMessage< ::ipfs_lite::GetBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetBlockResponse* Arena::CreateMaybeMessage< ::ipfs_lite::GetBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetBlockSizeRequest* Arena::CreateMaybeMessage< ::ipfs_lite::GetBlockSizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetBlockSizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::GetBlockSizeResponse* Arena::CreateMaybeMessage< ::ipfs_lite::GetBlockSizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::GetBlockSizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::PutBlockRequest* Arena::CreateMaybeMessage< ::ipfs_lite::PutBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::PutBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::PutBlockResponse* Arena::CreateMaybeMessage< ::ipfs_lite::PutBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::PutBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::PutBlocksRequest* Arena::CreateMaybeMessage< ::ipfs_lite::PutBlocksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::PutBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::PutBlocksResponse* Arena::CreateMaybeMessage< ::ipfs_lite::PutBlocksResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::PutBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::AllKeysRequest* Arena::CreateMaybeMessage< ::ipfs_lite::AllKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AllKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::AllKeysResponse* Arena::CreateMaybeMessage< ::ipfs_lite::AllKeysResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::AllKeysResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::HashOnReadRequest* Arena::CreateMaybeMessage< ::ipfs_lite::HashOnReadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::HashOnReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ipfs_lite::HashOnReadResponse* Arena::CreateMaybeMessage< ::ipfs_lite::HashOnReadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ipfs_lite::HashOnReadResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
