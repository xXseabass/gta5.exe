// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ipfs_lite.proto
#ifndef GRPC_ipfs_5flite_2eproto__INCLUDED
#define GRPC_ipfs_5flite_2eproto__INCLUDED

#include "ipfs_lite.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace ipfs_lite {

class IpfsLite final {
 public:
  static constexpr char const* service_full_name() {
    return "ipfs_lite.IpfsLite";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ipfs_lite::AddFileRequest>> AddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ipfs_lite::AddFileRequest>>(AddFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ipfs_lite::AddFileRequest>> AsyncAddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ipfs_lite::AddFileRequest>>(AsyncAddFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ipfs_lite::AddFileRequest>> PrepareAsyncAddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ipfs_lite::AddFileRequest>>(PrepareAsyncAddFileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ipfs_lite::GetFileResponse>> GetFile(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ipfs_lite::GetFileResponse>>(GetFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetFileResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetFileResponse>>(AsyncGetFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetFileResponse>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetFileResponse>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
    virtual ::grpc::Status HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::ipfs_lite::HasBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::HasBlockResponse>> AsyncHasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::HasBlockResponse>>(AsyncHasBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::HasBlockResponse>> PrepareAsyncHasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::HasBlockResponse>>(PrepareAsyncHasBlockRaw(context, request, cq));
    }
    // DAGService
    //
    virtual ::grpc::Status AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::ipfs_lite::AddNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodeResponse>> AsyncAddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodeResponse>>(AsyncAddNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodeResponse>> PrepareAsyncAddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodeResponse>>(PrepareAsyncAddNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::ipfs_lite::AddNodesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodesResponse>> AsyncAddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodesResponse>>(AsyncAddNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodesResponse>> PrepareAsyncAddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodesResponse>>(PrepareAsyncAddNodesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::ipfs_lite::GetNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::GetNodeResponse>> AsyncGetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::GetNodeResponse>>(AsyncGetNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::GetNodeResponse>> PrepareAsyncGetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::GetNodeResponse>>(PrepareAsyncGetNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ipfs_lite::GetNodesResponse>> GetNodes(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ipfs_lite::GetNodesResponse>>(GetNodesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetNodesResponse>> AsyncGetNodes(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetNodesResponse>>(AsyncGetNodesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetNodesResponse>> PrepareAsyncGetNodes(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetNodesResponse>>(PrepareAsyncGetNodesRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::ipfs_lite::RemoveNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodeResponse>> AsyncRemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodeResponse>>(AsyncRemoveNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodeResponse>> PrepareAsyncRemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodeResponse>>(PrepareAsyncRemoveNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::ipfs_lite::RemoveNodesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodesResponse>> AsyncRemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodesResponse>>(AsyncRemoveNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodesResponse>> PrepareAsyncRemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodesResponse>>(PrepareAsyncRemoveNodesRaw(context, request, cq));
    }
    // Node provides a ResloveLink method and the Resolver methods Resolve and Tree
    //
    virtual ::grpc::Status ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::ipfs_lite::ResolveLinkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::ResolveLinkResponse>> AsyncResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::ResolveLinkResponse>>(AsyncResolveLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::ResolveLinkResponse>> PrepareAsyncResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::ResolveLinkResponse>>(PrepareAsyncResolveLinkRaw(context, request, cq));
    }
    virtual ::grpc::Status Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::ipfs_lite::TreeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::TreeResponse>> AsyncTree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::TreeResponse>>(AsyncTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::TreeResponse>> PrepareAsyncTree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::TreeResponse>>(PrepareAsyncTreeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void AddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::experimental::ClientWriteReactor< ::ipfs_lite::AddFileRequest>* reactor) = 0;
      virtual void GetFile(::grpc::ClientContext* context, ::ipfs_lite::GetFileRequest* request, ::grpc::experimental::ClientReadReactor< ::ipfs_lite::GetFileResponse>* reactor) = 0;
      virtual void HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest* request, ::ipfs_lite::HasBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::HasBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest* request, ::ipfs_lite::HasBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void HasBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::HasBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // DAGService
      //
      virtual void AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest* request, ::ipfs_lite::AddNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest* request, ::ipfs_lite::AddNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest* request, ::ipfs_lite::AddNodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest* request, ::ipfs_lite::AddNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest* request, ::ipfs_lite::GetNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::GetNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest* request, ::ipfs_lite::GetNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::GetNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNodes(::grpc::ClientContext* context, ::ipfs_lite::GetNodesRequest* request, ::grpc::experimental::ClientReadReactor< ::ipfs_lite::GetNodesResponse>* reactor) = 0;
      virtual void RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest* request, ::ipfs_lite::RemoveNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest* request, ::ipfs_lite::RemoveNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest* request, ::ipfs_lite::RemoveNodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest* request, ::ipfs_lite::RemoveNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Node provides a ResloveLink method and the Resolver methods Resolve and Tree
      //
      virtual void ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest* request, ::ipfs_lite::ResolveLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResolveLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::ResolveLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest* request, ::ipfs_lite::ResolveLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ResolveLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::ResolveLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest* request, ::ipfs_lite::TreeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::TreeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest* request, ::ipfs_lite::TreeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Tree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::TreeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::ipfs_lite::AddFileRequest>* AddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ipfs_lite::AddFileRequest>* AsyncAddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ipfs_lite::AddFileRequest>* PrepareAsyncAddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ipfs_lite::GetFileResponse>* GetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetFileResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetFileResponse>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::HasBlockResponse>* AsyncHasBlockRaw(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::HasBlockResponse>* PrepareAsyncHasBlockRaw(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodeResponse>* AsyncAddNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodeResponse>* PrepareAsyncAddNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodesResponse>* AsyncAddNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::AddNodesResponse>* PrepareAsyncAddNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::GetNodeResponse>* AsyncGetNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::GetNodeResponse>* PrepareAsyncGetNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ipfs_lite::GetNodesResponse>* GetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetNodesResponse>* AsyncGetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ipfs_lite::GetNodesResponse>* PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodeResponse>* AsyncRemoveNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodeResponse>* PrepareAsyncRemoveNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodesResponse>* AsyncRemoveNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::RemoveNodesResponse>* PrepareAsyncRemoveNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::ResolveLinkResponse>* AsyncResolveLinkRaw(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::ResolveLinkResponse>* PrepareAsyncResolveLinkRaw(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::TreeResponse>* AsyncTreeRaw(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ipfs_lite::TreeResponse>* PrepareAsyncTreeRaw(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::ipfs_lite::AddFileRequest>> AddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ipfs_lite::AddFileRequest>>(AddFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ipfs_lite::AddFileRequest>> AsyncAddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ipfs_lite::AddFileRequest>>(AsyncAddFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ipfs_lite::AddFileRequest>> PrepareAsyncAddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ipfs_lite::AddFileRequest>>(PrepareAsyncAddFileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ipfs_lite::GetFileResponse>> GetFile(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ipfs_lite::GetFileResponse>>(GetFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ipfs_lite::GetFileResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ipfs_lite::GetFileResponse>>(AsyncGetFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ipfs_lite::GetFileResponse>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ipfs_lite::GetFileResponse>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
    ::grpc::Status HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::ipfs_lite::HasBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::HasBlockResponse>> AsyncHasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::HasBlockResponse>>(AsyncHasBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::HasBlockResponse>> PrepareAsyncHasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::HasBlockResponse>>(PrepareAsyncHasBlockRaw(context, request, cq));
    }
    ::grpc::Status AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::ipfs_lite::AddNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodeResponse>> AsyncAddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodeResponse>>(AsyncAddNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodeResponse>> PrepareAsyncAddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodeResponse>>(PrepareAsyncAddNodeRaw(context, request, cq));
    }
    ::grpc::Status AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::ipfs_lite::AddNodesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodesResponse>> AsyncAddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodesResponse>>(AsyncAddNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodesResponse>> PrepareAsyncAddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodesResponse>>(PrepareAsyncAddNodesRaw(context, request, cq));
    }
    ::grpc::Status GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::ipfs_lite::GetNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::GetNodeResponse>> AsyncGetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::GetNodeResponse>>(AsyncGetNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::GetNodeResponse>> PrepareAsyncGetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::GetNodeResponse>>(PrepareAsyncGetNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ipfs_lite::GetNodesResponse>> GetNodes(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ipfs_lite::GetNodesResponse>>(GetNodesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ipfs_lite::GetNodesResponse>> AsyncGetNodes(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ipfs_lite::GetNodesResponse>>(AsyncGetNodesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ipfs_lite::GetNodesResponse>> PrepareAsyncGetNodes(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ipfs_lite::GetNodesResponse>>(PrepareAsyncGetNodesRaw(context, request, cq));
    }
    ::grpc::Status RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::ipfs_lite::RemoveNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodeResponse>> AsyncRemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodeResponse>>(AsyncRemoveNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodeResponse>> PrepareAsyncRemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodeResponse>>(PrepareAsyncRemoveNodeRaw(context, request, cq));
    }
    ::grpc::Status RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::ipfs_lite::RemoveNodesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodesResponse>> AsyncRemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodesResponse>>(AsyncRemoveNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodesResponse>> PrepareAsyncRemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodesResponse>>(PrepareAsyncRemoveNodesRaw(context, request, cq));
    }
    ::grpc::Status ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::ipfs_lite::ResolveLinkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::ResolveLinkResponse>> AsyncResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::ResolveLinkResponse>>(AsyncResolveLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::ResolveLinkResponse>> PrepareAsyncResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::ResolveLinkResponse>>(PrepareAsyncResolveLinkRaw(context, request, cq));
    }
    ::grpc::Status Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::ipfs_lite::TreeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::TreeResponse>> AsyncTree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::TreeResponse>>(AsyncTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::TreeResponse>> PrepareAsyncTree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ipfs_lite::TreeResponse>>(PrepareAsyncTreeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddFile(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::experimental::ClientWriteReactor< ::ipfs_lite::AddFileRequest>* reactor) override;
      void GetFile(::grpc::ClientContext* context, ::ipfs_lite::GetFileRequest* request, ::grpc::experimental::ClientReadReactor< ::ipfs_lite::GetFileResponse>* reactor) override;
      void HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest* request, ::ipfs_lite::HasBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void HasBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::HasBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void HasBlock(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest* request, ::ipfs_lite::HasBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void HasBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::HasBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest* request, ::ipfs_lite::AddNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void AddNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void AddNode(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest* request, ::ipfs_lite::AddNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest* request, ::ipfs_lite::AddNodesResponse* response, std::function<void(::grpc::Status)>) override;
      void AddNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodesResponse* response, std::function<void(::grpc::Status)>) override;
      void AddNodes(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest* request, ::ipfs_lite::AddNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::AddNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest* request, ::ipfs_lite::GetNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::GetNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNode(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest* request, ::ipfs_lite::GetNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::GetNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNodes(::grpc::ClientContext* context, ::ipfs_lite::GetNodesRequest* request, ::grpc::experimental::ClientReadReactor< ::ipfs_lite::GetNodesResponse>* reactor) override;
      void RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest* request, ::ipfs_lite::RemoveNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveNode(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest* request, ::ipfs_lite::RemoveNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest* request, ::ipfs_lite::RemoveNodesResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodesResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveNodes(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest* request, ::ipfs_lite::RemoveNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::RemoveNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest* request, ::ipfs_lite::ResolveLinkResponse* response, std::function<void(::grpc::Status)>) override;
      void ResolveLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::ResolveLinkResponse* response, std::function<void(::grpc::Status)>) override;
      void ResolveLink(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest* request, ::ipfs_lite::ResolveLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResolveLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::ResolveLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest* request, ::ipfs_lite::TreeResponse* response, std::function<void(::grpc::Status)>) override;
      void Tree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::TreeResponse* response, std::function<void(::grpc::Status)>) override;
      void Tree(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest* request, ::ipfs_lite::TreeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Tree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ipfs_lite::TreeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::ipfs_lite::AddFileRequest>* AddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response) override;
    ::grpc::ClientAsyncWriter< ::ipfs_lite::AddFileRequest>* AsyncAddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ipfs_lite::AddFileRequest>* PrepareAsyncAddFileRaw(::grpc::ClientContext* context, ::ipfs_lite::AddFileResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ipfs_lite::GetFileResponse>* GetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request) override;
    ::grpc::ClientAsyncReader< ::ipfs_lite::GetFileResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ipfs_lite::GetFileResponse>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::HasBlockResponse>* AsyncHasBlockRaw(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::HasBlockResponse>* PrepareAsyncHasBlockRaw(::grpc::ClientContext* context, const ::ipfs_lite::HasBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodeResponse>* AsyncAddNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodeResponse>* PrepareAsyncAddNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodesResponse>* AsyncAddNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::AddNodesResponse>* PrepareAsyncAddNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::AddNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::GetNodeResponse>* AsyncGetNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::GetNodeResponse>* PrepareAsyncGetNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ipfs_lite::GetNodesResponse>* GetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request) override;
    ::grpc::ClientAsyncReader< ::ipfs_lite::GetNodesResponse>* AsyncGetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ipfs_lite::GetNodesResponse>* PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::GetNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodeResponse>* AsyncRemoveNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodeResponse>* PrepareAsyncRemoveNodeRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodesResponse>* AsyncRemoveNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::RemoveNodesResponse>* PrepareAsyncRemoveNodesRaw(::grpc::ClientContext* context, const ::ipfs_lite::RemoveNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::ResolveLinkResponse>* AsyncResolveLinkRaw(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::ResolveLinkResponse>* PrepareAsyncResolveLinkRaw(::grpc::ClientContext* context, const ::ipfs_lite::ResolveLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::TreeResponse>* AsyncTreeRaw(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ipfs_lite::TreeResponse>* PrepareAsyncTreeRaw(::grpc::ClientContext* context, const ::ipfs_lite::TreeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFile_;
    const ::grpc::internal::RpcMethod rpcmethod_HasBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_AddNode_;
    const ::grpc::internal::RpcMethod rpcmethod_AddNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveNode_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_ResolveLink_;
    const ::grpc::internal::RpcMethod rpcmethod_Tree_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::ipfs_lite::AddFileRequest>* reader, ::ipfs_lite::AddFileResponse* response);
    virtual ::grpc::Status GetFile(::grpc::ServerContext* context, const ::ipfs_lite::GetFileRequest* request, ::grpc::ServerWriter< ::ipfs_lite::GetFileResponse>* writer);
    virtual ::grpc::Status HasBlock(::grpc::ServerContext* context, const ::ipfs_lite::HasBlockRequest* request, ::ipfs_lite::HasBlockResponse* response);
    // DAGService
    //
    virtual ::grpc::Status AddNode(::grpc::ServerContext* context, const ::ipfs_lite::AddNodeRequest* request, ::ipfs_lite::AddNodeResponse* response);
    virtual ::grpc::Status AddNodes(::grpc::ServerContext* context, const ::ipfs_lite::AddNodesRequest* request, ::ipfs_lite::AddNodesResponse* response);
    virtual ::grpc::Status GetNode(::grpc::ServerContext* context, const ::ipfs_lite::GetNodeRequest* request, ::ipfs_lite::GetNodeResponse* response);
    virtual ::grpc::Status GetNodes(::grpc::ServerContext* context, const ::ipfs_lite::GetNodesRequest* request, ::grpc::ServerWriter< ::ipfs_lite::GetNodesResponse>* writer);
    virtual ::grpc::Status RemoveNode(::grpc::ServerContext* context, const ::ipfs_lite::RemoveNodeRequest* request, ::ipfs_lite::RemoveNodeResponse* response);
    virtual ::grpc::Status RemoveNodes(::grpc::ServerContext* context, const ::ipfs_lite::RemoveNodesRequest* request, ::ipfs_lite::RemoveNodesResponse* response);
    // Node provides a ResloveLink method and the Resolver methods Resolve and Tree
    //
    virtual ::grpc::Status ResolveLink(::grpc::ServerContext* context, const ::ipfs_lite::ResolveLinkRequest* request, ::ipfs_lite::ResolveLinkResponse* response);
    virtual ::grpc::Status Tree(::grpc::ServerContext* context, const ::ipfs_lite::TreeRequest* request, ::ipfs_lite::TreeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ipfs_lite::AddFileRequest>* /*reader*/, ::ipfs_lite::AddFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::ipfs_lite::AddFileResponse, ::ipfs_lite::AddFileRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetFileRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::ipfs_lite::GetFileRequest* request, ::grpc::ServerAsyncWriter< ::ipfs_lite::GetFileResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasBlock() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::ipfs_lite::HasBlockRequest* /*request*/, ::ipfs_lite::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasBlock(::grpc::ServerContext* context, ::ipfs_lite::HasBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::ipfs_lite::HasBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddNode() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodeRequest* /*request*/, ::ipfs_lite::AddNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNode(::grpc::ServerContext* context, ::ipfs_lite::AddNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ipfs_lite::AddNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddNodes() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodesRequest* /*request*/, ::ipfs_lite::AddNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNodes(::grpc::ServerContext* context, ::ipfs_lite::AddNodesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ipfs_lite::AddNodesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNode() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodeRequest* /*request*/, ::ipfs_lite::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNode(::grpc::ServerContext* context, ::ipfs_lite::GetNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ipfs_lite::GetNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNodes() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodesRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetNodesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodes(::grpc::ServerContext* context, ::ipfs_lite::GetNodesRequest* request, ::grpc::ServerAsyncWriter< ::ipfs_lite::GetNodesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveNode() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RemoveNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodeRequest* /*request*/, ::ipfs_lite::RemoveNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveNode(::grpc::ServerContext* context, ::ipfs_lite::RemoveNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ipfs_lite::RemoveNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveNodes() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RemoveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodesRequest* /*request*/, ::ipfs_lite::RemoveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveNodes(::grpc::ServerContext* context, ::ipfs_lite::RemoveNodesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ipfs_lite::RemoveNodesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResolveLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResolveLink() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ResolveLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveLink(::grpc::ServerContext* /*context*/, const ::ipfs_lite::ResolveLinkRequest* /*request*/, ::ipfs_lite::ResolveLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResolveLink(::grpc::ServerContext* context, ::ipfs_lite::ResolveLinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::ipfs_lite::ResolveLinkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tree() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::ipfs_lite::TreeRequest* /*request*/, ::ipfs_lite::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTree(::grpc::ServerContext* context, ::ipfs_lite::TreeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ipfs_lite::TreeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddFile<WithAsyncMethod_GetFile<WithAsyncMethod_HasBlock<WithAsyncMethod_AddNode<WithAsyncMethod_AddNodes<WithAsyncMethod_GetNode<WithAsyncMethod_GetNodes<WithAsyncMethod_RemoveNode<WithAsyncMethod_RemoveNodes<WithAsyncMethod_ResolveLink<WithAsyncMethod_Tree<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddFile() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::ipfs_lite::AddFileRequest, ::ipfs_lite::AddFileResponse>(
          [this] { return this->AddFile(); }));
    }
    ~ExperimentalWithCallbackMethod_AddFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ipfs_lite::AddFileRequest>* /*reader*/, ::ipfs_lite::AddFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::ipfs_lite::AddFileRequest, ::ipfs_lite::AddFileResponse>* AddFile() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::ipfs_lite::AddFileRequest, ::ipfs_lite::AddFileResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFile() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::ipfs_lite::GetFileRequest, ::ipfs_lite::GetFileResponse>(
          [this] { return this->GetFile(); }));
    }
    ~ExperimentalWithCallbackMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetFileRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::ipfs_lite::GetFileRequest, ::ipfs_lite::GetFileResponse>* GetFile() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::ipfs_lite::GetFileRequest, ::ipfs_lite::GetFileResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HasBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::HasBlockRequest, ::ipfs_lite::HasBlockResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ipfs_lite::HasBlockRequest* request,
                 ::ipfs_lite::HasBlockResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->HasBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_HasBlock(
        ::grpc::experimental::MessageAllocator< ::ipfs_lite::HasBlockRequest, ::ipfs_lite::HasBlockResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::HasBlockRequest, ::ipfs_lite::HasBlockResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::ipfs_lite::HasBlockRequest* /*request*/, ::ipfs_lite::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void HasBlock(::grpc::ServerContext* /*context*/, const ::ipfs_lite::HasBlockRequest* /*request*/, ::ipfs_lite::HasBlockResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddNode() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::AddNodeRequest, ::ipfs_lite::AddNodeResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ipfs_lite::AddNodeRequest* request,
                 ::ipfs_lite::AddNodeResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddNode(
        ::grpc::experimental::MessageAllocator< ::ipfs_lite::AddNodeRequest, ::ipfs_lite::AddNodeResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::AddNodeRequest, ::ipfs_lite::AddNodeResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodeRequest* /*request*/, ::ipfs_lite::AddNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodeRequest* /*request*/, ::ipfs_lite::AddNodeResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddNodes() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::AddNodesRequest, ::ipfs_lite::AddNodesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ipfs_lite::AddNodesRequest* request,
                 ::ipfs_lite::AddNodesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddNodes(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddNodes(
        ::grpc::experimental::MessageAllocator< ::ipfs_lite::AddNodesRequest, ::ipfs_lite::AddNodesResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::AddNodesRequest, ::ipfs_lite::AddNodesResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodesRequest* /*request*/, ::ipfs_lite::AddNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodesRequest* /*request*/, ::ipfs_lite::AddNodesResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNode() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::GetNodeRequest, ::ipfs_lite::GetNodeResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ipfs_lite::GetNodeRequest* request,
                 ::ipfs_lite::GetNodeResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNode(
        ::grpc::experimental::MessageAllocator< ::ipfs_lite::GetNodeRequest, ::ipfs_lite::GetNodeResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::GetNodeRequest, ::ipfs_lite::GetNodeResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodeRequest* /*request*/, ::ipfs_lite::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodeRequest* /*request*/, ::ipfs_lite::GetNodeResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNodes() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::ipfs_lite::GetNodesRequest, ::ipfs_lite::GetNodesResponse>(
          [this] { return this->GetNodes(); }));
    }
    ~ExperimentalWithCallbackMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodesRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetNodesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::ipfs_lite::GetNodesRequest, ::ipfs_lite::GetNodesResponse>* GetNodes() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::ipfs_lite::GetNodesRequest, ::ipfs_lite::GetNodesResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveNode() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::RemoveNodeRequest, ::ipfs_lite::RemoveNodeResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ipfs_lite::RemoveNodeRequest* request,
                 ::ipfs_lite::RemoveNodeResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RemoveNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RemoveNode(
        ::grpc::experimental::MessageAllocator< ::ipfs_lite::RemoveNodeRequest, ::ipfs_lite::RemoveNodeResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::RemoveNodeRequest, ::ipfs_lite::RemoveNodeResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodeRequest* /*request*/, ::ipfs_lite::RemoveNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodeRequest* /*request*/, ::ipfs_lite::RemoveNodeResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveNodes() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::RemoveNodesRequest, ::ipfs_lite::RemoveNodesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ipfs_lite::RemoveNodesRequest* request,
                 ::ipfs_lite::RemoveNodesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RemoveNodes(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RemoveNodes(
        ::grpc::experimental::MessageAllocator< ::ipfs_lite::RemoveNodesRequest, ::ipfs_lite::RemoveNodesResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::RemoveNodesRequest, ::ipfs_lite::RemoveNodesResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodesRequest* /*request*/, ::ipfs_lite::RemoveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodesRequest* /*request*/, ::ipfs_lite::RemoveNodesResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResolveLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResolveLink() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::ResolveLinkRequest, ::ipfs_lite::ResolveLinkResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ipfs_lite::ResolveLinkRequest* request,
                 ::ipfs_lite::ResolveLinkResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ResolveLink(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ResolveLink(
        ::grpc::experimental::MessageAllocator< ::ipfs_lite::ResolveLinkRequest, ::ipfs_lite::ResolveLinkResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::ResolveLinkRequest, ::ipfs_lite::ResolveLinkResponse>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResolveLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveLink(::grpc::ServerContext* /*context*/, const ::ipfs_lite::ResolveLinkRequest* /*request*/, ::ipfs_lite::ResolveLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResolveLink(::grpc::ServerContext* /*context*/, const ::ipfs_lite::ResolveLinkRequest* /*request*/, ::ipfs_lite::ResolveLinkResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Tree() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::TreeRequest, ::ipfs_lite::TreeResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ipfs_lite::TreeRequest* request,
                 ::ipfs_lite::TreeResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Tree(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Tree(
        ::grpc::experimental::MessageAllocator< ::ipfs_lite::TreeRequest, ::ipfs_lite::TreeResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ipfs_lite::TreeRequest, ::ipfs_lite::TreeResponse>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::ipfs_lite::TreeRequest* /*request*/, ::ipfs_lite::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Tree(::grpc::ServerContext* /*context*/, const ::ipfs_lite::TreeRequest* /*request*/, ::ipfs_lite::TreeResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_AddFile<ExperimentalWithCallbackMethod_GetFile<ExperimentalWithCallbackMethod_HasBlock<ExperimentalWithCallbackMethod_AddNode<ExperimentalWithCallbackMethod_AddNodes<ExperimentalWithCallbackMethod_GetNode<ExperimentalWithCallbackMethod_GetNodes<ExperimentalWithCallbackMethod_RemoveNode<ExperimentalWithCallbackMethod_RemoveNodes<ExperimentalWithCallbackMethod_ResolveLink<ExperimentalWithCallbackMethod_Tree<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ipfs_lite::AddFileRequest>* /*reader*/, ::ipfs_lite::AddFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetFileRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasBlock() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::ipfs_lite::HasBlockRequest* /*request*/, ::ipfs_lite::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddNode() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodeRequest* /*request*/, ::ipfs_lite::AddNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddNodes() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodesRequest* /*request*/, ::ipfs_lite::AddNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNode() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodeRequest* /*request*/, ::ipfs_lite::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNodes() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodesRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetNodesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveNode() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RemoveNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodeRequest* /*request*/, ::ipfs_lite::RemoveNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveNodes() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RemoveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodesRequest* /*request*/, ::ipfs_lite::RemoveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResolveLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResolveLink() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ResolveLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveLink(::grpc::ServerContext* /*context*/, const ::ipfs_lite::ResolveLinkRequest* /*request*/, ::ipfs_lite::ResolveLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tree() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::ipfs_lite::TreeRequest* /*request*/, ::ipfs_lite::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ipfs_lite::AddFileRequest>* /*reader*/, ::ipfs_lite::AddFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetFileRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasBlock() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::ipfs_lite::HasBlockRequest* /*request*/, ::ipfs_lite::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddNode() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodeRequest* /*request*/, ::ipfs_lite::AddNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddNodes() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodesRequest* /*request*/, ::ipfs_lite::AddNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNode() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodeRequest* /*request*/, ::ipfs_lite::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNodes() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodesRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetNodesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveNode() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RemoveNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodeRequest* /*request*/, ::ipfs_lite::RemoveNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveNodes() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RemoveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodesRequest* /*request*/, ::ipfs_lite::RemoveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResolveLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResolveLink() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ResolveLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveLink(::grpc::ServerContext* /*context*/, const ::ipfs_lite::ResolveLinkRequest* /*request*/, ::ipfs_lite::ResolveLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResolveLink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tree() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::ipfs_lite::TreeRequest* /*request*/, ::ipfs_lite::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTree(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->AddFile(); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ipfs_lite::AddFileRequest>* /*reader*/, ::ipfs_lite::AddFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* AddFile() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetFile(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetFileRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetFile() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HasBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->HasBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::ipfs_lite::HasBlockRequest* /*request*/, ::ipfs_lite::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void HasBlock(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodeRequest* /*request*/, ::ipfs_lite::AddNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddNodes() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddNodes(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodesRequest* /*request*/, ::ipfs_lite::AddNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddNodes(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodeRequest* /*request*/, ::ipfs_lite::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNodes() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetNodes(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodesRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetNodesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetNodes() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RemoveNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodeRequest* /*request*/, ::ipfs_lite::RemoveNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveNodes() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RemoveNodes(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodesRequest* /*request*/, ::ipfs_lite::RemoveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveNodes(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResolveLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResolveLink() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ResolveLink(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ResolveLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveLink(::grpc::ServerContext* /*context*/, const ::ipfs_lite::ResolveLinkRequest* /*request*/, ::ipfs_lite::ResolveLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResolveLink(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Tree() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Tree(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::ipfs_lite::TreeRequest* /*request*/, ::ipfs_lite::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Tree(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasBlock() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ipfs_lite::HasBlockRequest, ::ipfs_lite::HasBlockResponse>(std::bind(&WithStreamedUnaryMethod_HasBlock<BaseClass>::StreamedHasBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::ipfs_lite::HasBlockRequest* /*request*/, ::ipfs_lite::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ipfs_lite::HasBlockRequest,::ipfs_lite::HasBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddNode() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ipfs_lite::AddNodeRequest, ::ipfs_lite::AddNodeResponse>(std::bind(&WithStreamedUnaryMethod_AddNode<BaseClass>::StreamedAddNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodeRequest* /*request*/, ::ipfs_lite::AddNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ipfs_lite::AddNodeRequest,::ipfs_lite::AddNodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddNodes() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ipfs_lite::AddNodesRequest, ::ipfs_lite::AddNodesResponse>(std::bind(&WithStreamedUnaryMethod_AddNodes<BaseClass>::StreamedAddNodes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::AddNodesRequest* /*request*/, ::ipfs_lite::AddNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ipfs_lite::AddNodesRequest,::ipfs_lite::AddNodesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNode() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ipfs_lite::GetNodeRequest, ::ipfs_lite::GetNodeResponse>(std::bind(&WithStreamedUnaryMethod_GetNode<BaseClass>::StreamedGetNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodeRequest* /*request*/, ::ipfs_lite::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ipfs_lite::GetNodeRequest,::ipfs_lite::GetNodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveNode() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::ipfs_lite::RemoveNodeRequest, ::ipfs_lite::RemoveNodeResponse>(std::bind(&WithStreamedUnaryMethod_RemoveNode<BaseClass>::StreamedRemoveNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveNode(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodeRequest* /*request*/, ::ipfs_lite::RemoveNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ipfs_lite::RemoveNodeRequest,::ipfs_lite::RemoveNodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveNodes() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::ipfs_lite::RemoveNodesRequest, ::ipfs_lite::RemoveNodesResponse>(std::bind(&WithStreamedUnaryMethod_RemoveNodes<BaseClass>::StreamedRemoveNodes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::RemoveNodesRequest* /*request*/, ::ipfs_lite::RemoveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ipfs_lite::RemoveNodesRequest,::ipfs_lite::RemoveNodesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResolveLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResolveLink() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::ipfs_lite::ResolveLinkRequest, ::ipfs_lite::ResolveLinkResponse>(std::bind(&WithStreamedUnaryMethod_ResolveLink<BaseClass>::StreamedResolveLink, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResolveLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResolveLink(::grpc::ServerContext* /*context*/, const ::ipfs_lite::ResolveLinkRequest* /*request*/, ::ipfs_lite::ResolveLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResolveLink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ipfs_lite::ResolveLinkRequest,::ipfs_lite::ResolveLinkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tree() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::ipfs_lite::TreeRequest, ::ipfs_lite::TreeResponse>(std::bind(&WithStreamedUnaryMethod_Tree<BaseClass>::StreamedTree, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::ipfs_lite::TreeRequest* /*request*/, ::ipfs_lite::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTree(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ipfs_lite::TreeRequest,::ipfs_lite::TreeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HasBlock<WithStreamedUnaryMethod_AddNode<WithStreamedUnaryMethod_AddNodes<WithStreamedUnaryMethod_GetNode<WithStreamedUnaryMethod_RemoveNode<WithStreamedUnaryMethod_RemoveNodes<WithStreamedUnaryMethod_ResolveLink<WithStreamedUnaryMethod_Tree<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::ipfs_lite::GetFileRequest, ::ipfs_lite::GetFileResponse>(std::bind(&WithSplitStreamingMethod_GetFile<BaseClass>::StreamedGetFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetFileRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetFileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ipfs_lite::GetFileRequest,::ipfs_lite::GetFileResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetNodes() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::ipfs_lite::GetNodesRequest, ::ipfs_lite::GetNodesResponse>(std::bind(&WithSplitStreamingMethod_GetNodes<BaseClass>::StreamedGetNodes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::ipfs_lite::GetNodesRequest* /*request*/, ::grpc::ServerWriter< ::ipfs_lite::GetNodesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetNodes(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ipfs_lite::GetNodesRequest,::ipfs_lite::GetNodesResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetFile<WithSplitStreamingMethod_GetNodes<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetFile<WithStreamedUnaryMethod_HasBlock<WithStreamedUnaryMethod_AddNode<WithStreamedUnaryMethod_AddNodes<WithStreamedUnaryMethod_GetNode<WithSplitStreamingMethod_GetNodes<WithStreamedUnaryMethod_RemoveNode<WithStreamedUnaryMethod_RemoveNodes<WithStreamedUnaryMethod_ResolveLink<WithStreamedUnaryMethod_Tree<Service > > > > > > > > > > StreamedService;
};

}  // namespace ipfs_lite


#endif  // GRPC_ipfs_5flite_2eproto__INCLUDED
