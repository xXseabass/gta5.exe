$colorsLight: (
    bgColor: hsl(60, 100%, 97%),
    fgColor: hsl(226, 23%, 11%),
	secondaryColor: rgb(60, 60, 60),
	accentContrastColor: hsl(60, 100%, 97%),
    accentColor1: #f40552,
	accentColor2: #007892,
	shadeColor: hsla(226, 23%, 11%, .1),

	auColor: rgb(146, 124, 0),

	activeColor: rgb(0, 155, 103),
	inactiveColor: rgb(128, 0, 21),

    yellowColor: hsl(53, 100%, 50%),
    redColor: hsl(30, 100%, 40%),
	blueColor: hsl(180, 100%, 40%),
    textColor: hsl(226, 23%, 11%),
    acrylicBlur: url(#acrylicBlur),
    backgroundImage: url(../assets/images/bg.jpg),
    logoTransform: scaleX(-1),
);

$colorsDark: (
    bgColor: hsl(226, 23%, 11%),
	fgColor: hsl(60, 100%, 97%),
	accentContrastColor: hsl(60, 100%, 97%),
	accentColor1: #f40552,
	accentColor2: #007892,
	shadeColor: hsla(226, 23%, 11%, .1),

	auColor: rgb(255, 217, 0),

	activeColor: rgb(0, 155, 103),
	inactiveColor: rgb(128, 0, 21),

    secondaryColor: rgb(240, 240, 240),
    yellowColor: hsl(53, 100%, 50%),
	redColor: hsl(10, 100%, 40%),
	blueColor: hsl(180, 100%, 40%),
    textColor: hsl(60, 100%, 97%),
    acrylicBlur: url(#acrylicBlurDark),
    backgroundImage: url(../assets/images/bg-night.jpg),
    logoTransform: scaleX(-1),
);

$colorsRdr: (
    bgColor: rgb(40, 40, 40),
    fgColor: rgb(240, 240, 240),
	secondaryColor: rgb(240, 240, 240),
	accentContrastColor: hsl(60, 100%, 97%),
	accentColor1: rgb(216, 13, 13),
	accentColor2: rgb(216, 13, 13),

	auColor: rgb(255, 217, 0),

	activeColor: rgb(0, 155, 103),
	inactiveColor: rgb(128, 0, 21),

    yellowColor: hsl(53, 100%, 50%),
    redColor: hsl(10, 100%, 40%),
	blueColor: hsl(180, 100%, 40%),
    textColor: rgb(240, 240, 240),
    acrylicBlur: url(#acrylicBlurDark),
    backgroundImage: url(https://cdn.discordapp.com/attachments/644430138276184066/645339402847125504/Red_Dead_Redemption_2_Screenshot_2019.11.16_-_20.07.53.92.png), /* temp placeholder */
    logoTransform: none,
);

$colorsNy: (
    bgColor: rgb(40, 40, 40),
    fgColor: rgb(240, 240, 240),
	secondaryColor: rgb(240, 240, 240),
	accentContrastColor: hsl(60, 100%, 97%),
	accentColor1: #0F97FF,
	accentColor2: #0F97FF,
	shadeColor: hsla(226, 23%, 11%, .1),

	auColor: rgb(0, 217, 255),

	activeColor: rgb(50, 55, 103),
	inactiveColor: rgb(21, 0, 128),

    yellowColor: hsl(53, 98%, 92%),
    redColor: #0F97FF,
	blueColor: #0F97FF,
    textColor: rgb(240, 240, 240),
    acrylicBlur: url(#acrylicBlurDark),
    backgroundImage: url(https://mirrors.fivem.net/iv_pic.jpg),
    logoTransform: none,
);


@mixin backdropBlurred() {
	backdrop-filter: blur(20px);
	--opacity-clamp: 0.0;

	:host-context(.blur-noBackdrop) & {
		backdrop-filter: none;
		--opacity-clamp: 0.6;
	}
}

@mixin backdropPane($color: bgColor, $opacity: .4) {
	@include backdropBlurred();

	@include theme() using ($theme) {
		& {
			background-color: rgba(gtv($theme, $color), max(var(--opacity-clamp), #{$opacity}));
		}
	}

	@include themeNoHost() using ($theme) {
		& {
			background-color: rgba(gtv($theme, $color), max(var(--opacity-clamp), #{$opacity}));
		}
	}
}

@mixin borderedPane() {
	@include theme() using ($theme) {
		& {
			box-shadow: 0 2px 0 gtv($theme, shadeColor) inset, 0 -2px 0 gtv($theme, shadeColor) inset;
		}
	}
}

@mixin borderedPaneTopOnly() {
	@include theme() using ($theme) {
		& {
			box-shadow: 0 2px 0 gtv($theme, shadeColor) inset;
		}
	}
}

@mixin patternBackground() {
	background-image: url(../assets/images/bgpat.png);
	background-size: 200px;
}

@mixin headerSafeZonePadding($extra: 0) {
	padding: #{$extra} calc(var(--header-safe-right) + #{$extra}) #{$extra} calc(var(--header-safe-left) + #{$extra});
}

@mixin headerSafeZoneMargin() {
	margin: 0 var(--header-safe-right) 0 var(--header-safe-left);
}

@mixin headerSafeZoneWidth() {
	width: calc(100% - var(--header-safe-left) - var(--header-safe-right));
}


@mixin pageHeader() {
	height: var(--header-height);

	@include fontMontserrat;
	font-size: var(--fs-4);
	font-weight: 300;
	letter-spacing: 2px;
	line-height: var(--header-height);
	text-transform: uppercase;

	padding-left: var(--header-safe-left);
	padding-right: var(--header-safe-right);

	margin-bottom: var(--q1);
}


$themeLight: (
    name: light,
    data: $colorsLight
);

$themeDark: (
    name: dark,
    data: $colorsDark
);

$themeRdr: (
    name: rdr3,
    data: $colorsRdr
);

$themeNy: (
    name: ny,
    data: $colorsNy
);

$themes: $themeLight $themeDark $themeRdr $themeNy;

@function gtv($theme, $name) {
    @return map-get(
        map-get($theme, data),
        $name
    );
}

@mixin webapp() {
	:host-context(.webapp) & {
		@content();
	}
}
@mixin webappWorkaround() {
	:host-context(.webapp) {
		@content();
	}
}
@mixin webappNoHost() {
	.webapp & {
		@content();
	}
}

@mixin theme() {
    @each $theme in $themes {
        :host-context(.theme-#{map-get($theme, name)}) & {
            @content ($theme);
        }
    }
}

@mixin themeHostWorkaround() {
    @each $theme in $themes {
        :host-context(.theme-#{map-get($theme, name)}) {
            @content ($theme);
        }
    }
}

@mixin themeNoHost() {
    @each $theme in $themes {
        .theme-#{map-get($theme, name)} & {
            @content ($theme);
        }
    }
}

@mixin themeIsHost() {
    @each $theme in $themes {
        &.theme-#{map-get($theme, name)} {
            @content ($theme);
        }
    }
}

@mixin aspectLimited() {
    @for $w from 17 to 33 {
        @media only screen and (min-aspect-ratio: #{$w}/9) {
			$heightRelativeWidthOffset: calc(100vw * ((#{$w} - 16) / #{$w}));

            & {
                width: calc(100% - #{$heightRelativeWidthOffset} - 5vw);
                margin-left: auto;
                margin-right: auto;
            }
        }
    }
}

@mixin fullWidthPadded($extraPadding: $padding*4) {
    width: calc(#{$width} - #{$extraPadding});

    @include aspectLimited();
}

@mixin backdropBlur($amount: 5px) {
	backdrop-filter: blur($amount);
}

@mixin appContent() {
	overflow: hidden;
	height: 100%;
}

@mixin appContentRespectingHeader() {
	@include appContent;

	margin-top: calc(var(--header-height) + var(--q1));
}

/* via https://github.com/sass/sass/issues/2849#issuecomment-621991522 */

@function css-function( $function, $values... ) {
	@return
		$function
		+ unquote( '(' )
		+ $values
		+ unquote( ')' )
	;
}

@function css-min( $values... ) {
	@return css-function( min, $values );
}

@function css-max( $values... ) {
	@return css-function( max, $values );
}

@function css-clamp( $values... ) {
	@return css-function( clamp, $values );
}

@mixin fontMontserrat {
	font-family: 'Montserrat', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
	font-weight: 500;
}

@mixin fontRubik {
	font-family: 'Rubik', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
	font-weight: 300;
}
@mixin fontRubikImportant {
	font-family: 'Rubik', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif !important;
	font-weight: 300;
}
